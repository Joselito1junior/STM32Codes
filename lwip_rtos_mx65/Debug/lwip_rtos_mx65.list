
lwip_rtos_mx65.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012de0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d7c  08012fe0  08012fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d5c  08015d5c  00017078  2**0
                  CONTENTS
  4 .ARM          00000008  08015d5c  08015d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d64  08015d64  00017078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d64  08015d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015d68  08015d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08015d6c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f160  20000078  08015de4  00017078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f1d8  08015de4  000171d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00017078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000282c4  00000000  00000000  000170a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ecb  00000000  00000000  0003f36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f08  00000000  00000000  00046238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000187e  00000000  00000000  00048140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036728  00000000  00000000  000499be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032c2b  00000000  00000000  000800e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cee0  00000000  00000000  000b2d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cfbf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008710  00000000  00000000  001cfc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001d8344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08012fc8 	.word	0x08012fc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08012fc8 	.word	0x08012fc8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d4:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <MX_FREERTOS_Init+0x28>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4808      	ldr	r0, [pc, #32]	@ (80005fc <MX_FREERTOS_Init+0x2c>)
 80005da:	f003 fdcd 	bl	8004178 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <MX_FREERTOS_Init+0x30>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005e4:	4a07      	ldr	r2, [pc, #28]	@ (8000604 <MX_FREERTOS_Init+0x34>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_FREERTOS_Init+0x38>)
 80005ea:	f003 fdc5 	bl	8004178 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <MX_FREERTOS_Init+0x3c>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08015afc 	.word	0x08015afc
 80005fc:	08000611 	.word	0x08000611
 8000600:	20000094 	.word	0x20000094
 8000604:	08015b20 	.word	0x08015b20
 8000608:	08000625 	.word	0x08000625
 800060c:	20000098 	.word	0x20000098

08000610 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000618:	f002 ff96 	bl	8003548 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f003 fe51 	bl	80042c4 <osDelay>
 8000622:	e7fb      	b.n	800061c <StartDefaultTask+0xc>

08000624 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800062c:	2101      	movs	r1, #1
 800062e:	4804      	ldr	r0, [pc, #16]	@ (8000640 <StartTask02+0x1c>)
 8000630:	f001 ff4d 	bl	80024ce <HAL_GPIO_TogglePin>
    osDelay(100);
 8000634:	2064      	movs	r0, #100	@ 0x64
 8000636:	f003 fe45 	bl	80042c4 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800063a:	bf00      	nop
 800063c:	e7f6      	b.n	800062c <StartTask02+0x8>
 800063e:	bf00      	nop
 8000640:	40020400 	.word	0x40020400

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b41      	ldr	r3, [pc, #260]	@ (8000760 <MX_GPIO_Init+0x11c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a40      	ldr	r2, [pc, #256]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b3b      	ldr	r3, [pc, #236]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a3a      	ldr	r2, [pc, #232]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b35      	ldr	r3, [pc, #212]	@ (8000760 <MX_GPIO_Init+0x11c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a34      	ldr	r2, [pc, #208]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b32      	ldr	r3, [pc, #200]	@ (8000760 <MX_GPIO_Init+0x11c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a2e      	ldr	r2, [pc, #184]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <MX_GPIO_Init+0x11c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <MX_GPIO_Init+0x120>)
 80006da:	f001 fedf 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	4821      	ldr	r0, [pc, #132]	@ (8000768 <MX_GPIO_Init+0x124>)
 80006e4:	f001 feda 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	481b      	ldr	r0, [pc, #108]	@ (800076c <MX_GPIO_Init+0x128>)
 8000700:	f001 fd20 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000704:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4811      	ldr	r0, [pc, #68]	@ (8000764 <MX_GPIO_Init+0x120>)
 800071e:	f001 fd11 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_GPIO_Init+0x124>)
 800073a:	f001 fd03 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_GPIO_Init+0x124>)
 8000752:	f001 fcf7 	bl	8002144 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	@ 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400
 8000768:	40021800 	.word	0x40021800
 800076c:	40020800 	.word	0x40020800

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fa47 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f80a 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f7ff ff62 	bl	8000644 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000780:	f003 fc68 	bl	8004054 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000784:	f7ff ff24 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000788:	f003 fc98 	bl	80040bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <main+0x1c>

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2234      	movs	r2, #52	@ 0x34
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f011 fd6d 	bl	801227e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <SystemClock_Config+0xd4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <SystemClock_Config+0xd4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <SystemClock_Config+0xd8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a25      	ldr	r2, [pc, #148]	@ (8000868 <SystemClock_Config+0xd8>)
 80007d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <SystemClock_Config+0xd8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007fc:	23d8      	movs	r3, #216	@ 0xd8
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000804:	2309      	movs	r3, #9
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fec7 	bl	80025a4 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800081c:	f000 f838 	bl	8000890 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f001 fe70 	bl	8002504 <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800082a:	f000 f831 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000844:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2107      	movs	r1, #7
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f957 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000858:	f000 f81a 	bl	8000890 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	@ (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f9cf 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40014000 	.word	0x40014000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fa9d 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2018      	movs	r0, #24
 8000902:	f000 fa89 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000906:	2018      	movs	r0, #24
 8000908:	f000 faa2 	bl	8000e50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <HAL_InitTick+0xa0>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <HAL_InitTick+0xa0>)
 8000912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000916:	6453      	str	r3, [r2, #68]	@ 0x44
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_InitTick+0xa0>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f002 faf8 	bl	8002f24 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000934:	f002 fae2 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8000938:	4603      	mov	r3, r0
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000940:	4a13      	ldr	r2, [pc, #76]	@ (8000990 <HAL_InitTick+0xa4>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	0c9b      	lsrs	r3, r3, #18
 8000948:	3b01      	subs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_InitTick+0xa8>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <HAL_InitTick+0xac>)
 8000950:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_InitTick+0xa8>)
 8000954:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000958:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_InitTick+0xa8>)
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <HAL_InitTick+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <HAL_InitTick+0xa8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <HAL_InitTick+0xa8>)
 800096e:	f002 fb0b 	bl	8002f88 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <HAL_InitTick+0xa8>)
 800097a:	f002 fb67 	bl	800304c <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3730      	adds	r7, #48	@ 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	431bde83 	.word	0x431bde83
 8000994:	2000009c 	.word	0x2000009c
 8000998:	40014000 	.word	0x40014000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80009da:	f002 fbaf 	bl	800313c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000009c 	.word	0x2000009c

080009e8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <ETH_IRQHandler+0x10>)
 80009ee:	f000 fe1b 	bl	8001628 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20003210 	.word	0x20003210

080009fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return 1;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_kill>:

int _kill(int pid, int sig)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <_kill+0x20>)
 8000a18:	2216      	movs	r2, #22
 8000a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	2000f088 	.word	0x2000f088

08000a30 <_exit>:

void _exit (int status)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ffe5 	bl	8000a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <_exit+0x12>

08000a46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e00a      	b.n	8000a6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a58:	f3af 8000 	nop.w
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	60ba      	str	r2, [r7, #8]
 8000a64:	b2ca      	uxtb	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dbf0      	blt.n	8000a58 <_read+0x12>
  }

  return len;
 8000a76:	687b      	ldr	r3, [r7, #4]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e009      	b.n	8000aa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf1      	blt.n	8000a92 <_write+0x12>
  }
  return len;
 8000aae:	687b      	ldr	r3, [r7, #4]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_close>:

int _close(int file)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_isatty>:

int _isatty(int file)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	@ (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d205      	bcs.n	8000b5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <_sbrk+0x6c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20080000 	.word	0x20080000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200000e8 	.word	0x200000e8
 8000b88:	2000f1d8 	.word	0x2000f1d8
 8000b8c:	2000f088 	.word	0x2000f088

08000b90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	@ (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f011 fb9b 	bl	801231c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fdc3 	bl	8000770 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bf8:	08015d6c 	.word	0x08015d6c
  ldr r2, =_sbss
 8000bfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c00:	2000f1d8 	.word	0x2000f1d8

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>

08000c06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f8f9 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c10:	200f      	movs	r0, #15
 8000c12:	f7ff fe6b 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c16:	f7ff fe41 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000ec 	.word	0x200000ec

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000ec 	.word	0x200000ec

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00
 8000cec:	05fa0000 	.word	0x05fa0000

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	@ (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	@ (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	@ (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	@ 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000e7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001100 <HAL_ETH_Init+0x294>)
 8000e7e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e180      	b.n	8001194 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f002 fcb0 	bl	800380c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b95      	ldr	r3, [pc, #596]	@ (8001104 <HAL_ETH_Init+0x298>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb0:	4a94      	ldr	r2, [pc, #592]	@ (8001104 <HAL_ETH_Init+0x298>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb8:	4b92      	ldr	r3, [pc, #584]	@ (8001104 <HAL_ETH_Init+0x298>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ec4:	4b90      	ldr	r3, [pc, #576]	@ (8001108 <HAL_ETH_Init+0x29c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a8f      	ldr	r2, [pc, #572]	@ (8001108 <HAL_ETH_Init+0x29c>)
 8000eca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000ece:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8001108 <HAL_ETH_Init+0x29c>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	498b      	ldr	r1, [pc, #556]	@ (8001108 <HAL_ETH_Init+0x29c>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000ef4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef6:	f7ff fea7 	bl	8000c48 <HAL_GetTick>
 8000efa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000efc:	e011      	b.n	8000f22 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000efe:	f7ff fea3 	bl	8000c48 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f0c:	d909      	bls.n	8000f22 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e138      	b.n	8001194 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e4      	bne.n	8000efe <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f023 031c 	bic.w	r3, r3, #28
 8000f42:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f44:	f001 ffce 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8000f48:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800110c <HAL_ETH_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d908      	bls.n	8000f64 <HAL_ETH_Init+0xf8>
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4a6e      	ldr	r2, [pc, #440]	@ (8001110 <HAL_ETH_Init+0x2a4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d804      	bhi.n	8000f64 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e027      	b.n	8000fb4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4a6a      	ldr	r2, [pc, #424]	@ (8001110 <HAL_ETH_Init+0x2a4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d908      	bls.n	8000f7e <HAL_ETH_Init+0x112>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4a64      	ldr	r2, [pc, #400]	@ (8001100 <HAL_ETH_Init+0x294>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d204      	bcs.n	8000f7e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f043 030c 	orr.w	r3, r3, #12
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	e01a      	b.n	8000fb4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4a5f      	ldr	r2, [pc, #380]	@ (8001100 <HAL_ETH_Init+0x294>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d303      	bcc.n	8000f8e <HAL_ETH_Init+0x122>
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4a62      	ldr	r2, [pc, #392]	@ (8001114 <HAL_ETH_Init+0x2a8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d911      	bls.n	8000fb2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4a60      	ldr	r2, [pc, #384]	@ (8001114 <HAL_ETH_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d908      	bls.n	8000fa8 <HAL_ETH_Init+0x13c>
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4a5f      	ldr	r2, [pc, #380]	@ (8001118 <HAL_ETH_Init+0x2ac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d804      	bhi.n	8000fa8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e005      	b.n	8000fb4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e000      	b.n	8000fb4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000fb2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000fbc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fc10 	bl	80017e8 <HAL_ETH_WritePHYRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fdc5 	bl	8001b64 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0d6      	b.n	8001194 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000fe6:	20ff      	movs	r0, #255	@ 0xff
 8000fe8:	f7ff fe3a 	bl	8000c60 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a4 	beq.w	800113e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fe27 	bl	8000c48 <HAL_GetTick>
 8000ffa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	461a      	mov	r2, r3
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fb87 	bl	8001718 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800100a:	f7ff fe1d 	bl	8000c48 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d90f      	bls.n	800103c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fd9e 	bl	8001b64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e0ab      	b.n	8001194 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0da      	beq.n	8000ffc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001046:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fbcb 	bl	80017e8 <HAL_ETH_WritePHYRegister>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fd80 	bl	8001b64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800106c:	2301      	movs	r3, #1
 800106e:	e091      	b.n	8001194 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001070:	f7ff fdea 	bl	8000c48 <HAL_GetTick>
 8001074:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	461a      	mov	r2, r3
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fb4a 	bl	8001718 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001084:	f7ff fde0 	bl	8000c48 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001092:	4293      	cmp	r3, r2
 8001094:	d90f      	bls.n	80010b6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fd61 	bl	8001b64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e06e      	b.n	8001194 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0da      	beq.n	8001076 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	461a      	mov	r2, r3
 80010c6:	2110      	movs	r1, #16
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fb25 	bl	8001718 <HAL_ETH_ReadPHYRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fd42 	bl	8001b64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010e8:	2301      	movs	r3, #1
 80010ea:	e053      	b.n	8001194 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d012      	beq.n	800111c <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	e010      	b.n	8001122 <HAL_ETH_Init+0x2b6>
 8001100:	03938700 	.word	0x03938700
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	01312cff 	.word	0x01312cff
 8001110:	02160ebf 	.word	0x02160ebf
 8001114:	05f5e0ff 	.word	0x05f5e0ff
 8001118:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	e026      	b.n	8001182 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	e021      	b.n	8001182 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800114e:	4313      	orrs	r3, r2
 8001150:	b29b      	uxth	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fb46 	bl	80017e8 <HAL_ETH_WritePHYRegister>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fcfb 	bl	8001b64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00c      	b.n	8001194 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800117a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800117e:	f7ff fd6f 	bl	8000c60 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fced 	bl	8001b64 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_ETH_DMATxDescListInit+0x20>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e051      	b.n	8001260 <HAL_ETH_DMATxDescListInit+0xc4>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e030      	b.n	800123a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	015b      	lsls	r3, r3, #5
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	4413      	add	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80011e8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	d208      	bcs.n	800122e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	461a      	mov	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	e002      	b.n	8001234 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3ca      	bcc.n	80011d8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800124c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_ETH_DMARxDescListInit+0x20>
 8001288:	2302      	movs	r3, #2
 800128a:	e055      	b.n	8001338 <HAL_ETH_DMARxDescListInit+0xcc>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2202      	movs	r2, #2
 8001298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e034      	b.n	8001312 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	4413      	add	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80012c0:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d105      	bne.n	80012ea <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d208      	bcs.n	8001306 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	e002      	b.n	800130c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3c6      	bcc.n	80012a8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001324:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_ETH_TransmitFrame+0x24>
 8001364:	2302      	movs	r3, #2
 8001366:	e0cc      	b.n	8001502 <HAL_ETH_TransmitFrame+0x1be>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 800138e:	2301      	movs	r3, #1
 8001390:	e0b7      	b.n	8001502 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da09      	bge.n	80013b0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2212      	movs	r2, #18
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0a8      	b.n	8001502 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d915      	bls.n	80013e6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4a54      	ldr	r2, [pc, #336]	@ (8001510 <HAL_ETH_TransmitFrame+0x1cc>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <HAL_ETH_TransmitFrame+0x1cc>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e001      	b.n	80013ea <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d11c      	bne.n	800142a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fa:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80013fe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800140a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800141a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001428:	e04b      	b.n	80014c2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e044      	b.n	80014ba <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800143e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001454:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800145e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3b01      	subs	r3, #1
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	429a      	cmp	r2, r3
 8001468:	d116      	bne.n	8001498 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001474:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001478:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <HAL_ETH_TransmitFrame+0x1d0>)
 800147e:	fb03 f202 	mul.w	r2, r3, r2
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800148a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001496:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014a6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3301      	adds	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3b6      	bcc.n	8001430 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014dc:	461a      	mov	r2, r3
 80014de:	2304      	movs	r3, #4
 80014e0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ea:	461a      	mov	r2, r3
 80014ec:	2300      	movs	r3, #0
 80014ee:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	ac02b00b 	.word	0xac02b00b
 8001514:	fffffa0c 	.word	0xfffffa0c

08001518 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800152e:	2302      	movs	r3, #2
 8001530:	e074      	b.n	800161c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001542:	e05a      	b.n	80015fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001558:	d10d      	bne.n	8001576 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	461a      	mov	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
 8001574:	e041      	b.n	80015fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
 800159a:	e02e      	b.n	80015fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d103      	bne.n	80015be <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015ca:	1f1a      	subs	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e010      	b.n	800161c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db02      	blt.n	800160a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d99c      	bls.n	8001544 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163e:	2b40      	cmp	r3, #64	@ 0x40
 8001640:	d112      	bne.n	8001668 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f002 f9a2 	bl	800398c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001650:	461a      	mov	r2, r3
 8001652:	2340      	movs	r3, #64	@ 0x40
 8001654:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001666:	e01a      	b.n	800169e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d111      	bne.n	800169e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f838 	bl	80016f0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001688:	461a      	mov	r2, r3
 800168a:	2301      	movs	r3, #1
 800168c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a6:	461a      	mov	r2, r3
 80016a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ac:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016c0:	d112      	bne.n	80016e8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f81e 	bl	8001704 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d0:	461a      	mov	r2, r3
 80016d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016d6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	460b      	mov	r3, r1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b82      	cmp	r3, #130	@ 0x82
 8001738:	d101      	bne.n	800173e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800173a:	2302      	movs	r3, #2
 800173c:	e050      	b.n	80017e0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2282      	movs	r2, #130	@ 0x82
 8001742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 031c 	and.w	r3, r3, #28
 8001754:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8a1b      	ldrh	r3, [r3, #16]
 800175a:	02db      	lsls	r3, r3, #11
 800175c:	b29b      	uxth	r3, r3
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001764:	897b      	ldrh	r3, [r7, #10]
 8001766:	019b      	lsls	r3, r3, #6
 8001768:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f023 0302 	bic.w	r3, r3, #2
 8001778:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800178a:	f7ff fa5d 	bl	8000c48 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001790:	e015      	b.n	80017be <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001792:	f7ff fa59 	bl	8000c48 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d309      	bcc.n	80017b6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e014      	b.n	80017e0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e4      	bne.n	8001792 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	460b      	mov	r3, r1
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b42      	cmp	r3, #66	@ 0x42
 8001808:	d101      	bne.n	800180e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	e04e      	b.n	80018ac <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2242      	movs	r2, #66	@ 0x42
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8a1b      	ldrh	r3, [r3, #16]
 800182a:	02db      	lsls	r3, r3, #11
 800182c:	b29b      	uxth	r3, r3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001834:	897b      	ldrh	r3, [r7, #10]
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001864:	f7ff f9f0 	bl	8000c48 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800186a:	e015      	b.n	8001898 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800186c:	f7ff f9ec 	bl	8000c48 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187a:	d309      	bcc.n	8001890 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e00d      	b.n	80018ac <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e4      	bne.n	800186c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ETH_Start+0x16>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e01f      	b.n	800190a <HAL_ETH_Start+0x56>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fb40 	bl	8001f60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb77 	bl	8001fd4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fc06 	bl	80020f8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fbab 	bl	8002048 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fbd4 	bl	80020a0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ETH_Stop+0x16>
 8001924:	2302      	movs	r3, #2
 8001926:	e01f      	b.n	8001968 <HAL_ETH_Stop+0x56>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb9b 	bl	8002074 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fbc4 	bl	80020cc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fb62 	bl	800200e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbd4 	bl	80020f8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fb22 	bl	8001f9a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ETH_ConfigMAC+0x1c>
 8001988:	2302      	movs	r3, #2
 800198a:	e0e4      	b.n	8001b56 <HAL_ETH_ConfigMAC+0x1e6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80b1 	beq.w	8001b06 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001b60 <HAL_ETH_ConfigMAC+0x1f0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80019bc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80019c2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80019c8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80019ce:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80019d4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80019da:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80019e0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80019e6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80019ec:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80019f2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 80019f8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 80019fe:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff f922 	bl	8000c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a2c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001a32:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001a38:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 8001a3e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001a44:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001a4a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a56:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a58:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff f8fc 	bl	8000c60 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a78:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a82:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001aa0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001aa6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001aac:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ab2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001ab8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff f8c5 	bl	8000c60 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff f8b2 	bl	8000c60 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	61da      	str	r2, [r3, #28]
 8001b04:	e01e      	b.n	8001b44 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001b14:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff f892 	bl	8000c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	ff20810f 	.word	0xff20810f

08001b64 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0b0      	sub	sp, #192	@ 0xc0
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b88:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bb0:	e001      	b.n	8001bb6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bba:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001bd0:	2340      	movs	r3, #64	@ 0x40
 8001bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c3c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ee4 <ETH_MACDMAConfig+0x380>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c48:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8001c4c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8001c50:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c56:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8001c5a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 8001c5e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c64:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8001c68:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8001c6c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8001c70:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c74:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8001c78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7fe ffe1 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001ca6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ca8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8001caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001cae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8001cb0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8001cb6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8001cbc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8001cc2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ccc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001cd4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cd6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7fe ffbc 	bl	8000c60 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cf0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001cfa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001d04:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d14:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d18:	4013      	ands	r3, r2
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d22:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d28:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8001d2e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8001d34:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d3a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8001d40:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d54:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7fe ff7d 	bl	8000c60 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d6e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 8001d74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7fe ff68 	bl	8000c60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d98:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001da8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001df4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <ETH_MACDMAConfig+0x384>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e00:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e02:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e04:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e06:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e08:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001e0a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001e0c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001e0e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001e10:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001e12:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001e14:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001e16:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001e18:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e1c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8001e20:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e34:	461a      	mov	r2, r3
 8001e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e3a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7fe ff08 	bl	8000c60 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e5e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 8001e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e64:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8001e68:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e6c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8001e70:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e76:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e7a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e88:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7fe fee1 	bl	8000c60 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001eac:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10b      	bne.n	8001ece <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebe:	69d9      	ldr	r1, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <ETH_MACDMAConfig+0x388>)
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ecc:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f80a 	bl	8001ef0 <ETH_MACAddressConfig>
}
 8001edc:	bf00      	nop
 8001ede:	37c0      	adds	r7, #192	@ 0xc0
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	ff20810f 	.word	0xff20810f
 8001ee8:	f8de3f23 	.word	0xf8de3f23
 8001eec:	00010040 	.word	0x00010040

08001ef0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3305      	adds	r3, #5
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	3204      	adds	r2, #4
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <ETH_MACAddressConfig+0x68>)
 8001f12:	4413      	add	r3, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3302      	adds	r3, #2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4313      	orrs	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <ETH_MACAddressConfig+0x6c>)
 8001f42:	4413      	add	r3, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40028040 	.word	0x40028040
 8001f5c:	40028044 	.word	0x40028044

08001f60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7fe fe6b 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7fe fe4e 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0204 	orr.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7fe fe31 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0204 	bic.w	r2, r2, #4
 8002028:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7fe fe14 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002066:	6193      	str	r3, [r2, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800208e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002092:	6193      	str	r3, [r2, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020be:	6193      	str	r3, [r2, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ea:	6193      	str	r3, [r2, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002116:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800211a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe fd99 	bl	8000c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002138:	6193      	str	r3, [r2, #24]
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e175      	b.n	8002450 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8164 	bne.w	800244a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x56>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80be 	beq.w	800244a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	4b66      	ldr	r3, [pc, #408]	@ (8002468 <HAL_GPIO_Init+0x324>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	4a65      	ldr	r2, [pc, #404]	@ (8002468 <HAL_GPIO_Init+0x324>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022da:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_GPIO_Init+0x324>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022e6:	4a61      	ldr	r2, [pc, #388]	@ (800246c <HAL_GPIO_Init+0x328>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_GPIO_Init+0x32c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d037      	beq.n	8002382 <HAL_GPIO_Init+0x23e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <HAL_GPIO_Init+0x330>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_GPIO_Init+0x23a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a56      	ldr	r2, [pc, #344]	@ (8002478 <HAL_GPIO_Init+0x334>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02b      	beq.n	800237a <HAL_GPIO_Init+0x236>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a55      	ldr	r2, [pc, #340]	@ (800247c <HAL_GPIO_Init+0x338>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x232>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a54      	ldr	r2, [pc, #336]	@ (8002480 <HAL_GPIO_Init+0x33c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a53      	ldr	r2, [pc, #332]	@ (8002484 <HAL_GPIO_Init+0x340>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x22a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x344>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a51      	ldr	r2, [pc, #324]	@ (800248c <HAL_GPIO_Init+0x348>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a50      	ldr	r2, [pc, #320]	@ (8002490 <HAL_GPIO_Init+0x34c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x350>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x21a>
 800235a:	2309      	movs	r3, #9
 800235c:	e012      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800235e:	230a      	movs	r3, #10
 8002360:	e010      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002362:	2308      	movs	r3, #8
 8002364:	e00e      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002366:	2307      	movs	r3, #7
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800236a:	2306      	movs	r3, #6
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	@ (800246c <HAL_GPIO_Init+0x328>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_GPIO_Init+0x354>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a34      	ldr	r2, [pc, #208]	@ (8002498 <HAL_GPIO_Init+0x354>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <HAL_GPIO_Init+0x354>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a29      	ldr	r2, [pc, #164]	@ (8002498 <HAL_GPIO_Init+0x354>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_GPIO_Init+0x354>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_GPIO_Init+0x354>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002420:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <HAL_GPIO_Init+0x354>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_GPIO_Init+0x354>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae86 	bls.w	8002164 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40022000 	.word	0x40022000
 8002494:	40022400 	.word	0x40022400
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	041a      	lsls	r2, r3, #16
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	400b      	ands	r3, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	@ 0x40
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002532:	f7fe fb89 	bl	8000c48 <HAL_GetTick>
 8002536:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002538:	e009      	b.n	800254e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800253a:	f7fe fb85 	bl	8000c48 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002548:	d901      	bls.n	800254e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e022      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255a:	d1ee      	bne.n	800253a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002566:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7fe fb6e 	bl	8000c48 <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256e:	e009      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002570:	f7fe fb6a 	bl	8000c48 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800257e:	d901      	bls.n	8002584 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e007      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002590:	d1ee      	bne.n	8002570 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e29b      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b96      	ldr	r3, [pc, #600]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d4:	4b93      	ldr	r3, [pc, #588]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025e0:	4b90      	ldr	r3, [pc, #576]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x130>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e275      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x7a>
 8002610:	4b84      	ldr	r3, [pc, #528]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a83      	ldr	r2, [pc, #524]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x9c>
 8002626:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b7c      	ldr	r3, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xc0>
 800264a:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b73      	ldr	r3, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a72      	ldr	r2, [pc, #456]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002664:	4b6f      	ldr	r3, [pc, #444]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b6c      	ldr	r3, [pc, #432]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fae0 	bl	8000c48 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fadc 	bl	8000c48 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e229      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b61      	ldr	r3, [pc, #388]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe facc 	bl	8000c48 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fac8 	bl	8000c48 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e215      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b57      	ldr	r3, [pc, #348]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x110>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d069      	beq.n	80027b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
 80026fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1e9      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	493d      	ldr	r1, [pc, #244]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e040      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a38      	ldr	r2, [pc, #224]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fa7e 	bl	8000c48 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fa7a 	bl	8000c48 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1c7      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b30      	ldr	r3, [pc, #192]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4929      	ldr	r1, [pc, #164]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	e018      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fa5a 	bl	8000c48 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fa56 	bl	8000c48 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1a3      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d038      	beq.n	8002834 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ce:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fa37 	bl	8000c48 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7fe fa33 	bl	8000c48 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e180      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x23a>
 80027fc:	e01a      	b.n	8002834 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <HAL_RCC_OscConfig+0x280>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fa1d 	bl	8000c48 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fa19 	bl	8000c48 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d903      	bls.n	8002828 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e166      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
 8002824:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b92      	ldr	r3, [pc, #584]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a4 	beq.w	800298a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b8c      	ldr	r3, [pc, #560]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b89      	ldr	r3, [pc, #548]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a88      	ldr	r2, [pc, #544]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b86      	ldr	r3, [pc, #536]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286a:	4b83      	ldr	r3, [pc, #524]	@ (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002876:	4b80      	ldr	r3, [pc, #512]	@ (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe f9e1 	bl	8000c48 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe f9dd 	bl	8000c48 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	@ 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e12a      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289c:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x31a>
 80028b0:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x33c>
 80028c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	4b68      	ldr	r3, [pc, #416]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a67      	ldr	r2, [pc, #412]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x35e>
 80028e8:	4b62      	ldr	r3, [pc, #392]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a61      	ldr	r2, [pc, #388]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 8002902:	4b5c      	ldr	r3, [pc, #368]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	4a5b      	ldr	r2, [pc, #364]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	@ 0x70
 800290e:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	4a58      	ldr	r2, [pc, #352]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe f991 	bl	8000c48 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe f98d 	bl	8000c48 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b4c      	ldr	r3, [pc, #304]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x386>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe f97b 	bl	8000c48 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe f977 	bl	8000c48 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0c2      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4a3c      	ldr	r2, [pc, #240]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ae 	beq.w	8002af0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b37      	ldr	r3, [pc, #220]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d06d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d14b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a31      	ldr	r2, [pc, #196]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe f948 	bl	8000c48 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe f944 	bl	8000c48 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e091      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	071b      	lsls	r3, r3, #28
 8002a06:	491b      	ldr	r1, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe f916 	bl	8000c48 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe f912 	bl	8000c48 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e05f      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x47c>
 8002a3e:	e057      	b.n	8002af0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f8fc 	bl	8000c48 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe f8f8 	bl	8000c48 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e045      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4b0>
 8002a72:	e03d      	b.n	8002af0 <HAL_RCC_OscConfig+0x54c>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002afc <HAL_RCC_OscConfig+0x558>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d030      	beq.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d129      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d122      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ab2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d119      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10f      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d0      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b67      	ldr	r3, [pc, #412]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	4965      	ldr	r1, [pc, #404]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d040      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d115      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e073      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4936      	ldr	r1, [pc, #216]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf4:	f7fe f828 	bl	8000c48 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7fe f824 	bl	8000c48 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e053      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d210      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	4922      	ldr	r1, [pc, #136]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	@ (8002ccc <HAL_RCC_ClockConfig+0x1cc>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fe1a 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08015b44 	.word	0x08015b44
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	@ 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002de8:	f7fd fa7a 	bl	80002e0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd fa20 	bl	80002e0 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	@ 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0b5b      	lsrs	r3, r3, #13
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08015b54 	.word	0x08015b54

08002f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	220f      	movs	r2, #15
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f34:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <HAL_RCC_GetClockConfig+0x60>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40023c00 	.word	0x40023c00

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e049      	b.n	800302e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f841 	bl	8003036 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 fa00 	bl	80033cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e054      	b.n	800310e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a26      	ldr	r2, [pc, #152]	@ (800311c <HAL_TIM_Base_Start_IT+0xd0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308e:	d01d      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a22      	ldr	r2, [pc, #136]	@ (8003120 <HAL_TIM_Base_Start_IT+0xd4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d018      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a21      	ldr	r2, [pc, #132]	@ (8003124 <HAL_TIM_Base_Start_IT+0xd8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003128 <HAL_TIM_Base_Start_IT+0xdc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00e      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1e      	ldr	r2, [pc, #120]	@ (800312c <HAL_TIM_Base_Start_IT+0xe0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <HAL_TIM_Base_Start_IT+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x80>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_TIM_Base_Start_IT+0xe8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d115      	bne.n	80030f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_TIM_Base_Start_IT+0xec>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d015      	beq.n	800310a <HAL_TIM_Base_Start_IT+0xbe>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d011      	beq.n	800310a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	e008      	b.n	800310a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e000      	b.n	800310c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40001800 	.word	0x40001800
 8003138:	00010007 	.word	0x00010007

0800313c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0202 	mvn.w	r2, #2
 8003168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f905 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8f7 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f908 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0204 	mvn.w	r2, #4
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8db 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8cd 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8de 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b08      	cmp	r3, #8
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0208 	mvn.w	r2, #8
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2204      	movs	r2, #4
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8b1 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8a3 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f8b4 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b10      	cmp	r3, #16
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0210 	mvn.w	r2, #16
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2208      	movs	r2, #8
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f887 	bl	800338e <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f879 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f88a 	bl	80033a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0201 	mvn.w	r2, #1
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fad6 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ca:	2b80      	cmp	r3, #128	@ 0x80
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f91a 	bl	8003520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d10e      	bne.n	800331a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	2b80      	cmp	r3, #128	@ 0x80
 8003308:	d107      	bne.n	800331a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f90d 	bl	8003534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d10e      	bne.n	8003346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	d107      	bne.n	8003346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f838 	bl	80033b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d10e      	bne.n	8003372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b20      	cmp	r3, #32
 8003360:	d107      	bne.n	8003372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0220 	mvn.w	r2, #32
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8cd 	bl	800350c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a40      	ldr	r2, [pc, #256]	@ (80034e0 <TIM_Base_SetConfig+0x114>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ea:	d00f      	beq.n	800340c <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3d      	ldr	r2, [pc, #244]	@ (80034e4 <TIM_Base_SetConfig+0x118>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00b      	beq.n	800340c <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3c      	ldr	r2, [pc, #240]	@ (80034e8 <TIM_Base_SetConfig+0x11c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3b      	ldr	r2, [pc, #236]	@ (80034ec <TIM_Base_SetConfig+0x120>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3a      	ldr	r2, [pc, #232]	@ (80034f0 <TIM_Base_SetConfig+0x124>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d108      	bne.n	800341e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2f      	ldr	r2, [pc, #188]	@ (80034e0 <TIM_Base_SetConfig+0x114>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02b      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d027      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2c      	ldr	r2, [pc, #176]	@ (80034e4 <TIM_Base_SetConfig+0x118>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d023      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <TIM_Base_SetConfig+0x11c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01f      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2a      	ldr	r2, [pc, #168]	@ (80034ec <TIM_Base_SetConfig+0x120>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01b      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a29      	ldr	r2, [pc, #164]	@ (80034f0 <TIM_Base_SetConfig+0x124>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d017      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a28      	ldr	r2, [pc, #160]	@ (80034f4 <TIM_Base_SetConfig+0x128>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a27      	ldr	r2, [pc, #156]	@ (80034f8 <TIM_Base_SetConfig+0x12c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00f      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a26      	ldr	r2, [pc, #152]	@ (80034fc <TIM_Base_SetConfig+0x130>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <TIM_Base_SetConfig+0x134>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a24      	ldr	r2, [pc, #144]	@ (8003504 <TIM_Base_SetConfig+0x138>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a23      	ldr	r2, [pc, #140]	@ (8003508 <TIM_Base_SetConfig+0x13c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <TIM_Base_SetConfig+0x114>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0xf8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0c      	ldr	r2, [pc, #48]	@ (80034f0 <TIM_Base_SetConfig+0x124>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d103      	bne.n	80034cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	615a      	str	r2, [r3, #20]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40010400 	.word	0x40010400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800
 8003500:	40001800 	.word	0x40001800
 8003504:	40001c00 	.word	0x40001c00
 8003508:	40002000 	.word	0x40002000

0800350c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800354e:	4ba0      	ldr	r3, [pc, #640]	@ (80037d0 <MX_LWIP_Init+0x288>)
 8003550:	22c0      	movs	r2, #192	@ 0xc0
 8003552:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003554:	4b9e      	ldr	r3, [pc, #632]	@ (80037d0 <MX_LWIP_Init+0x288>)
 8003556:	22a8      	movs	r2, #168	@ 0xa8
 8003558:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 25;
 800355a:	4b9d      	ldr	r3, [pc, #628]	@ (80037d0 <MX_LWIP_Init+0x288>)
 800355c:	2219      	movs	r2, #25
 800355e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8003560:	4b9b      	ldr	r3, [pc, #620]	@ (80037d0 <MX_LWIP_Init+0x288>)
 8003562:	2264      	movs	r2, #100	@ 0x64
 8003564:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003566:	4b9b      	ldr	r3, [pc, #620]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003568:	22ff      	movs	r2, #255	@ 0xff
 800356a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800356c:	4b99      	ldr	r3, [pc, #612]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800356e:	22ff      	movs	r2, #255	@ 0xff
 8003570:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003572:	4b98      	ldr	r3, [pc, #608]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800357a:	2200      	movs	r2, #0
 800357c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800357e:	4b96      	ldr	r3, [pc, #600]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003580:	22c0      	movs	r2, #192	@ 0xc0
 8003582:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003584:	4b94      	ldr	r3, [pc, #592]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003586:	22a8      	movs	r2, #168	@ 0xa8
 8003588:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 25;
 800358a:	4b93      	ldr	r3, [pc, #588]	@ (80037d8 <MX_LWIP_Init+0x290>)
 800358c:	2219      	movs	r2, #25
 800358e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003590:	4b91      	ldr	r3, [pc, #580]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003592:	2201      	movs	r2, #1
 8003594:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003596:	2100      	movs	r1, #0
 8003598:	2000      	movs	r0, #0
 800359a:	f004 fe27 	bl	80081ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800359e:	4b8c      	ldr	r3, [pc, #560]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	061a      	lsls	r2, r3, #24
 80035a4:	4b8a      	ldr	r3, [pc, #552]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	4313      	orrs	r3, r2
 80035b4:	4a86      	ldr	r2, [pc, #536]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035b6:	78d2      	ldrb	r2, [r2, #3]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	061a      	lsls	r2, r3, #24
 80035bc:	4b84      	ldr	r3, [pc, #528]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	0619      	lsls	r1, r3, #24
 80035c2:	4b83      	ldr	r3, [pc, #524]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4319      	orrs	r1, r3
 80035ca:	4b81      	ldr	r3, [pc, #516]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035cc:	789b      	ldrb	r3, [r3, #2]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	430b      	orrs	r3, r1
 80035d2:	497f      	ldr	r1, [pc, #508]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035d4:	78c9      	ldrb	r1, [r1, #3]
 80035d6:	430b      	orrs	r3, r1
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80035de:	431a      	orrs	r2, r3
 80035e0:	4b7b      	ldr	r3, [pc, #492]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	0619      	lsls	r1, r3, #24
 80035e6:	4b7a      	ldr	r3, [pc, #488]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	4319      	orrs	r1, r3
 80035ee:	4b78      	ldr	r3, [pc, #480]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035f0:	789b      	ldrb	r3, [r3, #2]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	430b      	orrs	r3, r1
 80035f6:	4976      	ldr	r1, [pc, #472]	@ (80037d0 <MX_LWIP_Init+0x288>)
 80035f8:	78c9      	ldrb	r1, [r1, #3]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003602:	431a      	orrs	r2, r3
 8003604:	4b72      	ldr	r3, [pc, #456]	@ (80037d0 <MX_LWIP_Init+0x288>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	0619      	lsls	r1, r3, #24
 800360a:	4b71      	ldr	r3, [pc, #452]	@ (80037d0 <MX_LWIP_Init+0x288>)
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	4319      	orrs	r1, r3
 8003612:	4b6f      	ldr	r3, [pc, #444]	@ (80037d0 <MX_LWIP_Init+0x288>)
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	430b      	orrs	r3, r1
 800361a:	496d      	ldr	r1, [pc, #436]	@ (80037d0 <MX_LWIP_Init+0x288>)
 800361c:	78c9      	ldrb	r1, [r1, #3]
 800361e:	430b      	orrs	r3, r1
 8003620:	0e1b      	lsrs	r3, r3, #24
 8003622:	4313      	orrs	r3, r2
 8003624:	4a6d      	ldr	r2, [pc, #436]	@ (80037dc <MX_LWIP_Init+0x294>)
 8003626:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003628:	4b6a      	ldr	r3, [pc, #424]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	061a      	lsls	r2, r3, #24
 800362e:	4b69      	ldr	r3, [pc, #420]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	4b67      	ldr	r3, [pc, #412]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003638:	789b      	ldrb	r3, [r3, #2]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4313      	orrs	r3, r2
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003640:	78d2      	ldrb	r2, [r2, #3]
 8003642:	4313      	orrs	r3, r2
 8003644:	061a      	lsls	r2, r3, #24
 8003646:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0619      	lsls	r1, r3, #24
 800364c:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	4319      	orrs	r1, r3
 8003654:	4b5f      	ldr	r3, [pc, #380]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	430b      	orrs	r3, r1
 800365c:	495d      	ldr	r1, [pc, #372]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800365e:	78c9      	ldrb	r1, [r1, #3]
 8003660:	430b      	orrs	r3, r1
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003668:	431a      	orrs	r2, r3
 800366a:	4b5a      	ldr	r3, [pc, #360]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0619      	lsls	r1, r3, #24
 8003670:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	4319      	orrs	r1, r3
 8003678:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	430b      	orrs	r3, r1
 8003680:	4954      	ldr	r1, [pc, #336]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003682:	78c9      	ldrb	r1, [r1, #3]
 8003684:	430b      	orrs	r3, r1
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800368c:	431a      	orrs	r2, r3
 800368e:	4b51      	ldr	r3, [pc, #324]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	0619      	lsls	r1, r3, #24
 8003694:	4b4f      	ldr	r3, [pc, #316]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	4319      	orrs	r1, r3
 800369c:	4b4d      	ldr	r3, [pc, #308]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 800369e:	789b      	ldrb	r3, [r3, #2]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	430b      	orrs	r3, r1
 80036a4:	494b      	ldr	r1, [pc, #300]	@ (80037d4 <MX_LWIP_Init+0x28c>)
 80036a6:	78c9      	ldrb	r1, [r1, #3]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	0e1b      	lsrs	r3, r3, #24
 80036ac:	4313      	orrs	r3, r2
 80036ae:	4a4c      	ldr	r2, [pc, #304]	@ (80037e0 <MX_LWIP_Init+0x298>)
 80036b0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80036b2:	4b49      	ldr	r3, [pc, #292]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	4b45      	ldr	r3, [pc, #276]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036c2:	789b      	ldrb	r3, [r3, #2]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4313      	orrs	r3, r2
 80036c8:	4a43      	ldr	r2, [pc, #268]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036ca:	78d2      	ldrb	r2, [r2, #3]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	061a      	lsls	r2, r3, #24
 80036d0:	4b41      	ldr	r3, [pc, #260]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	0619      	lsls	r1, r3, #24
 80036d6:	4b40      	ldr	r3, [pc, #256]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	4319      	orrs	r1, r3
 80036de:	4b3e      	ldr	r3, [pc, #248]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	430b      	orrs	r3, r1
 80036e6:	493c      	ldr	r1, [pc, #240]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036e8:	78c9      	ldrb	r1, [r1, #3]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036f2:	431a      	orrs	r2, r3
 80036f4:	4b38      	ldr	r3, [pc, #224]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	0619      	lsls	r1, r3, #24
 80036fa:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <MX_LWIP_Init+0x290>)
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	4319      	orrs	r1, r3
 8003702:	4b35      	ldr	r3, [pc, #212]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	430b      	orrs	r3, r1
 800370a:	4933      	ldr	r1, [pc, #204]	@ (80037d8 <MX_LWIP_Init+0x290>)
 800370c:	78c9      	ldrb	r1, [r1, #3]
 800370e:	430b      	orrs	r3, r1
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003716:	431a      	orrs	r2, r3
 8003718:	4b2f      	ldr	r3, [pc, #188]	@ (80037d8 <MX_LWIP_Init+0x290>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	0619      	lsls	r1, r3, #24
 800371e:	4b2e      	ldr	r3, [pc, #184]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	4319      	orrs	r1, r3
 8003726:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	430b      	orrs	r3, r1
 800372e:	492a      	ldr	r1, [pc, #168]	@ (80037d8 <MX_LWIP_Init+0x290>)
 8003730:	78c9      	ldrb	r1, [r1, #3]
 8003732:	430b      	orrs	r3, r1
 8003734:	0e1b      	lsrs	r3, r3, #24
 8003736:	4313      	orrs	r3, r2
 8003738:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <MX_LWIP_Init+0x29c>)
 800373a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800373c:	4b2a      	ldr	r3, [pc, #168]	@ (80037e8 <MX_LWIP_Init+0x2a0>)
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <MX_LWIP_Init+0x2a4>)
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <MX_LWIP_Init+0x29c>)
 800374a:	4a25      	ldr	r2, [pc, #148]	@ (80037e0 <MX_LWIP_Init+0x298>)
 800374c:	4923      	ldr	r1, [pc, #140]	@ (80037dc <MX_LWIP_Init+0x294>)
 800374e:	4828      	ldr	r0, [pc, #160]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 8003750:	f005 fae0 	bl	8008d14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003754:	4826      	ldr	r0, [pc, #152]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 8003756:	f005 fc8f 	bl	8009078 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800375a:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 800375c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800376c:	4820      	ldr	r0, [pc, #128]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 800376e:	f005 fc93 	bl	8009098 <netif_set_up>
 8003772:	e002      	b.n	800377a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003774:	481e      	ldr	r0, [pc, #120]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 8003776:	f005 fcfb 	bl	8009170 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800377a:	491e      	ldr	r1, [pc, #120]	@ (80037f4 <MX_LWIP_Init+0x2ac>)
 800377c:	481c      	ldr	r0, [pc, #112]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 800377e:	f005 fd8d 	bl	800929c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003782:	2200      	movs	r2, #0
 8003784:	2101      	movs	r1, #1
 8003786:	2001      	movs	r0, #1
 8003788:	f000 ff12 	bl	80045b0 <osSemaphoreNew>
 800378c:	4603      	mov	r3, r0
 800378e:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <MX_LWIP_Init+0x2b0>)
 8003790:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <MX_LWIP_Init+0x2b4>)
 8003794:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <MX_LWIP_Init+0x2a8>)
 8003796:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003798:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <MX_LWIP_Init+0x2b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <MX_LWIP_Init+0x2b4>)
 800379e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80037a0:	2224      	movs	r2, #36	@ 0x24
 80037a2:	2100      	movs	r1, #0
 80037a4:	4816      	ldr	r0, [pc, #88]	@ (8003800 <MX_LWIP_Init+0x2b8>)
 80037a6:	f00e fd6a 	bl	801227e <memset>
  attributes.name = "LinkThr";
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <MX_LWIP_Init+0x2b8>)
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <MX_LWIP_Init+0x2bc>)
 80037ae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80037b0:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <MX_LWIP_Init+0x2b8>)
 80037b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_LWIP_Init+0x2b8>)
 80037ba:	2210      	movs	r2, #16
 80037bc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80037be:	4a10      	ldr	r2, [pc, #64]	@ (8003800 <MX_LWIP_Init+0x2b8>)
 80037c0:	490e      	ldr	r1, [pc, #56]	@ (80037fc <MX_LWIP_Init+0x2b4>)
 80037c2:	4811      	ldr	r0, [pc, #68]	@ (8003808 <MX_LWIP_Init+0x2c0>)
 80037c4:	f000 fcd8 	bl	8004178 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000013c 	.word	0x2000013c
 80037d4:	20000140 	.word	0x20000140
 80037d8:	20000144 	.word	0x20000144
 80037dc:	20000130 	.word	0x20000130
 80037e0:	20000134 	.word	0x20000134
 80037e4:	20000138 	.word	0x20000138
 80037e8:	08008129 	.word	0x08008129
 80037ec:	08003e55 	.word	0x08003e55
 80037f0:	200000fc 	.word	0x200000fc
 80037f4:	08003f39 	.word	0x08003f39
 80037f8:	200000f0 	.word	0x200000f0
 80037fc:	200000f4 	.word	0x200000f4
 8003800:	20000148 	.word	0x20000148
 8003804:	08012ff8 	.word	0x08012ff8
 8003808:	08003ec1 	.word	0x08003ec1

0800380c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	@ 0x38
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <HAL_ETH_MspInit+0x168>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f040 809e 	bne.w	800396c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003830:	4b51      	ldr	r3, [pc, #324]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800383a:	6313      	str	r3, [r2, #48]	@ 0x30
 800383c:	4b4e      	ldr	r3, [pc, #312]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	4a4a      	ldr	r2, [pc, #296]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800384e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003852:	6313      	str	r3, [r2, #48]	@ 0x30
 8003854:	4b48      	ldr	r3, [pc, #288]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4b45      	ldr	r3, [pc, #276]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	4a44      	ldr	r2, [pc, #272]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003866:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800386a:	6313      	str	r3, [r2, #48]	@ 0x30
 800386c:	4b42      	ldr	r3, [pc, #264]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003878:	4b3f      	ldr	r3, [pc, #252]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	4a3e      	ldr	r2, [pc, #248]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	6313      	str	r3, [r2, #48]	@ 0x30
 8003884:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	4a38      	ldr	r2, [pc, #224]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6313      	str	r3, [r2, #48]	@ 0x30
 800389c:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a8:	4b33      	ldr	r3, [pc, #204]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	4a32      	ldr	r2, [pc, #200]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b4:	4b30      	ldr	r3, [pc, #192]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80038cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <HAL_ETH_MspInit+0x16c>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80038d8:	2332      	movs	r3, #50	@ 0x32
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038e8:	230b      	movs	r3, #11
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	4822      	ldr	r0, [pc, #136]	@ (800397c <HAL_ETH_MspInit+0x170>)
 80038f4:	f7fe fc26 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80038f8:	2386      	movs	r3, #134	@ 0x86
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003908:	230b      	movs	r3, #11
 800390a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003910:	4619      	mov	r1, r3
 8003912:	481b      	ldr	r0, [pc, #108]	@ (8003980 <HAL_ETH_MspInit+0x174>)
 8003914:	f7fe fc16 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003926:	2303      	movs	r3, #3
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800392a:	230b      	movs	r3, #11
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800392e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003932:	4619      	mov	r1, r3
 8003934:	4813      	ldr	r0, [pc, #76]	@ (8003984 <HAL_ETH_MspInit+0x178>)
 8003936:	f7fe fc05 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800393a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800394c:	230b      	movs	r3, #11
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003954:	4619      	mov	r1, r3
 8003956:	480c      	ldr	r0, [pc, #48]	@ (8003988 <HAL_ETH_MspInit+0x17c>)
 8003958:	f7fe fbf4 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2105      	movs	r1, #5
 8003960:	203d      	movs	r0, #61	@ 0x3d
 8003962:	f7fd fa59 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003966:	203d      	movs	r0, #61	@ 0x3d
 8003968:	f7fd fa72 	bl	8000e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800396c:	bf00      	nop
 800396e:	3738      	adds	r7, #56	@ 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40028000 	.word	0x40028000
 8003978:	40023800 	.word	0x40023800
 800397c:	40020800 	.word	0x40020800
 8003980:	40020000 	.word	0x40020000
 8003984:	40020400 	.word	0x40020400
 8003988:	40021800 	.word	0x40021800

0800398c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003994:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <HAL_ETH_RxCpltCallback+0x1c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 ff0b 	bl	80047b4 <osSemaphoreRelease>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000320c 	.word	0x2000320c

080039ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b090      	sub	sp, #64	@ 0x40
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80039b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003b30 <low_level_init+0x184>)
 80039ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003b34 <low_level_init+0x188>)
 80039bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80039be:	4b5c      	ldr	r3, [pc, #368]	@ (8003b30 <low_level_init+0x184>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80039c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b30 <low_level_init+0x184>)
 80039c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039ca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80039cc:	4b58      	ldr	r3, [pc, #352]	@ (8003b30 <low_level_init+0x184>)
 80039ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039d2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80039d4:	4b56      	ldr	r3, [pc, #344]	@ (8003b30 <low_level_init+0x184>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80039da:	2300      	movs	r3, #0
 80039dc:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80039e2:	23e1      	movs	r3, #225	@ 0xe1
 80039e4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80039ea:	2300      	movs	r3, #0
 80039ec:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80039ee:	2300      	movs	r3, #0
 80039f0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80039f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003b30 <low_level_init+0x184>)
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80039fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003b30 <low_level_init+0x184>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003a00:	4b4b      	ldr	r3, [pc, #300]	@ (8003b30 <low_level_init+0x184>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003a06:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <low_level_init+0x184>)
 8003a08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a0c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a0e:	4848      	ldr	r0, [pc, #288]	@ (8003b30 <low_level_init+0x184>)
 8003a10:	f7fd fa2c 	bl	8000e6c <HAL_ETH_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003a34:	2304      	movs	r3, #4
 8003a36:	4a40      	ldr	r2, [pc, #256]	@ (8003b38 <low_level_init+0x18c>)
 8003a38:	4940      	ldr	r1, [pc, #256]	@ (8003b3c <low_level_init+0x190>)
 8003a3a:	483d      	ldr	r0, [pc, #244]	@ (8003b30 <low_level_init+0x184>)
 8003a3c:	f7fd fbae 	bl	800119c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003a40:	2304      	movs	r3, #4
 8003a42:	4a3f      	ldr	r2, [pc, #252]	@ (8003b40 <low_level_init+0x194>)
 8003a44:	493f      	ldr	r1, [pc, #252]	@ (8003b44 <low_level_init+0x198>)
 8003a46:	483a      	ldr	r0, [pc, #232]	@ (8003b30 <low_level_init+0x184>)
 8003a48:	f7fd fc10 	bl	800126c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2206      	movs	r2, #6
 8003a50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a54:	4b36      	ldr	r3, [pc, #216]	@ (8003b30 <low_level_init+0x184>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003a60:	4b33      	ldr	r3, [pc, #204]	@ (8003b30 <low_level_init+0x184>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	785a      	ldrb	r2, [r3, #1]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003a6c:	4b30      	ldr	r3, [pc, #192]	@ (8003b30 <low_level_init+0x184>)
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	789a      	ldrb	r2, [r3, #2]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a78:	4b2d      	ldr	r3, [pc, #180]	@ (8003b30 <low_level_init+0x184>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	78da      	ldrb	r2, [r3, #3]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a84:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <low_level_init+0x184>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	791a      	ldrb	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a90:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <low_level_init+0x184>)
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	795a      	ldrb	r2, [r3, #5]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003aa2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003aaa:	f043 030a 	orr.w	r3, r3, #10
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2101      	movs	r1, #1
 8003aba:	2001      	movs	r0, #1
 8003abc:	f000 fd78 	bl	80045b0 <osSemaphoreNew>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <low_level_init+0x19c>)
 8003ac4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	2224      	movs	r2, #36	@ 0x24
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00e fbd5 	bl	801227e <memset>
  attributes.name = "EthIf";
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <low_level_init+0x1a0>)
 8003ad6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003ad8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 8003ade:	2330      	movs	r3, #48	@ 0x30
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4819      	ldr	r0, [pc, #100]	@ (8003b50 <low_level_init+0x1a4>)
 8003aec:	f000 fb44 	bl	8004178 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003af0:	480f      	ldr	r0, [pc, #60]	@ (8003b30 <low_level_init+0x184>)
 8003af2:	f7fd fedf 	bl	80018b4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003afa:	461a      	mov	r2, r3
 8003afc:	211d      	movs	r1, #29
 8003afe:	480c      	ldr	r0, [pc, #48]	@ (8003b30 <low_level_init+0x184>)
 8003b00:	f7fd fe0a 	bl	8001718 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	f043 030b 	orr.w	r3, r3, #11
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	461a      	mov	r2, r3
 8003b10:	211d      	movs	r1, #29
 8003b12:	4807      	ldr	r0, [pc, #28]	@ (8003b30 <low_level_init+0x184>)
 8003b14:	f7fd fe68 	bl	80017e8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	211d      	movs	r1, #29
 8003b20:	4803      	ldr	r0, [pc, #12]	@ (8003b30 <low_level_init+0x184>)
 8003b22:	f7fd fdf9 	bl	8001718 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003b26:	bf00      	nop
 8003b28:	3740      	adds	r7, #64	@ 0x40
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20003210 	.word	0x20003210
 8003b34:	40028000 	.word	0x40028000
 8003b38:	20001a3c 	.word	0x20001a3c
 8003b3c:	200001ec 	.word	0x200001ec
 8003b40:	2000026c 	.word	0x2000026c
 8003b44:	2000016c 	.word	0x2000016c
 8003b48:	2000320c 	.word	0x2000320c
 8003b4c:	08013000 	.word	0x08013000
 8003b50:	08003df5 	.word	0x08003df5

08003b54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c8c <low_level_output+0x138>)
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003b76:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <low_level_output+0x138>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	e05a      	b.n	8003c3c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da03      	bge.n	8003b96 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003b8e:	23f8      	movs	r3, #248	@ 0xf8
 8003b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8003b94:	e05c      	b.n	8003c50 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	895b      	ldrh	r3, [r3, #10]
 8003b9a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ba0:	e02f      	b.n	8003c02 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	18d0      	adds	r0, r2, r3
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	18d1      	adds	r1, r2, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f00e fbd6 	bl	801236a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da03      	bge.n	8003bd4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003bcc:	23f8      	movs	r3, #248	@ 0xf8
 8003bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003bd2:	e03d      	b.n	8003c50 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003be4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003bf0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003bfc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d8c8      	bhi.n	8003ba2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	18d0      	adds	r0, r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f00e fba2 	bl	801236a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1a1      	bne.n	8003b86 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	4811      	ldr	r0, [pc, #68]	@ (8003c8c <low_level_output+0x138>)
 8003c46:	f7fd fb7d 	bl	8001344 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <low_level_output+0x138>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <low_level_output+0x138>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <low_level_output+0x138>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3728      	adds	r7, #40	@ 0x28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20003210 	.word	0x20003210

08003c90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	@ 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003cb4:	484e      	ldr	r0, [pc, #312]	@ (8003df0 <low_level_input+0x160>)
 8003cb6:	f7fd fc2f 	bl	8001518 <HAL_ETH_GetReceivedFrame_IT>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <low_level_input+0x34>

    return NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e091      	b.n	8003de8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <low_level_input+0x160>)
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003cca:	4b49      	ldr	r3, [pc, #292]	@ (8003df0 <low_level_input+0x160>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8003cd0:	89fb      	ldrh	r3, [r7, #14]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003cdc:	4619      	mov	r1, r3
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f005 fba6 	bl	8009430 <pbuf_alloc>
 8003ce4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d04b      	beq.n	8003d84 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003cec:	4b40      	ldr	r3, [pc, #256]	@ (8003df0 <low_level_input+0x160>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfa:	e040      	b.n	8003d7e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	895b      	ldrh	r3, [r3, #10]
 8003d00:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003d06:	e021      	b.n	8003d4c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	18d0      	adds	r0, r2, r3
 8003d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	18d1      	adds	r1, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f00e fb23 	bl	801236a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4413      	add	r3, r2
 8003d36:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003d3a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003d46:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d8d6      	bhi.n	8003d08 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	18d0      	adds	r0, r2, r3
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f00e fafd 	bl	801236a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4413      	add	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1bb      	bne.n	8003cfc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003d84:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <low_level_input+0x160>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e00b      	b.n	8003da8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3301      	adds	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <low_level_input+0x160>)
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3ee      	bcc.n	8003d90 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <low_level_input+0x160>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003db8:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <low_level_input+0x160>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <low_level_input+0x160>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <low_level_input+0x160>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de0:	461a      	mov	r2, r3
 8003de2:	2300      	movs	r3, #0
 8003de4:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	@ 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20003210 	.word	0x20003210

08003df4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e00:	4b12      	ldr	r3, [pc, #72]	@ (8003e4c <ethernetif_input+0x58>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fc6d 	bl	80046e8 <osSemaphoreAcquire>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f5      	bne.n	8003e00 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003e14:	480e      	ldr	r0, [pc, #56]	@ (8003e50 <ethernetif_input+0x5c>)
 8003e16:	f00e f873 	bl	8011f00 <sys_mutex_lock>
        p = low_level_input( netif );
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff ff38 	bl	8003c90 <low_level_input>
 8003e20:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	68f9      	ldr	r1, [r7, #12]
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	4798      	blx	r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003e38:	68b8      	ldr	r0, [r7, #8]
 8003e3a:	f005 fddd 	bl	80099f8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003e3e:	4804      	ldr	r0, [pc, #16]	@ (8003e50 <ethernetif_input+0x5c>)
 8003e40:	f00e f86d 	bl	8011f1e <sys_mutex_unlock>
      } while(p!=NULL);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e4      	bne.n	8003e14 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e4a:	e7d9      	b.n	8003e00 <ethernetif_input+0xc>
 8003e4c:	2000320c 	.word	0x2000320c
 8003e50:	20007bac 	.word	0x20007bac

08003e54 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <ethernetif_init+0x1c>
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <ethernetif_init+0x48>)
 8003e64:	f240 223b 	movw	r2, #571	@ 0x23b
 8003e68:	490d      	ldr	r1, [pc, #52]	@ (8003ea0 <ethernetif_init+0x4c>)
 8003e6a:	480e      	ldr	r0, [pc, #56]	@ (8003ea4 <ethernetif_init+0x50>)
 8003e6c:	f00e f9a2 	bl	80121b4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2273      	movs	r2, #115	@ 0x73
 8003e74:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2274      	movs	r2, #116	@ 0x74
 8003e7c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <ethernetif_init+0x54>)
 8003e84:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <ethernetif_init+0x58>)
 8003e8a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fd8d 	bl	80039ac <low_level_init>

  return ERR_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	08013008 	.word	0x08013008
 8003ea0:	08013024 	.word	0x08013024
 8003ea4:	08013034 	.word	0x08013034
 8003ea8:	080100dd 	.word	0x080100dd
 8003eac:	08003b55 	.word	0x08003b55

08003eb0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003eb4:	f7fc fec8 	bl	8000c48 <HAL_GetTick>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4816      	ldr	r0, [pc, #88]	@ (8003f34 <ethernetif_set_link+0x74>)
 8003eda:	f7fd fc1d 	bl	8001718 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <ethernetif_set_link+0x48>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 f967 	bl	80091d4 <netif_set_link_up>
 8003f06:	e011      	b.n	8003f2c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <ethernetif_set_link+0x6c>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 f988 	bl	800923c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003f2c:	20c8      	movs	r0, #200	@ 0xc8
 8003f2e:	f000 f9c9 	bl	80042c4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f32:	e7cd      	b.n	8003ed0 <ethernetif_set_link+0x10>
 8003f34:	20003210 	.word	0x20003210

08003f38 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d05d      	beq.n	8004016 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f5a:	4b34      	ldr	r3, [pc, #208]	@ (800402c <ethernetif_update_config+0xf4>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03f      	beq.n	8003fe2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003f62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f66:	2100      	movs	r1, #0
 8003f68:	4830      	ldr	r0, [pc, #192]	@ (800402c <ethernetif_update_config+0xf4>)
 8003f6a:	f7fd fc3d 	bl	80017e8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fc fe6b 	bl	8000c48 <HAL_GetTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	482b      	ldr	r0, [pc, #172]	@ (800402c <ethernetif_update_config+0xf4>)
 8003f80:	f7fd fbca 	bl	8001718 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003f84:	f7fc fe60 	bl	8000c48 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f92:	d828      	bhi.n	8003fe6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0eb      	beq.n	8003f76 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	4821      	ldr	r0, [pc, #132]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fa8:	f7fd fbb6 	bl	8001718 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e002      	b.n	8003fc6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003fd0:	4b16      	ldr	r3, [pc, #88]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e016      	b.n	8004006 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003fd8:	4b14      	ldr	r3, [pc, #80]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e011      	b.n	8004006 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <ethernetif_update_config+0xb0>
          goto error;
 8003fe6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fe8:	4b10      	ldr	r3, [pc, #64]	@ (800402c <ethernetif_update_config+0xf4>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <ethernetif_update_config+0xf4>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2100      	movs	r1, #0
 8004000:	480a      	ldr	r0, [pc, #40]	@ (800402c <ethernetif_update_config+0xf4>)
 8004002:	f7fd fbf1 	bl	80017e8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004006:	2100      	movs	r1, #0
 8004008:	4808      	ldr	r0, [pc, #32]	@ (800402c <ethernetif_update_config+0xf4>)
 800400a:	f7fd fcb1 	bl	8001970 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800400e:	4807      	ldr	r0, [pc, #28]	@ (800402c <ethernetif_update_config+0xf4>)
 8004010:	f7fd fc50 	bl	80018b4 <HAL_ETH_Start>
 8004014:	e002      	b.n	800401c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004016:	4805      	ldr	r0, [pc, #20]	@ (800402c <ethernetif_update_config+0xf4>)
 8004018:	f7fd fc7b 	bl	8001912 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f807 	bl	8004030 <ethernetif_notify_conn_changed>
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20003210 	.word	0x20003210

08004030 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405a:	f3ef 8305 	mrs	r3, IPSR
 800405e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	607b      	str	r3, [r7, #4]
  return(result);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004072:	f3ef 8311 	mrs	r3, BASEPRI
 8004076:	603b      	str	r3, [r7, #0]
  return(result);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <osKernelInitialize+0x3a>
 800407e:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <osKernelInitialize+0x64>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d103      	bne.n	800408e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004086:	f06f 0305 	mvn.w	r3, #5
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e00c      	b.n	80040a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <osKernelInitialize+0x64>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004096:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <osKernelInitialize+0x64>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e002      	b.n	80040a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20003258 	.word	0x20003258

080040bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c2:	f3ef 8305 	mrs	r3, IPSR
 80040c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ce:	f3ef 8310 	mrs	r3, PRIMASK
 80040d2:	607b      	str	r3, [r7, #4]
  return(result);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040da:	f3ef 8311 	mrs	r3, BASEPRI
 80040de:	603b      	str	r3, [r7, #0]
  return(result);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <osKernelStart+0x3a>
 80040e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <osKernelStart+0x68>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d103      	bne.n	80040f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80040ee:	f06f 0305 	mvn.w	r3, #5
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e010      	b.n	8004118 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <osKernelStart+0x68>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d109      	bne.n	8004112 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040fe:	f7ff ffa1 	bl	8004044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <osKernelStart+0x68>)
 8004104:	2202      	movs	r2, #2
 8004106:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004108:	f002 f916 	bl	8006338 <vTaskStartScheduler>
      stat = osOK;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e002      	b.n	8004118 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20003258 	.word	0x20003258

08004128 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800412e:	f3ef 8305 	mrs	r3, IPSR
 8004132:	60bb      	str	r3, [r7, #8]
  return(result);
 8004134:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413a:	f3ef 8310 	mrs	r3, PRIMASK
 800413e:	607b      	str	r3, [r7, #4]
  return(result);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004146:	f3ef 8311 	mrs	r3, BASEPRI
 800414a:	603b      	str	r3, [r7, #0]
  return(result);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <osKernelGetTickCount+0x3a>
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <osKernelGetTickCount+0x4c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d103      	bne.n	8004162 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800415a:	f002 fa17 	bl	800658c <xTaskGetTickCountFromISR>
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	e002      	b.n	8004168 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004162:	f002 fa03 	bl	800656c <xTaskGetTickCount>
 8004166:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20003258 	.word	0x20003258

08004178 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b090      	sub	sp, #64	@ 0x40
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004188:	f3ef 8305 	mrs	r3, IPSR
 800418c:	61fb      	str	r3, [r7, #28]
  return(result);
 800418e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 808f 	bne.w	80042b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	61bb      	str	r3, [r7, #24]
  return(result);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a2:	f3ef 8311 	mrs	r3, BASEPRI
 80041a6:	617b      	str	r3, [r7, #20]
  return(result);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <osThreadNew+0x3e>
 80041ae:	4b44      	ldr	r3, [pc, #272]	@ (80042c0 <osThreadNew+0x148>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d07e      	beq.n	80042b4 <osThreadNew+0x13c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d07b      	beq.n	80042b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041c0:	2318      	movs	r3, #24
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d045      	beq.n	8004260 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <osThreadNew+0x6a>
        name = attr->name;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <osThreadNew+0x90>
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	2b38      	cmp	r3, #56	@ 0x38
 80041fa:	d805      	bhi.n	8004208 <osThreadNew+0x90>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <osThreadNew+0x94>
        return (NULL);
 8004208:	2300      	movs	r3, #0
 800420a:	e054      	b.n	80042b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <osThreadNew+0xca>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b5b      	cmp	r3, #91	@ 0x5b
 800422a:	d90a      	bls.n	8004242 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	d006      	beq.n	8004242 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <osThreadNew+0xca>
        mem = 1;
 800423c:	2301      	movs	r3, #1
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	e010      	b.n	8004264 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <osThreadNew+0xec>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <osThreadNew+0xec>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <osThreadNew+0xec>
          mem = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e001      	b.n	8004264 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d110      	bne.n	800428c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004272:	9202      	str	r2, [sp, #8]
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800427e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f001 fe73 	bl	8005f6c <xTaskCreateStatic>
 8004286:	4603      	mov	r3, r0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e013      	b.n	80042b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	b29a      	uxth	r2, r3
 8004296:	f107 0310 	add.w	r3, r7, #16
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f001 fec7 	bl	8006038 <xTaskCreate>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d001      	beq.n	80042b4 <osThreadNew+0x13c>
          hTask = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042b4:	693b      	ldr	r3, [r7, #16]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	@ 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20003258 	.word	0x20003258

080042c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042cc:	f3ef 8305 	mrs	r3, IPSR
 80042d0:	613b      	str	r3, [r7, #16]
  return(result);
 80042d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10f      	bne.n	80042f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042e4:	f3ef 8311 	mrs	r3, BASEPRI
 80042e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <osDelay+0x3c>
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <osDelay+0x58>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d103      	bne.n	8004300 <osDelay+0x3c>
    stat = osErrorISR;
 80042f8:	f06f 0305 	mvn.w	r3, #5
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e007      	b.n	8004310 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <osDelay+0x4c>
      vTaskDelay(ticks);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f001 ffdc 	bl	80062c8 <vTaskDelay>
    }
  }

  return (stat);
 8004310:	697b      	ldr	r3, [r7, #20]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20003258 	.word	0x20003258

08004320 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800432c:	f3ef 8305 	mrs	r3, IPSR
 8004330:	613b      	str	r3, [r7, #16]
  return(result);
 8004332:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 8085 	bne.w	8004444 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	60bb      	str	r3, [r7, #8]
  return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <osMutexNew+0x3a>
 8004352:	4b3f      	ldr	r3, [pc, #252]	@ (8004450 <osMutexNew+0x130>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d074      	beq.n	8004444 <osMutexNew+0x124>
    if (attr != NULL) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	e001      	b.n	800436c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <osMutexNew+0x5c>
      rmtx = 1U;
 8004376:	2301      	movs	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e001      	b.n	8004380 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d15c      	bne.n	8004444 <osMutexNew+0x124>
      mem = -1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d015      	beq.n	80043c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <osMutexNew+0x8c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80043a4:	d902      	bls.n	80043ac <osMutexNew+0x8c>
          mem = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e00c      	b.n	80043c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <osMutexNew+0xa6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <osMutexNew+0xa6>
            mem = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e001      	b.n	80043c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d112      	bne.n	80043f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4619      	mov	r1, r3
 80043d8:	2004      	movs	r0, #4
 80043da:	f000 fe22 	bl	8005022 <xQueueCreateMutexStatic>
 80043de:	6278      	str	r0, [r7, #36]	@ 0x24
 80043e0:	e016      	b.n	8004410 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4619      	mov	r1, r3
 80043e8:	2001      	movs	r0, #1
 80043ea:	f000 fe1a 	bl	8005022 <xQueueCreateMutexStatic>
 80043ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80043f0:	e00e      	b.n	8004410 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80043fe:	2004      	movs	r0, #4
 8004400:	f000 fdf7 	bl	8004ff2 <xQueueCreateMutex>
 8004404:	6278      	str	r0, [r7, #36]	@ 0x24
 8004406:	e003      	b.n	8004410 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004408:	2001      	movs	r0, #1
 800440a:	f000 fdf2 	bl	8004ff2 <xQueueCreateMutex>
 800440e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <osMutexNew+0x110>
        if (attr != NULL) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <osMutexNew+0x104>
          name = attr->name;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e001      	b.n	8004428 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800442c:	f001 fd16 	bl	8005e5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <osMutexNew+0x124>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	@ 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20003258 	.word	0x20003258

08004454 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004472:	f3ef 8305 	mrs	r3, IPSR
 8004476:	613b      	str	r3, [r7, #16]
  return(result);
 8004478:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	60fb      	str	r3, [r7, #12]
  return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800448a:	f3ef 8311 	mrs	r3, BASEPRI
 800448e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <osMutexAcquire+0x52>
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <osMutexAcquire+0xb8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d103      	bne.n	80044a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800449e:	f06f 0305 	mvn.w	r3, #5
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	e02c      	b.n	8004500 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80044ac:	f06f 0303 	mvn.w	r3, #3
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e025      	b.n	8004500 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	69b8      	ldr	r0, [r7, #24]
 80044be:	f000 fe02 	bl	80050c6 <xQueueTakeMutexRecursive>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d01b      	beq.n	8004500 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80044ce:	f06f 0301 	mvn.w	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e014      	b.n	8004500 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044d6:	f06f 0302 	mvn.w	r3, #2
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	e010      	b.n	8004500 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f001 f9cd 	bl	8005880 <xQueueSemaphoreTake>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d009      	beq.n	8004500 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80044f2:	f06f 0301 	mvn.w	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e002      	b.n	8004500 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044fa:	f06f 0302 	mvn.w	r3, #2
 80044fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004500:	69fb      	ldr	r3, [r7, #28]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20003258 	.word	0x20003258

08004510 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452c:	f3ef 8305 	mrs	r3, IPSR
 8004530:	613b      	str	r3, [r7, #16]
  return(result);
 8004532:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10f      	bne.n	8004558 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004538:	f3ef 8310 	mrs	r3, PRIMASK
 800453c:	60fb      	str	r3, [r7, #12]
  return(result);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004544:	f3ef 8311 	mrs	r3, BASEPRI
 8004548:	60bb      	str	r3, [r7, #8]
  return(result);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <osMutexRelease+0x50>
 8004550:	4b16      	ldr	r3, [pc, #88]	@ (80045ac <osMutexRelease+0x9c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d103      	bne.n	8004560 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004558:	f06f 0305 	mvn.w	r3, #5
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e01f      	b.n	80045a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004566:	f06f 0303 	mvn.w	r3, #3
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e018      	b.n	80045a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004574:	69b8      	ldr	r0, [r7, #24]
 8004576:	f000 fd6f 	bl	8005058 <xQueueGiveMutexRecursive>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d00f      	beq.n	80045a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004580:	f06f 0302 	mvn.w	r3, #2
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e00b      	b.n	80045a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004588:	2300      	movs	r3, #0
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	69b8      	ldr	r0, [r7, #24]
 8004590:	f000 fe48 	bl	8005224 <xQueueGenericSend>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d002      	beq.n	80045a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800459a:	f06f 0302 	mvn.w	r3, #2
 800459e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80045a0:	69fb      	ldr	r3, [r7, #28]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20003258 	.word	0x20003258

080045b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08c      	sub	sp, #48	@ 0x30
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c0:	f3ef 8305 	mrs	r3, IPSR
 80045c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80045c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 8086 	bne.w	80046da <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	617b      	str	r3, [r7, #20]
  return(result);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045da:	f3ef 8311 	mrs	r3, BASEPRI
 80045de:	613b      	str	r3, [r7, #16]
  return(result);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <osSemaphoreNew+0x3e>
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <osSemaphoreNew+0x134>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d075      	beq.n	80046da <osSemaphoreNew+0x12a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d072      	beq.n	80046da <osSemaphoreNew+0x12a>
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d86e      	bhi.n	80046da <osSemaphoreNew+0x12a>
    mem = -1;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <osSemaphoreNew+0x6e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b4f      	cmp	r3, #79	@ 0x4f
 8004616:	d902      	bls.n	800461e <osSemaphoreNew+0x6e>
        mem = 1;
 8004618:	2301      	movs	r3, #1
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	e00c      	b.n	8004638 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d108      	bne.n	8004638 <osSemaphoreNew+0x88>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <osSemaphoreNew+0x88>
          mem = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
 8004632:	e001      	b.n	8004638 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d04c      	beq.n	80046da <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d128      	bne.n	8004698 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10a      	bne.n	8004662 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2203      	movs	r2, #3
 8004652:	9200      	str	r2, [sp, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	2100      	movs	r1, #0
 8004658:	2001      	movs	r0, #1
 800465a:	f000 fbc3 	bl	8004de4 <xQueueGenericCreateStatic>
 800465e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004660:	e005      	b.n	800466e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004662:	2203      	movs	r2, #3
 8004664:	2100      	movs	r1, #0
 8004666:	2001      	movs	r0, #1
 8004668:	f000 fc43 	bl	8004ef2 <xQueueGenericCreate>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d022      	beq.n	80046ba <osSemaphoreNew+0x10a>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01f      	beq.n	80046ba <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800467a:	2300      	movs	r3, #0
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004682:	f000 fdcf 	bl	8005224 <xQueueGenericSend>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d016      	beq.n	80046ba <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800468c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800468e:	f001 fa97 	bl	8005bc0 <vQueueDelete>
            hSemaphore = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	e010      	b.n	80046ba <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fd46 	bl	8005138 <xQueueCreateCountingSemaphoreStatic>
 80046ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80046ae:	e004      	b.n	80046ba <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fd7d 	bl	80051b2 <xQueueCreateCountingSemaphore>
 80046b8:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <osSemaphoreNew+0x11e>
          name = attr->name;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e001      	b.n	80046d2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80046d2:	69f9      	ldr	r1, [r7, #28]
 80046d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046d6:	f001 fbc1 	bl	8005e5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	@ 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20003258 	.word	0x20003258

080046e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004700:	f06f 0303 	mvn.w	r3, #3
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e04b      	b.n	80047a0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004708:	f3ef 8305 	mrs	r3, IPSR
 800470c:	617b      	str	r3, [r7, #20]
  return(result);
 800470e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10f      	bne.n	8004734 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	613b      	str	r3, [r7, #16]
  return(result);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004720:	f3ef 8311 	mrs	r3, BASEPRI
 8004724:	60fb      	str	r3, [r7, #12]
  return(result);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d026      	beq.n	800477a <osSemaphoreAcquire+0x92>
 800472c:	4b1f      	ldr	r3, [pc, #124]	@ (80047ac <osSemaphoreAcquire+0xc4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d122      	bne.n	800477a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800473a:	f06f 0303 	mvn.w	r3, #3
 800473e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004740:	e02d      	b.n	800479e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	461a      	mov	r2, r3
 800474c:	2100      	movs	r1, #0
 800474e:	69b8      	ldr	r0, [r7, #24]
 8004750:	f001 f9ae 	bl	8005ab0 <xQueueReceiveFromISR>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d003      	beq.n	8004762 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800475a:	f06f 0302 	mvn.w	r3, #2
 800475e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004760:	e01d      	b.n	800479e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01a      	beq.n	800479e <osSemaphoreAcquire+0xb6>
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <osSemaphoreAcquire+0xc8>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004778:	e011      	b.n	800479e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	69b8      	ldr	r0, [r7, #24]
 800477e:	f001 f87f 	bl	8005880 <xQueueSemaphoreTake>
 8004782:	4603      	mov	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00b      	beq.n	80047a0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800478e:	f06f 0301 	mvn.w	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e004      	b.n	80047a0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004796:	f06f 0302 	mvn.w	r3, #2
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e000      	b.n	80047a0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800479e:	bf00      	nop
      }
    }
  }

  return (stat);
 80047a0:	69fb      	ldr	r3, [r7, #28]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20003258 	.word	0x20003258
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80047ca:	f06f 0303 	mvn.w	r3, #3
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e03e      	b.n	8004850 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d2:	f3ef 8305 	mrs	r3, IPSR
 80047d6:	617b      	str	r3, [r7, #20]
  return(result);
 80047d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047de:	f3ef 8310 	mrs	r3, PRIMASK
 80047e2:	613b      	str	r3, [r7, #16]
  return(result);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ea:	f3ef 8311 	mrs	r3, BASEPRI
 80047ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01e      	beq.n	8004834 <osSemaphoreRelease+0x80>
 80047f6:	4b19      	ldr	r3, [pc, #100]	@ (800485c <osSemaphoreRelease+0xa8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d11a      	bne.n	8004834 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4619      	mov	r1, r3
 8004808:	69b8      	ldr	r0, [r7, #24]
 800480a:	f000 feb8 	bl	800557e <xQueueGiveFromISR>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d003      	beq.n	800481c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004814:	f06f 0302 	mvn.w	r3, #2
 8004818:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800481a:	e018      	b.n	800484e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <osSemaphoreRelease+0x9a>
 8004822:	4b0f      	ldr	r3, [pc, #60]	@ (8004860 <osSemaphoreRelease+0xac>)
 8004824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004832:	e00c      	b.n	800484e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004834:	2300      	movs	r3, #0
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	69b8      	ldr	r0, [r7, #24]
 800483c:	f000 fcf2 	bl	8005224 <xQueueGenericSend>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d004      	beq.n	8004850 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004846:	f06f 0302 	mvn.w	r3, #2
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e000      	b.n	8004850 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800484e:	bf00      	nop
    }
  }

  return (stat);
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20003258 	.word	0x20003258
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	@ 0x30
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004874:	f3ef 8305 	mrs	r3, IPSR
 8004878:	61bb      	str	r3, [r7, #24]
  return(result);
 800487a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800487c:	2b00      	cmp	r3, #0
 800487e:	d16f      	bne.n	8004960 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004880:	f3ef 8310 	mrs	r3, PRIMASK
 8004884:	617b      	str	r3, [r7, #20]
  return(result);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800488c:	f3ef 8311 	mrs	r3, BASEPRI
 8004890:	613b      	str	r3, [r7, #16]
  return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <osMessageQueueNew+0x3c>
 8004898:	4b34      	ldr	r3, [pc, #208]	@ (800496c <osMessageQueueNew+0x108>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d05f      	beq.n	8004960 <osMessageQueueNew+0xfc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d05c      	beq.n	8004960 <osMessageQueueNew+0xfc>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d059      	beq.n	8004960 <osMessageQueueNew+0xfc>
    mem = -1;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d029      	beq.n	800490c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d012      	beq.n	80048e6 <osMessageQueueNew+0x82>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80048c6:	d90e      	bls.n	80048e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <osMessageQueueNew+0x82>
        mem = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	e014      	b.n	8004910 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d110      	bne.n	8004910 <osMessageQueueNew+0xac>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d108      	bne.n	8004910 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <osMessageQueueNew+0xac>
          mem = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	e001      	b.n	8004910 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10b      	bne.n	800492e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2100      	movs	r1, #0
 8004920:	9100      	str	r1, [sp, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fa5d 	bl	8004de4 <xQueueGenericCreateStatic>
 800492a:	6278      	str	r0, [r7, #36]	@ 0x24
 800492c:	e008      	b.n	8004940 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004934:	2200      	movs	r2, #0
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fada 	bl	8004ef2 <xQueueGenericCreate>
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <osMessageQueueNew+0xf0>
        name = attr->name;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e001      	b.n	8004958 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800495c:	f001 fa7e 	bl	8005e5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004962:	4618      	mov	r0, r3
 8004964:	3728      	adds	r7, #40	@ 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20003258 	.word	0x20003258

08004970 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	@ 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004988:	f3ef 8305 	mrs	r3, IPSR
 800498c:	61fb      	str	r3, [r7, #28]
  return(result);
 800498e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10f      	bne.n	80049b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004994:	f3ef 8310 	mrs	r3, PRIMASK
 8004998:	61bb      	str	r3, [r7, #24]
  return(result);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049a0:	f3ef 8311 	mrs	r3, BASEPRI
 80049a4:	617b      	str	r3, [r7, #20]
  return(result);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02c      	beq.n	8004a06 <osMessageQueuePut+0x96>
 80049ac:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <osMessageQueuePut+0xe0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d128      	bne.n	8004a06 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <osMessageQueuePut+0x56>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <osMessageQueuePut+0x56>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80049c6:	f06f 0303 	mvn.w	r3, #3
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049cc:	e039      	b.n	8004a42 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80049d2:	f107 0210 	add.w	r2, r7, #16
 80049d6:	2300      	movs	r3, #0
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	6a38      	ldr	r0, [r7, #32]
 80049dc:	f000 fd2c 	bl	8005438 <xQueueGenericSendFromISR>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d003      	beq.n	80049ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80049e6:	f06f 0302 	mvn.w	r3, #2
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049ec:	e029      	b.n	8004a42 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d026      	beq.n	8004a42 <osMessageQueuePut+0xd2>
 80049f4:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <osMessageQueuePut+0xe4>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a04:	e01d      	b.n	8004a42 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <osMessageQueuePut+0xa2>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004a12:	f06f 0303 	mvn.w	r3, #3
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a18:	e014      	b.n	8004a44 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	6a38      	ldr	r0, [r7, #32]
 8004a22:	f000 fbff 	bl	8005224 <xQueueGenericSend>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d00b      	beq.n	8004a44 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004a32:	f06f 0301 	mvn.w	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	e004      	b.n	8004a44 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004a3a:	f06f 0302 	mvn.w	r3, #2
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	e000      	b.n	8004a44 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a42:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3728      	adds	r7, #40	@ 0x28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20003258 	.word	0x20003258
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a6e:	f3ef 8305 	mrs	r3, IPSR
 8004a72:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a74:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a86:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02c      	beq.n	8004aec <osMessageQueueGet+0x94>
 8004a92:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <osMessageQueueGet+0xdc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d128      	bne.n	8004aec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <osMessageQueueGet+0x54>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <osMessageQueueGet+0x54>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004aac:	f06f 0303 	mvn.w	r3, #3
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ab2:	e038      	b.n	8004b26 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ab8:	f107 0310 	add.w	r3, r7, #16
 8004abc:	461a      	mov	r2, r3
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	6a38      	ldr	r0, [r7, #32]
 8004ac2:	f000 fff5 	bl	8005ab0 <xQueueReceiveFromISR>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d003      	beq.n	8004ad4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004acc:	f06f 0302 	mvn.w	r3, #2
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ad2:	e028      	b.n	8004b26 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d025      	beq.n	8004b26 <osMessageQueueGet+0xce>
 8004ada:	4b17      	ldr	r3, [pc, #92]	@ (8004b38 <osMessageQueueGet+0xe0>)
 8004adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aea:	e01c      	b.n	8004b26 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <osMessageQueueGet+0xa0>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004af8:	f06f 0303 	mvn.w	r3, #3
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afe:	e013      	b.n	8004b28 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	6a38      	ldr	r0, [r7, #32]
 8004b06:	f000 fdd3 	bl	80056b0 <xQueueReceive>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d00b      	beq.n	8004b28 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004b16:	f06f 0301 	mvn.w	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	e004      	b.n	8004b28 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004b1e:	f06f 0302 	mvn.w	r3, #2
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b24:	e000      	b.n	8004b28 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3728      	adds	r7, #40	@ 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20003258 	.word	0x20003258
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	@ (8004b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4a06      	ldr	r2, [pc, #24]	@ (8004b6c <vApplicationGetIdleTaskMemory+0x30>)
 8004b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000325c 	.word	0x2000325c
 8004b6c:	200032b8 	.word	0x200032b8

08004b70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a06      	ldr	r2, [pc, #24]	@ (8004ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8004b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	200034b8 	.word	0x200034b8
 8004ba0:	20003514 	.word	0x20003514

08004ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f103 0208 	add.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f103 0208 	add.w	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f103 0208 	add.w	r2, r3, #8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d103      	bne.n	8004c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e00c      	b.n	8004c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e002      	b.n	8004c74 <vListInsert+0x2e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d2f6      	bcs.n	8004c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6852      	ldr	r2, [r2, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d103      	bne.n	8004cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	b672      	cpsid	i
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	b662      	cpsie	i
 8004d34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d3c:	f002 fde6 	bl	800790c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	441a      	add	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	22ff      	movs	r2, #255	@ 0xff
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d114      	bne.n	8004dbc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01a      	beq.n	8004dd0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fd78 	bl	8006894 <xTaskRemoveFromEventList>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <xQueueGenericReset+0xd4>)
 8004dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	e009      	b.n	8004dd0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff feef 	bl	8004ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3324      	adds	r3, #36	@ 0x24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff feea 	bl	8004ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dd0:	f002 fdd2 	bl	8007978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dd4:	2301      	movs	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	@ 0x38
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfc:	b672      	cpsid	i
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	b662      	cpsie	i
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	b672      	cpsid	i
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	b662      	cpsie	i
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	e7fd      	b.n	8004e32 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <xQueueGenericCreateStatic+0x5e>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <xQueueGenericCreateStatic+0x62>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <xQueueGenericCreateStatic+0x64>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	b672      	cpsid	i
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	b662      	cpsie	i
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <xQueueGenericCreateStatic+0x90>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <xQueueGenericCreateStatic+0x94>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <xQueueGenericCreateStatic+0x96>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	b672      	cpsid	i
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	b662      	cpsie	i
 8004e92:	61fb      	str	r3, [r7, #28]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e9a:	2350      	movs	r3, #80	@ 0x50
 8004e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b50      	cmp	r3, #80	@ 0x50
 8004ea2:	d00d      	beq.n	8004ec0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	b672      	cpsid	i
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	b662      	cpsie	i
 8004eb8:	61bb      	str	r3, [r7, #24]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ec0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ed4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f848 	bl	8004f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3730      	adds	r7, #48	@ 0x30
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b08a      	sub	sp, #40	@ 0x28
 8004ef6:	af02      	add	r7, sp, #8
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <xQueueGenericCreate+0x30>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	b672      	cpsid	i
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	b662      	cpsie	i
 8004f1a:	613b      	str	r3, [r7, #16]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e004      	b.n	8004f38 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3350      	adds	r3, #80	@ 0x50
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f002 fe13 	bl	8007b68 <pvPortMalloc>
 8004f42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3350      	adds	r3, #80	@ 0x50
 8004f52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f5c:	79fa      	ldrb	r2, [r7, #7]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f805 	bl	8004f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e002      	b.n	8004f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	69b8      	ldr	r0, [r7, #24]
 8004faa:	f7ff feaf 	bl	8004d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f91d 	bl	8005224 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	461a      	mov	r2, r3
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	6978      	ldr	r0, [r7, #20]
 800500c:	f7ff ff71 	bl	8004ef2 <xQueueGenericCreate>
 8005010:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ffd3 	bl	8004fbe <prvInitialiseMutex>

		return xNewQueue;
 8005018:	68fb      	ldr	r3, [r7, #12]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af02      	add	r7, sp, #8
 8005028:	4603      	mov	r3, r0
 800502a:	6039      	str	r1, [r7, #0]
 800502c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800502e:	2301      	movs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	6939      	ldr	r1, [r7, #16]
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f7ff fecf 	bl	8004de4 <xQueueGenericCreateStatic>
 8005046:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ffb8 	bl	8004fbe <prvInitialiseMutex>

		return xNewQueue;
 800504e:	68fb      	ldr	r3, [r7, #12]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10d      	bne.n	8005086 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	b672      	cpsid	i
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	b662      	cpsie	i
 800507e:	60fb      	str	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	689c      	ldr	r4, [r3, #8]
 800508a:	f001 fdcb 	bl	8006c24 <xTaskGetCurrentTaskHandle>
 800508e:	4603      	mov	r3, r0
 8005090:	429c      	cmp	r4, r3
 8005092:	d111      	bne.n	80050b8 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80050a6:	2300      	movs	r3, #0
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	6938      	ldr	r0, [r7, #16]
 80050ae:	f000 f8b9 	bl	8005224 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e001      	b.n	80050bc <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
	}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80050c6:	b590      	push	{r4, r7, lr}
 80050c8:	b087      	sub	sp, #28
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	b672      	cpsid	i
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	b662      	cpsie	i
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	689c      	ldr	r4, [r3, #8]
 80050fa:	f001 fd93 	bl	8006c24 <xTaskGetCurrentTaskHandle>
 80050fe:	4603      	mov	r3, r0
 8005100:	429c      	cmp	r4, r3
 8005102:	d107      	bne.n	8005114 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e00c      	b.n	800512e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6938      	ldr	r0, [r7, #16]
 8005118:	f000 fbb2 	bl	8005880 <xQueueSemaphoreTake>
 800511c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800512e:	697b      	ldr	r3, [r7, #20]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd90      	pop	{r4, r7, pc}

08005138 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	@ 0x28
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514e:	b672      	cpsid	i
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	b662      	cpsie	i
 800515e:	61bb      	str	r3, [r7, #24]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	429a      	cmp	r2, r3
 800516c:	d90d      	bls.n	800518a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	b672      	cpsid	i
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	b662      	cpsie	i
 8005182:	617b      	str	r3, [r7, #20]
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800518a:	2302      	movs	r3, #2
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	2100      	movs	r1, #0
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff fe25 	bl	8004de4 <xQueueGenericCreateStatic>
 800519a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051a8:	69fb      	ldr	r3, [r7, #28]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	b672      	cpsid	i
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	b662      	cpsie	i
 80051d6:	613b      	str	r3, [r7, #16]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d90d      	bls.n	8005202 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	b672      	cpsid	i
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	b662      	cpsie	i
 80051fa:	60fb      	str	r3, [r7, #12]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005202:	2202      	movs	r2, #2
 8005204:	2100      	movs	r1, #0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe73 	bl	8004ef2 <xQueueGenericCreate>
 800520c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800521a:	697b      	ldr	r3, [r7, #20]
	}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08e      	sub	sp, #56	@ 0x38
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005232:	2300      	movs	r3, #0
 8005234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <xQueueGenericSend+0x38>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	b672      	cpsid	i
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	b662      	cpsie	i
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <xQueueGenericSend+0x46>
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <xQueueGenericSend+0x4a>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <xQueueGenericSend+0x4c>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10d      	bne.n	8005290 <xQueueGenericSend+0x6c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	b672      	cpsid	i
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	b662      	cpsie	i
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d103      	bne.n	800529e <xQueueGenericSend+0x7a>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <xQueueGenericSend+0x7e>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericSend+0x80>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <xQueueGenericSend+0xa0>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	b672      	cpsid	i
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	b662      	cpsie	i
 80052bc:	623b      	str	r3, [r7, #32]
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c4:	f001 fcbe 	bl	8006c44 <xTaskGetSchedulerState>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <xQueueGenericSend+0xb0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGenericSend+0xb4>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGenericSend+0xb6>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <xQueueGenericSend+0xd6>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	b672      	cpsid	i
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	b662      	cpsie	i
 80052f2:	61fb      	str	r3, [r7, #28]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052fa:	f002 fb07 	bl	800790c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <xQueueGenericSend+0xec>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d129      	bne.n	8005364 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005316:	f000 fc91 	bl	8005c3c <prvCopyDataToQueue>
 800531a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	3324      	adds	r3, #36	@ 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fab3 	bl	8006894 <xTaskRemoveFromEventList>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005334:	4b3f      	ldr	r3, [pc, #252]	@ (8005434 <xQueueGenericSend+0x210>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	e00a      	b.n	800535c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800534c:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <xQueueGenericSend+0x210>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800535c:	f002 fb0c 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 8005360:	2301      	movs	r3, #1
 8005362:	e063      	b.n	800542c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800536a:	f002 fb05 	bl	8007978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800536e:	2300      	movs	r3, #0
 8005370:	e05c      	b.n	800542c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	4618      	mov	r0, r3
 800537e:	f001 faef 	bl	8006960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005382:	2301      	movs	r3, #1
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005386:	f002 faf7 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800538a:	f001 f841 	bl	8006410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800538e:	f002 fabd 	bl	800790c <vPortEnterCritical>
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005398:	b25b      	sxtb	r3, r3
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d103      	bne.n	80053a8 <xQueueGenericSend+0x184>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ae:	b25b      	sxtb	r3, r3
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d103      	bne.n	80053be <xQueueGenericSend+0x19a>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053be:	f002 fadb 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053c2:	1d3a      	adds	r2, r7, #4
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 fade 	bl	800698c <xTaskCheckForTimeOut>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d124      	bne.n	8005420 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053d8:	f000 fd28 	bl	8005e2c <prvIsQueueFull>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d018      	beq.n	8005414 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	3310      	adds	r3, #16
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f9fc 	bl	80067e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053f2:	f000 fcb3 	bl	8005d5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053f6:	f001 f819 	bl	800642c <xTaskResumeAll>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f af7c 	bne.w	80052fa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005402:	4b0c      	ldr	r3, [pc, #48]	@ (8005434 <xQueueGenericSend+0x210>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	e772      	b.n	80052fa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005416:	f000 fca1 	bl	8005d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800541a:	f001 f807 	bl	800642c <xTaskResumeAll>
 800541e:	e76c      	b.n	80052fa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005422:	f000 fc9b 	bl	8005d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005426:	f001 f801 	bl	800642c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800542a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800542c:	4618      	mov	r0, r3
 800542e:	3738      	adds	r7, #56	@ 0x38
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000ed04 	.word	0xe000ed04

08005438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	@ 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10d      	bne.n	800546c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	b672      	cpsid	i
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	b662      	cpsie	i
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <xQueueGenericSendFromISR+0x42>
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <xQueueGenericSendFromISR+0x46>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericSendFromISR+0x48>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10d      	bne.n	80054a0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	623b      	str	r3, [r7, #32]
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSendFromISR+0x76>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericSendFromISR+0x7a>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericSendFromISR+0x7c>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	b672      	cpsid	i
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	b662      	cpsie	i
 80054cc:	61fb      	str	r3, [r7, #28]
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054d4:	f002 fb02 	bl	8007adc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054d8:	f3ef 8211 	mrs	r2, BASEPRI
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <xQueueGenericSendFromISR+0xd2>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d12c      	bne.n	8005564 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800551a:	f000 fb8f 	bl	8005c3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800551e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d112      	bne.n	800554e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d016      	beq.n	800555e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	3324      	adds	r3, #36	@ 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f001 f9ad 	bl	8006894 <xTaskRemoveFromEventList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e007      	b.n	800555e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800554e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005552:	3301      	adds	r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	b25a      	sxtb	r2, r3
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800555e:	2301      	movs	r3, #1
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005562:	e001      	b.n	8005568 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005564:	2300      	movs	r3, #0
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005576:	4618      	mov	r0, r3
 8005578:	3738      	adds	r7, #56	@ 0x38
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b08e      	sub	sp, #56	@ 0x38
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <xQueueGiveFromISR+0x30>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	b672      	cpsid	i
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	b662      	cpsie	i
 80055a6:	623b      	str	r3, [r7, #32]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	b672      	cpsid	i
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	b662      	cpsie	i
 80055ca:	61fb      	str	r3, [r7, #28]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <xQueueGiveFromISR+0x64>
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueGiveFromISR+0x68>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGiveFromISR+0x6a>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	b672      	cpsid	i
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	b662      	cpsie	i
 8005600:	61bb      	str	r3, [r7, #24]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005608:	f002 fa68 	bl	8007adc <vPortValidateInterruptPriority>
	__asm volatile
 800560c:	f3ef 8211 	mrs	r2, BASEPRI
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	b672      	cpsid	i
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	b662      	cpsie	i
 8005624:	617a      	str	r2, [r7, #20]
 8005626:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005628:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005638:	429a      	cmp	r2, r3
 800563a:	d22b      	bcs.n	8005694 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800564e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d112      	bne.n	800567e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d016      	beq.n	800568e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	3324      	adds	r3, #36	@ 0x24
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f915 	bl	8006894 <xTaskRemoveFromEventList>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00e      	beq.n	800568e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e007      	b.n	800568e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800567e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005682:	3301      	adds	r3, #1
 8005684:	b2db      	uxtb	r3, r3
 8005686:	b25a      	sxtb	r2, r3
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800568e:	2301      	movs	r3, #1
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
 8005692:	e001      	b.n	8005698 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005694:	2300      	movs	r3, #0
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f383 8811 	msr	BASEPRI, r3
}
 80056a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3738      	adds	r7, #56	@ 0x38
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	@ 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <xQueueReceive+0x36>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	b672      	cpsid	i
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	b662      	cpsie	i
 80056de:	623b      	str	r3, [r7, #32]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <xQueueReceive+0x44>
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <xQueueReceive+0x48>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <xQueueReceive+0x4a>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <xQueueReceive+0x6a>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	b672      	cpsid	i
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	b662      	cpsie	i
 8005712:	61fb      	str	r3, [r7, #28]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571a:	f001 fa93 	bl	8006c44 <xTaskGetSchedulerState>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <xQueueReceive+0x7a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <xQueueReceive+0x7e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueReceive+0x80>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10d      	bne.n	8005750 <xQueueReceive+0xa0>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	b672      	cpsid	i
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	b662      	cpsie	i
 8005748:	61bb      	str	r3, [r7, #24]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005750:	f002 f8dc 	bl	800790c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01f      	beq.n	80057a0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005764:	f000 fad4 	bl	8005d10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00f      	beq.n	8005798 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	3310      	adds	r3, #16
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f889 	bl	8006894 <xTaskRemoveFromEventList>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005788:	4b3c      	ldr	r3, [pc, #240]	@ (800587c <xQueueReceive+0x1cc>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005798:	f002 f8ee 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 800579c:	2301      	movs	r3, #1
 800579e:	e069      	b.n	8005874 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a6:	f002 f8e7 	bl	8007978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e062      	b.n	8005874 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b4:	f107 0310 	add.w	r3, r7, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 f8d1 	bl	8006960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057c2:	f002 f8d9 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c6:	f000 fe23 	bl	8006410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ca:	f002 f89f 	bl	800790c <vPortEnterCritical>
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d103      	bne.n	80057e4 <xQueueReceive+0x134>
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d103      	bne.n	80057fa <xQueueReceive+0x14a>
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057fa:	f002 f8bd 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fe:	1d3a      	adds	r2, r7, #4
 8005800:	f107 0310 	add.w	r3, r7, #16
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f8c0 	bl	800698c <xTaskCheckForTimeOut>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d123      	bne.n	800585a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005814:	f000 faf4 	bl	8005e00 <prvIsQueueEmpty>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	3324      	adds	r3, #36	@ 0x24
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f000 ffde 	bl	80067e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800582c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800582e:	f000 fa95 	bl	8005d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005832:	f000 fdfb 	bl	800642c <xTaskResumeAll>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d189      	bne.n	8005750 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800583c:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <xQueueReceive+0x1cc>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	e780      	b.n	8005750 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800584e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005850:	f000 fa84 	bl	8005d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005854:	f000 fdea 	bl	800642c <xTaskResumeAll>
 8005858:	e77a      	b.n	8005750 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800585a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800585c:	f000 fa7e 	bl	8005d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005860:	f000 fde4 	bl	800642c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005866:	f000 facb 	bl	8005e00 <prvIsQueueEmpty>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f43f af6f 	beq.w	8005750 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005874:	4618      	mov	r0, r3
 8005876:	3730      	adds	r7, #48	@ 0x30
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	@ 0x38
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00d      	beq.n	80058dc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058dc:	f001 f9b2 	bl	8006c44 <xTaskGetSchedulerState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <xQueueSemaphoreTake+0x6c>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <xQueueSemaphoreTake+0x70>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <xQueueSemaphoreTake+0x72>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	b672      	cpsid	i
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	b662      	cpsie	i
 800590a:	61bb      	str	r3, [r7, #24]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005912:	f001 fffb 	bl	800790c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d024      	beq.n	800596c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005932:	f001 fb09 	bl	8006f48 <pvTaskIncrementMutexHeldCount>
 8005936:	4602      	mov	r2, r0
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00f      	beq.n	8005964 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005946:	3310      	adds	r3, #16
 8005948:	4618      	mov	r0, r3
 800594a:	f000 ffa3 	bl	8006894 <xTaskRemoveFromEventList>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005954:	4b55      	ldr	r3, [pc, #340]	@ (8005aac <xQueueSemaphoreTake+0x22c>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005964:	f002 f808 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 8005968:	2301      	movs	r3, #1
 800596a:	e09a      	b.n	8005aa2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d114      	bne.n	800599c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	b672      	cpsid	i
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	b662      	cpsie	i
 800598c:	617b      	str	r3, [r7, #20]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005994:	f001 fff0 	bl	8007978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005998:	2300      	movs	r3, #0
 800599a:	e082      	b.n	8005aa2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a2:	f107 030c 	add.w	r3, r7, #12
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 ffda 	bl	8006960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b0:	f001 ffe2 	bl	8007978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b4:	f000 fd2c 	bl	8006410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059b8:	f001 ffa8 	bl	800790c <vPortEnterCritical>
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d103      	bne.n	80059d2 <xQueueSemaphoreTake+0x152>
 80059ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d103      	bne.n	80059e8 <xQueueSemaphoreTake+0x168>
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059e8:	f001 ffc6 	bl	8007978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ec:	463a      	mov	r2, r7
 80059ee:	f107 030c 	add.w	r3, r7, #12
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 ffc9 	bl	800698c <xTaskCheckForTimeOut>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d132      	bne.n	8005a66 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a02:	f000 f9fd 	bl	8005e00 <prvIsQueueEmpty>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d026      	beq.n	8005a5a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005a14:	f001 ff7a 	bl	800790c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f92f 	bl	8006c80 <xTaskPriorityInherit>
 8005a22:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005a24:	f001 ffa8 	bl	8007978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	3324      	adds	r3, #36	@ 0x24
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fed9 	bl	80067e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a38:	f000 f990 	bl	8005d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a3c:	f000 fcf6 	bl	800642c <xTaskResumeAll>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f47f af65 	bne.w	8005912 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005a48:	4b18      	ldr	r3, [pc, #96]	@ (8005aac <xQueueSemaphoreTake+0x22c>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	e75b      	b.n	8005912 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a5c:	f000 f97e 	bl	8005d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a60:	f000 fce4 	bl	800642c <xTaskResumeAll>
 8005a64:	e755      	b.n	8005912 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a68:	f000 f978 	bl	8005d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a6c:	f000 fcde 	bl	800642c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a72:	f000 f9c5 	bl	8005e00 <prvIsQueueEmpty>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f43f af4a 	beq.w	8005912 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005a84:	f001 ff42 	bl	800790c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a8a:	f000 f8bf 	bl	8005c0c <prvGetDisinheritPriorityAfterTimeout>
 8005a8e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f9ce 	bl	8006e38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a9c:	f001 ff6c 	bl	8007978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3738      	adds	r7, #56	@ 0x38
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	@ 0x38
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	b672      	cpsid	i
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	b662      	cpsie	i
 8005ada:	623b      	str	r3, [r7, #32]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <xQueueReceiveFromISR+0x40>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <xQueueReceiveFromISR+0x44>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <xQueueReceiveFromISR+0x46>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	b672      	cpsid	i
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	b662      	cpsie	i
 8005b0e:	61fb      	str	r3, [r7, #28]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b16:	f001 ffe1 	bl	8007adc <vPortValidateInterruptPriority>
	__asm volatile
 8005b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	b672      	cpsid	i
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	b662      	cpsie	i
 8005b32:	61ba      	str	r2, [r7, #24]
 8005b34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02f      	beq.n	8005ba6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b54:	f000 f8dc 	bl	8005d10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d112      	bne.n	8005b90 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	3310      	adds	r3, #16
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fe8c 	bl	8006894 <xTaskRemoveFromEventList>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e007      	b.n	8005ba0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b94:	3301      	adds	r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	b25a      	sxtb	r2, r3
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba4:	e001      	b.n	8005baa <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f383 8811 	msr	BASEPRI, r3
}
 8005bb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3738      	adds	r7, #56	@ 0x38
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10d      	bne.n	8005bee <vQueueDelete+0x2e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	b672      	cpsid	i
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	b662      	cpsie	i
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f95e 	bl	8005eb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f002 f880 	bl	8007d04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e001      	b.n	8005c2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10d      	bne.n	8005c76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d14d      	bne.n	8005cfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 f872 	bl	8006d50 <xTaskPriorityDisinherit>
 8005c6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	e043      	b.n	8005cfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d119      	bne.n	8005cb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6858      	ldr	r0, [r3, #4]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	461a      	mov	r2, r3
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	f00c fb6f 	bl	801236a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d32b      	bcc.n	8005cfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	e026      	b.n	8005cfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68d8      	ldr	r0, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	f00c fb55 	bl	801236a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	425b      	negs	r3, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d207      	bcs.n	8005cec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d105      	bne.n	8005cfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d06:	697b      	ldr	r3, [r7, #20]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	441a      	add	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d303      	bcc.n	8005d44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68d9      	ldr	r1, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6838      	ldr	r0, [r7, #0]
 8005d50:	f00c fb0b 	bl	801236a <memcpy>
	}
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d64:	f001 fdd2 	bl	800790c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d70:	e011      	b.n	8005d96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d012      	beq.n	8005da0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3324      	adds	r3, #36	@ 0x24
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fd88 	bl	8006894 <xTaskRemoveFromEventList>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d8a:	f000 fe67 	bl	8006a5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dce9      	bgt.n	8005d72 <prvUnlockQueue+0x16>
 8005d9e:	e000      	b.n	8005da2 <prvUnlockQueue+0x46>
					break;
 8005da0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	22ff      	movs	r2, #255	@ 0xff
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005daa:	f001 fde5 	bl	8007978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dae:	f001 fdad 	bl	800790c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005db8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dba:	e011      	b.n	8005de0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d012      	beq.n	8005dea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fd63 	bl	8006894 <xTaskRemoveFromEventList>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dd4:	f000 fe42 	bl	8006a5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dd8:	7bbb      	ldrb	r3, [r7, #14]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dce9      	bgt.n	8005dbc <prvUnlockQueue+0x60>
 8005de8:	e000      	b.n	8005dec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	22ff      	movs	r2, #255	@ 0xff
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005df4:	f001 fdc0 	bl	8007978 <vPortExitCritical>
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e08:	f001 fd80 	bl	800790c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1e:	f001 fdab 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e34:	f001 fd6a 	bl	800790c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d102      	bne.n	8005e4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e001      	b.n	8005e4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e4e:	f001 fd93 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8005e52:	68fb      	ldr	r3, [r7, #12]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e014      	b.n	8005e96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005eac <vQueueAddToRegistry+0x50>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e78:	490c      	ldr	r1, [pc, #48]	@ (8005eac <vQueueAddToRegistry+0x50>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e82:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <vQueueAddToRegistry+0x50>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e8e:	e006      	b.n	8005e9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	d9e7      	bls.n	8005e6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20003914 	.word	0x20003914

08005eb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e016      	b.n	8005eec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ebe:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <vQueueUnregisterQueue+0x50>)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d10b      	bne.n	8005ee6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005ece:	4a0c      	ldr	r2, [pc, #48]	@ (8005f00 <vQueueUnregisterQueue+0x50>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ed8:	4a09      	ldr	r2, [pc, #36]	@ (8005f00 <vQueueUnregisterQueue+0x50>)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4413      	add	r3, r2
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
				break;
 8005ee4:	e006      	b.n	8005ef4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b07      	cmp	r3, #7
 8005ef0:	d9e5      	bls.n	8005ebe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20003914 	.word	0x20003914

08005f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f14:	f001 fcfa 	bl	800790c <vPortEnterCritical>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d103      	bne.n	8005f2e <vQueueWaitForMessageRestricted+0x2a>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d103      	bne.n	8005f44 <vQueueWaitForMessageRestricted+0x40>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f44:	f001 fd18 	bl	8007978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3324      	adds	r3, #36	@ 0x24
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fc6d 	bl	8006838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f5e:	6978      	ldr	r0, [r7, #20]
 8005f60:	f7ff fefc 	bl	8005d5c <prvUnlockQueue>
	}
 8005f64:	bf00      	nop
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	@ 0x38
 8005f70:	af04      	add	r7, sp, #16
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <xTaskCreateStatic+0x30>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	b672      	cpsid	i
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	b662      	cpsie	i
 8005f94:	623b      	str	r3, [r7, #32]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <xTaskCreateStatic+0x52>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	b672      	cpsid	i
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	b662      	cpsie	i
 8005fb6:	61fb      	str	r3, [r7, #28]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fbe:	235c      	movs	r3, #92	@ 0x5c
 8005fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fc6:	d00d      	beq.n	8005fe4 <xTaskCreateStatic+0x78>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	b672      	cpsid	i
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	b662      	cpsie	i
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fe4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <xTaskCreateStatic+0xbe>
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01b      	beq.n	800602a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006004:	2300      	movs	r3, #0
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	9302      	str	r3, [sp, #8]
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f850 	bl	80060c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006024:	f000 f8e0 	bl	80061e8 <prvAddNewTaskToReadyList>
 8006028:	e001      	b.n	800602e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800602e:	697b      	ldr	r3, [r7, #20]
	}
 8006030:	4618      	mov	r0, r3
 8006032:	3728      	adds	r7, #40	@ 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08c      	sub	sp, #48	@ 0x30
 800603c:	af04      	add	r7, sp, #16
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f001 fd8b 	bl	8007b68 <pvPortMalloc>
 8006052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800605a:	205c      	movs	r0, #92	@ 0x5c
 800605c:	f001 fd84 	bl	8007b68 <pvPortMalloc>
 8006060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	631a      	str	r2, [r3, #48]	@ 0x30
 800606e:	e005      	b.n	800607c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006070:	6978      	ldr	r0, [r7, #20]
 8006072:	f001 fe47 	bl	8007d04 <vPortFree>
 8006076:	e001      	b.n	800607c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d017      	beq.n	80060b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	2300      	movs	r3, #0
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	9302      	str	r3, [sp, #8]
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f80e 	bl	80060c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060a6:	69f8      	ldr	r0, [r7, #28]
 80060a8:	f000 f89e 	bl	80061e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060ac:	2301      	movs	r3, #1
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e002      	b.n	80060b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060b8:	69bb      	ldr	r3, [r7, #24]
	}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	461a      	mov	r2, r3
 80060da:	21a5      	movs	r1, #165	@ 0xa5
 80060dc:	f00c f8cf 	bl	801227e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80060ea:	440b      	add	r3, r1
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f023 0307 	bic.w	r3, r3, #7
 80060f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	b672      	cpsid	i
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	b662      	cpsie	i
 8006118:	617b      	str	r3, [r7, #20]
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01f      	beq.n	8006166 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	e012      	b.n	8006152 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	7819      	ldrb	r1, [r3, #0]
 8006134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	3334      	adds	r3, #52	@ 0x34
 800613c:	460a      	mov	r2, r1
 800613e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d006      	beq.n	800615a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d9e9      	bls.n	800612c <prvInitialiseNewTask+0x6a>
 8006158:	e000      	b.n	800615c <prvInitialiseNewTask+0x9a>
			{
				break;
 800615a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006164:	e003      	b.n	800616e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	2b37      	cmp	r3, #55	@ 0x37
 8006172:	d901      	bls.n	8006178 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006174:	2337      	movs	r3, #55	@ 0x37
 8006176:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006182:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2200      	movs	r2, #0
 8006188:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fd28 	bl	8004be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	3318      	adds	r3, #24
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fd23 	bl	8004be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	2200      	movs	r2, #0
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	69b8      	ldr	r0, [r7, #24]
 80061c8:	f001 fa8e 	bl	80076e8 <pxPortInitialiseStack>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061de:	bf00      	nop
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061f0:	f001 fb8c 	bl	800790c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061f4:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <prvAddNewTaskToReadyList+0xc4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <prvAddNewTaskToReadyList+0xc4>)
 80061fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061fe:	4b2c      	ldr	r3, [pc, #176]	@ (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800620c:	4b27      	ldr	r3, [pc, #156]	@ (80062ac <prvAddNewTaskToReadyList+0xc4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d110      	bne.n	8006236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006214:	f000 fc46 	bl	8006aa4 <prvInitialiseTaskLists>
 8006218:	e00d      	b.n	8006236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800621a:	4b26      	ldr	r3, [pc, #152]	@ (80062b4 <prvAddNewTaskToReadyList+0xcc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006222:	4b23      	ldr	r3, [pc, #140]	@ (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d802      	bhi.n	8006236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006230:	4a1f      	ldr	r2, [pc, #124]	@ (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006236:	4b20      	ldr	r3, [pc, #128]	@ (80062b8 <prvAddNewTaskToReadyList+0xd0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <prvAddNewTaskToReadyList+0xd0>)
 800623e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006240:	4b1d      	ldr	r3, [pc, #116]	@ (80062b8 <prvAddNewTaskToReadyList+0xd0>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <prvAddNewTaskToReadyList+0xd4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <prvAddNewTaskToReadyList+0x74>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	4a18      	ldr	r2, [pc, #96]	@ (80062bc <prvAddNewTaskToReadyList+0xd4>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a15      	ldr	r2, [pc, #84]	@ (80062c0 <prvAddNewTaskToReadyList+0xd8>)
 800626a:	441a      	add	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fcc3 	bl	8004bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006278:	f001 fb7e 	bl	8007978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800627c:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <prvAddNewTaskToReadyList+0xcc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006284:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <prvAddNewTaskToReadyList+0xc8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	429a      	cmp	r2, r3
 8006290:	d207      	bcs.n	80062a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006292:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <prvAddNewTaskToReadyList+0xdc>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20003e28 	.word	0x20003e28
 80062b0:	20003954 	.word	0x20003954
 80062b4:	20003e34 	.word	0x20003e34
 80062b8:	20003e44 	.word	0x20003e44
 80062bc:	20003e30 	.word	0x20003e30
 80062c0:	20003958 	.word	0x20003958
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01a      	beq.n	8006310 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062da:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <vTaskDelay+0x68>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00d      	beq.n	80062fe <vTaskDelay+0x36>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	b672      	cpsid	i
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	b662      	cpsie	i
 80062f6:	60bb      	str	r3, [r7, #8]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80062fe:	f000 f887 	bl	8006410 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006302:	2100      	movs	r1, #0
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fe33 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800630a:	f000 f88f 	bl	800642c <xTaskResumeAll>
 800630e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <vTaskDelay+0x6c>)
 8006318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20003e50 	.word	0x20003e50
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006346:	463a      	mov	r2, r7
 8006348:	1d39      	adds	r1, r7, #4
 800634a:	f107 0308 	add.w	r3, r7, #8
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fbf4 	bl	8004b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	9202      	str	r2, [sp, #8]
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	2300      	movs	r3, #0
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	460a      	mov	r2, r1
 8006366:	4924      	ldr	r1, [pc, #144]	@ (80063f8 <vTaskStartScheduler+0xc0>)
 8006368:	4824      	ldr	r0, [pc, #144]	@ (80063fc <vTaskStartScheduler+0xc4>)
 800636a:	f7ff fdff 	bl	8005f6c <xTaskCreateStatic>
 800636e:	4603      	mov	r3, r0
 8006370:	4a23      	ldr	r2, [pc, #140]	@ (8006400 <vTaskStartScheduler+0xc8>)
 8006372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006374:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <vTaskStartScheduler+0xc8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e001      	b.n	8006386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d102      	bne.n	8006392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800638c:	f000 fe44 	bl	8007018 <xTimerCreateTimerTask>
 8006390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d118      	bne.n	80063ca <vTaskStartScheduler+0x92>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	b672      	cpsid	i
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	b662      	cpsie	i
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063b0:	4b14      	ldr	r3, [pc, #80]	@ (8006404 <vTaskStartScheduler+0xcc>)
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063b8:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <vTaskStartScheduler+0xd0>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063be:	4b13      	ldr	r3, [pc, #76]	@ (800640c <vTaskStartScheduler+0xd4>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063c4:	f001 fa24 	bl	8007810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063c8:	e011      	b.n	80063ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d10d      	bne.n	80063ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	b672      	cpsid	i
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	b662      	cpsie	i
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vTaskStartScheduler+0xb2>
}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	0801305c 	.word	0x0801305c
 80063fc:	08006a75 	.word	0x08006a75
 8006400:	20003e4c 	.word	0x20003e4c
 8006404:	20003e48 	.word	0x20003e48
 8006408:	20003e34 	.word	0x20003e34
 800640c:	20003e2c 	.word	0x20003e2c

08006410 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006414:	4b04      	ldr	r3, [pc, #16]	@ (8006428 <vTaskSuspendAll+0x18>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a03      	ldr	r2, [pc, #12]	@ (8006428 <vTaskSuspendAll+0x18>)
 800641c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800641e:	bf00      	nop
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20003e50 	.word	0x20003e50

0800642c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800643a:	4b43      	ldr	r3, [pc, #268]	@ (8006548 <xTaskResumeAll+0x11c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <xTaskResumeAll+0x32>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	b672      	cpsid	i
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	b662      	cpsie	i
 8006456:	603b      	str	r3, [r7, #0]
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	e7fd      	b.n	800645a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800645e:	f001 fa55 	bl	800790c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006462:	4b39      	ldr	r3, [pc, #228]	@ (8006548 <xTaskResumeAll+0x11c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3b01      	subs	r3, #1
 8006468:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <xTaskResumeAll+0x11c>)
 800646a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646c:	4b36      	ldr	r3, [pc, #216]	@ (8006548 <xTaskResumeAll+0x11c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d162      	bne.n	800653a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006474:	4b35      	ldr	r3, [pc, #212]	@ (800654c <xTaskResumeAll+0x120>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d05e      	beq.n	800653a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800647c:	e02f      	b.n	80064de <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647e:	4b34      	ldr	r3, [pc, #208]	@ (8006550 <xTaskResumeAll+0x124>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3318      	adds	r3, #24
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fc14 	bl	8004cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3304      	adds	r3, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fc0f 	bl	8004cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649e:	4b2d      	ldr	r3, [pc, #180]	@ (8006554 <xTaskResumeAll+0x128>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d903      	bls.n	80064ae <xTaskResumeAll+0x82>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006554 <xTaskResumeAll+0x128>)
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4a27      	ldr	r2, [pc, #156]	@ (8006558 <xTaskResumeAll+0x12c>)
 80064bc:	441a      	add	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe fb9a 	bl	8004bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ce:	4b23      	ldr	r3, [pc, #140]	@ (800655c <xTaskResumeAll+0x130>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80064d8:	4b21      	ldr	r3, [pc, #132]	@ (8006560 <xTaskResumeAll+0x134>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064de:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <xTaskResumeAll+0x124>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1cb      	bne.n	800647e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064ec:	f000 fb7a 	bl	8006be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006564 <xTaskResumeAll+0x138>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064fc:	f000 f858 	bl	80065b0 <xTaskIncrementTick>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006506:	4b16      	ldr	r3, [pc, #88]	@ (8006560 <xTaskResumeAll+0x134>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f1      	bne.n	80064fc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006518:	4b12      	ldr	r3, [pc, #72]	@ (8006564 <xTaskResumeAll+0x138>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800651e:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <xTaskResumeAll+0x134>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800652a:	4b0f      	ldr	r3, [pc, #60]	@ (8006568 <xTaskResumeAll+0x13c>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fa1d 	bl	8007978 <vPortExitCritical>

	return xAlreadyYielded;
 800653e:	68bb      	ldr	r3, [r7, #8]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20003e50 	.word	0x20003e50
 800654c:	20003e28 	.word	0x20003e28
 8006550:	20003de8 	.word	0x20003de8
 8006554:	20003e30 	.word	0x20003e30
 8006558:	20003958 	.word	0x20003958
 800655c:	20003954 	.word	0x20003954
 8006560:	20003e3c 	.word	0x20003e3c
 8006564:	20003e38 	.word	0x20003e38
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006572:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <xTaskGetTickCount+0x1c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006578:	687b      	ldr	r3, [r7, #4]
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20003e2c 	.word	0x20003e2c

0800658c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006592:	f001 faa3 	bl	8007adc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800659a:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <xTaskGetTickCountFromISR+0x20>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a0:	683b      	ldr	r3, [r7, #0]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20003e2c 	.word	0x20003e2c

080065b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ba:	4b50      	ldr	r3, [pc, #320]	@ (80066fc <xTaskIncrementTick+0x14c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 808c 	bne.w	80066dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006700 <xTaskIncrementTick+0x150>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006700 <xTaskIncrementTick+0x150>)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d123      	bne.n	8006620 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <xTaskIncrementTick+0x154>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <xTaskIncrementTick+0x4e>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	b672      	cpsid	i
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	b662      	cpsie	i
 80065f6:	603b      	str	r3, [r7, #0]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <xTaskIncrementTick+0x4a>
 80065fe:	4b41      	ldr	r3, [pc, #260]	@ (8006704 <xTaskIncrementTick+0x154>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	4b40      	ldr	r3, [pc, #256]	@ (8006708 <xTaskIncrementTick+0x158>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a3e      	ldr	r2, [pc, #248]	@ (8006704 <xTaskIncrementTick+0x154>)
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4a3e      	ldr	r2, [pc, #248]	@ (8006708 <xTaskIncrementTick+0x158>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	4b3e      	ldr	r3, [pc, #248]	@ (800670c <xTaskIncrementTick+0x15c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	4a3c      	ldr	r2, [pc, #240]	@ (800670c <xTaskIncrementTick+0x15c>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	f000 fae2 	bl	8006be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006620:	4b3b      	ldr	r3, [pc, #236]	@ (8006710 <xTaskIncrementTick+0x160>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d349      	bcc.n	80066be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662a:	4b36      	ldr	r3, [pc, #216]	@ (8006704 <xTaskIncrementTick+0x154>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006634:	4b36      	ldr	r3, [pc, #216]	@ (8006710 <xTaskIncrementTick+0x160>)
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	601a      	str	r2, [r3, #0]
					break;
 800663c:	e03f      	b.n	80066be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663e:	4b31      	ldr	r3, [pc, #196]	@ (8006704 <xTaskIncrementTick+0x154>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d203      	bcs.n	800665e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006656:	4a2e      	ldr	r2, [pc, #184]	@ (8006710 <xTaskIncrementTick+0x160>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800665c:	e02f      	b.n	80066be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fb28 	bl	8004cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3318      	adds	r3, #24
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fb1f 	bl	8004cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <xTaskIncrementTick+0x164>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d903      	bls.n	800668e <xTaskIncrementTick+0xde>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	4a22      	ldr	r2, [pc, #136]	@ (8006714 <xTaskIncrementTick+0x164>)
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4a1f      	ldr	r2, [pc, #124]	@ (8006718 <xTaskIncrementTick+0x168>)
 800669c:	441a      	add	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fe faaa 	bl	8004bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b1b      	ldr	r3, [pc, #108]	@ (800671c <xTaskIncrementTick+0x16c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d3b8      	bcc.n	800662a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066bc:	e7b5      	b.n	800662a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066be:	4b17      	ldr	r3, [pc, #92]	@ (800671c <xTaskIncrementTick+0x16c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c4:	4914      	ldr	r1, [pc, #80]	@ (8006718 <xTaskIncrementTick+0x168>)
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d907      	bls.n	80066e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e004      	b.n	80066e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066dc:	4b10      	ldr	r3, [pc, #64]	@ (8006720 <xTaskIncrementTick+0x170>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a0f      	ldr	r2, [pc, #60]	@ (8006720 <xTaskIncrementTick+0x170>)
 80066e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006724 <xTaskIncrementTick+0x174>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20003e50 	.word	0x20003e50
 8006700:	20003e2c 	.word	0x20003e2c
 8006704:	20003de0 	.word	0x20003de0
 8006708:	20003de4 	.word	0x20003de4
 800670c:	20003e40 	.word	0x20003e40
 8006710:	20003e48 	.word	0x20003e48
 8006714:	20003e30 	.word	0x20003e30
 8006718:	20003958 	.word	0x20003958
 800671c:	20003954 	.word	0x20003954
 8006720:	20003e38 	.word	0x20003e38
 8006724:	20003e3c 	.word	0x20003e3c

08006728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800672e:	4b29      	ldr	r3, [pc, #164]	@ (80067d4 <vTaskSwitchContext+0xac>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006736:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <vTaskSwitchContext+0xb0>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800673c:	e044      	b.n	80067c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800673e:	4b26      	ldr	r3, [pc, #152]	@ (80067d8 <vTaskSwitchContext+0xb0>)
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006744:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <vTaskSwitchContext+0xb4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e013      	b.n	8006774 <vTaskSwitchContext+0x4c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10d      	bne.n	800676e <vTaskSwitchContext+0x46>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	b672      	cpsid	i
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	b662      	cpsie	i
 8006766:	607b      	str	r3, [r7, #4]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <vTaskSwitchContext+0x42>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3b01      	subs	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	491a      	ldr	r1, [pc, #104]	@ (80067e0 <vTaskSwitchContext+0xb8>)
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0e1      	beq.n	800674c <vTaskSwitchContext+0x24>
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4a13      	ldr	r2, [pc, #76]	@ (80067e0 <vTaskSwitchContext+0xb8>)
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	3308      	adds	r3, #8
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d104      	bne.n	80067b8 <vTaskSwitchContext+0x90>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	605a      	str	r2, [r3, #4]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4a09      	ldr	r2, [pc, #36]	@ (80067e4 <vTaskSwitchContext+0xbc>)
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4a06      	ldr	r2, [pc, #24]	@ (80067dc <vTaskSwitchContext+0xb4>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20003e50 	.word	0x20003e50
 80067d8:	20003e3c 	.word	0x20003e3c
 80067dc:	20003e30 	.word	0x20003e30
 80067e0:	20003958 	.word	0x20003958
 80067e4:	20003954 	.word	0x20003954

080067e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10d      	bne.n	8006814 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	b672      	cpsid	i
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	b662      	cpsie	i
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006814:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <vTaskPlaceOnEventList+0x4c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3318      	adds	r3, #24
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe fa12 	bl	8004c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006822:	2101      	movs	r1, #1
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f000 fba3 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20003954 	.word	0x20003954

08006838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	b672      	cpsid	i
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	b662      	cpsie	i
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006866:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <vTaskPlaceOnEventListRestricted+0x58>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3318      	adds	r3, #24
 800686c:	4619      	mov	r1, r3
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7fe f9c5 	bl	8004bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800687a:	f04f 33ff 	mov.w	r3, #4294967295
 800687e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f000 fb74 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
	}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20003954 	.word	0x20003954

08006894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	b672      	cpsid	i
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	b662      	cpsie	i
 80068be:	60fb      	str	r3, [r7, #12]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	3318      	adds	r3, #24
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe f9f4 	bl	8004cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006948 <xTaskRemoveFromEventList+0xb4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11d      	bne.n	8006914 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3304      	adds	r3, #4
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe f9eb 	bl	8004cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e6:	4b19      	ldr	r3, [pc, #100]	@ (800694c <xTaskRemoveFromEventList+0xb8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d903      	bls.n	80068f6 <xTaskRemoveFromEventList+0x62>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <xTaskRemoveFromEventList+0xb8>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a13      	ldr	r2, [pc, #76]	@ (8006950 <xTaskRemoveFromEventList+0xbc>)
 8006904:	441a      	add	r2, r3
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7fe f976 	bl	8004bfe <vListInsertEnd>
 8006912:	e005      	b.n	8006920 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3318      	adds	r3, #24
 8006918:	4619      	mov	r1, r3
 800691a:	480e      	ldr	r0, [pc, #56]	@ (8006954 <xTaskRemoveFromEventList+0xc0>)
 800691c:	f7fe f96f 	bl	8004bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <xTaskRemoveFromEventList+0xc4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	429a      	cmp	r2, r3
 800692c:	d905      	bls.n	800693a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006932:	4b0a      	ldr	r3, [pc, #40]	@ (800695c <xTaskRemoveFromEventList+0xc8>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e001      	b.n	800693e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20003e50 	.word	0x20003e50
 800694c:	20003e30 	.word	0x20003e30
 8006950:	20003958 	.word	0x20003958
 8006954:	20003de8 	.word	0x20003de8
 8006958:	20003954 	.word	0x20003954
 800695c:	20003e3c 	.word	0x20003e3c

08006960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006968:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <vTaskInternalSetTimeOutState+0x24>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <vTaskInternalSetTimeOutState+0x28>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20003e40 	.word	0x20003e40
 8006988:	20003e2c 	.word	0x20003e2c

0800698c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10d      	bne.n	80069b8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	b672      	cpsid	i
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	b662      	cpsie	i
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	b672      	cpsid	i
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	b662      	cpsie	i
 80069d2:	60fb      	str	r3, [r7, #12]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80069da:	f000 ff97 	bl	800790c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069de:	4b1d      	ldr	r3, [pc, #116]	@ (8006a54 <xTaskCheckForTimeOut+0xc8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d102      	bne.n	80069fe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	e023      	b.n	8006a46 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <xTaskCheckForTimeOut+0xcc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d007      	beq.n	8006a1a <xTaskCheckForTimeOut+0x8e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e015      	b.n	8006a46 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d20b      	bcs.n	8006a3c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ff95 	bl	8006960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e004      	b.n	8006a46 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a42:	2301      	movs	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a46:	f000 ff97 	bl	8007978 <vPortExitCritical>

	return xReturn;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20003e2c 	.word	0x20003e2c
 8006a58:	20003e40 	.word	0x20003e40

08006a5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a60:	4b03      	ldr	r3, [pc, #12]	@ (8006a70 <vTaskMissedYield+0x14>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	20003e3c 	.word	0x20003e3c

08006a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a7c:	f000 f852 	bl	8006b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a80:	4b06      	ldr	r3, [pc, #24]	@ (8006a9c <prvIdleTask+0x28>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d9f9      	bls.n	8006a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <prvIdleTask+0x2c>)
 8006a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a98:	e7f0      	b.n	8006a7c <prvIdleTask+0x8>
 8006a9a:	bf00      	nop
 8006a9c:	20003958 	.word	0x20003958
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aaa:	2300      	movs	r3, #0
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	e00c      	b.n	8006aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <prvInitialiseTaskLists+0x60>)
 8006abc:	4413      	add	r3, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe f870 	bl	8004ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b37      	cmp	r3, #55	@ 0x37
 8006ace:	d9ef      	bls.n	8006ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ad0:	480d      	ldr	r0, [pc, #52]	@ (8006b08 <prvInitialiseTaskLists+0x64>)
 8006ad2:	f7fe f867 	bl	8004ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ad6:	480d      	ldr	r0, [pc, #52]	@ (8006b0c <prvInitialiseTaskLists+0x68>)
 8006ad8:	f7fe f864 	bl	8004ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006adc:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <prvInitialiseTaskLists+0x6c>)
 8006ade:	f7fe f861 	bl	8004ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ae2:	480c      	ldr	r0, [pc, #48]	@ (8006b14 <prvInitialiseTaskLists+0x70>)
 8006ae4:	f7fe f85e 	bl	8004ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ae8:	480b      	ldr	r0, [pc, #44]	@ (8006b18 <prvInitialiseTaskLists+0x74>)
 8006aea:	f7fe f85b 	bl	8004ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <prvInitialiseTaskLists+0x78>)
 8006af0:	4a05      	ldr	r2, [pc, #20]	@ (8006b08 <prvInitialiseTaskLists+0x64>)
 8006af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <prvInitialiseTaskLists+0x7c>)
 8006af6:	4a05      	ldr	r2, [pc, #20]	@ (8006b0c <prvInitialiseTaskLists+0x68>)
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20003958 	.word	0x20003958
 8006b08:	20003db8 	.word	0x20003db8
 8006b0c:	20003dcc 	.word	0x20003dcc
 8006b10:	20003de8 	.word	0x20003de8
 8006b14:	20003dfc 	.word	0x20003dfc
 8006b18:	20003e14 	.word	0x20003e14
 8006b1c:	20003de0 	.word	0x20003de0
 8006b20:	20003de4 	.word	0x20003de4

08006b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b2a:	e019      	b.n	8006b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b2c:	f000 feee 	bl	800790c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b30:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <prvCheckTasksWaitingTermination+0x50>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe f8bb 	bl	8004cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <prvCheckTasksWaitingTermination+0x54>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	4a0b      	ldr	r2, [pc, #44]	@ (8006b78 <prvCheckTasksWaitingTermination+0x54>)
 8006b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <prvCheckTasksWaitingTermination+0x58>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4a0a      	ldr	r2, [pc, #40]	@ (8006b7c <prvCheckTasksWaitingTermination+0x58>)
 8006b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b56:	f000 ff0f 	bl	8007978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f810 	bl	8006b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <prvCheckTasksWaitingTermination+0x58>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e1      	bne.n	8006b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20003dfc 	.word	0x20003dfc
 8006b78:	20003e28 	.word	0x20003e28
 8006b7c:	20003e10 	.word	0x20003e10

08006b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f8b4 	bl	8007d04 <vPortFree>
				vPortFree( pxTCB );
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f8b1 	bl	8007d04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba2:	e01b      	b.n	8006bdc <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d103      	bne.n	8006bb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f8a8 	bl	8007d04 <vPortFree>
	}
 8006bb4:	e012      	b.n	8006bdc <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d00d      	beq.n	8006bdc <prvDeleteTCB+0x5c>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <prvDeleteTCB+0x58>
	}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bea:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bfc:	e008      	b.n	8006c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfe:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20003de0 	.word	0x20003de0
 8006c20:	20003e48 	.word	0x20003e48

08006c24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c2a:	4b05      	ldr	r3, [pc, #20]	@ (8006c40 <xTaskGetCurrentTaskHandle+0x1c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c30:	687b      	ldr	r3, [r7, #4]
	}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20003954 	.word	0x20003954

08006c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <xTaskGetSchedulerState+0x34>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c52:	2301      	movs	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	e008      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c58:	4b08      	ldr	r3, [pc, #32]	@ (8006c7c <xTaskGetSchedulerState+0x38>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c60:	2302      	movs	r3, #2
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e001      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c6a:	687b      	ldr	r3, [r7, #4]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	20003e34 	.word	0x20003e34
 8006c7c:	20003e50 	.word	0x20003e50

08006c80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d051      	beq.n	8006d3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d241      	bcs.n	8006d28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	db06      	blt.n	8006cba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cac:	4b25      	ldr	r3, [pc, #148]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6959      	ldr	r1, [r3, #20]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a1f      	ldr	r2, [pc, #124]	@ (8006d48 <xTaskPriorityInherit+0xc8>)
 8006ccc:	4413      	add	r3, r2
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d122      	bne.n	8006d18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd ffee 	bl	8004cb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cdc:	4b19      	ldr	r3, [pc, #100]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cea:	4b18      	ldr	r3, [pc, #96]	@ (8006d4c <xTaskPriorityInherit+0xcc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <xTaskPriorityInherit+0x7a>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <xTaskPriorityInherit+0xcc>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a10      	ldr	r2, [pc, #64]	@ (8006d48 <xTaskPriorityInherit+0xc8>)
 8006d08:	441a      	add	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7fd ff74 	bl	8004bfe <vListInsertEnd>
 8006d16:	e004      	b.n	8006d22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e008      	b.n	8006d3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d201      	bcs.n	8006d3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20003954 	.word	0x20003954
 8006d48:	20003958 	.word	0x20003958
 8006d4c:	20003e30 	.word	0x20003e30

08006d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d05c      	beq.n	8006e20 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d66:	4b31      	ldr	r3, [pc, #196]	@ (8006e2c <xTaskPriorityDisinherit+0xdc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d00d      	beq.n	8006d8c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	b672      	cpsid	i
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	b662      	cpsie	i
 8006da8:	60bb      	str	r3, [r7, #8]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db4:	1e5a      	subs	r2, r3, #1
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d02c      	beq.n	8006e20 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d128      	bne.n	8006e20 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fd ff70 	bl	8004cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e30 <xTaskPriorityDisinherit+0xe0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d903      	bls.n	8006e00 <xTaskPriorityDisinherit+0xb0>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006e30 <xTaskPriorityDisinherit+0xe0>)
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4a09      	ldr	r2, [pc, #36]	@ (8006e34 <xTaskPriorityDisinherit+0xe4>)
 8006e0e:	441a      	add	r2, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f7fd fef1 	bl	8004bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e20:	697b      	ldr	r3, [r7, #20]
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20003954 	.word	0x20003954
 8006e30:	20003e30 	.word	0x20003e30
 8006e34:	20003958 	.word	0x20003958

08006e38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d070      	beq.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10d      	bne.n	8006e74 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	60fb      	str	r3, [r7, #12]
}
 8006e6e:	bf00      	nop
 8006e70:	bf00      	nop
 8006e72:	e7fd      	b.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d902      	bls.n	8006e84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	61fb      	str	r3, [r7, #28]
 8006e82:	e002      	b.n	8006e8a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d04e      	beq.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d149      	bne.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e9e:	4b27      	ldr	r3, [pc, #156]	@ (8006f3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d10d      	bne.n	8006ec4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	b672      	cpsid	i
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	b662      	cpsie	i
 8006ebc:	60bb      	str	r3, [r7, #8]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db04      	blt.n	8006ee2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6959      	ldr	r1, [r3, #20]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a13      	ldr	r2, [pc, #76]	@ (8006f40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d11c      	bne.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fd fedb 	bl	8004cb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d903      	bls.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a0c      	ldr	r2, [pc, #48]	@ (8006f44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4a07      	ldr	r2, [pc, #28]	@ (8006f40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f24:	441a      	add	r2, r3
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fd fe66 	bl	8004bfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f32:	bf00      	nop
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20003954 	.word	0x20003954
 8006f40:	20003958 	.word	0x20003958
 8006f44:	20003e30 	.word	0x20003e30

08006f48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f4c:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f5a:	3201      	adds	r2, #1
 8006f5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f5e:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f60:	681b      	ldr	r3, [r3, #0]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20003954 	.word	0x20003954

08006f70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f7a:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f80:	4b20      	ldr	r3, [pc, #128]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fd fe96 	bl	8004cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d10a      	bne.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4819      	ldr	r0, [pc, #100]	@ (8007008 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fa4:	f7fd fe2b 	bl	8004bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fa8:	e026      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d209      	bcs.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fd fe39 	bl	8004c46 <vListInsert>
}
 8006fd4:	e010      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fd fe2f 	bl	8004c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d202      	bcs.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ff2:	4a08      	ldr	r2, [pc, #32]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6013      	str	r3, [r2, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20003e2c 	.word	0x20003e2c
 8007004:	20003954 	.word	0x20003954
 8007008:	20003e14 	.word	0x20003e14
 800700c:	20003de4 	.word	0x20003de4
 8007010:	20003de0 	.word	0x20003de0
 8007014:	20003e48 	.word	0x20003e48

08007018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	@ 0x28
 800701c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007022:	f000 fb21 	bl	8007668 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007026:	4b1e      	ldr	r3, [pc, #120]	@ (80070a0 <xTimerCreateTimerTask+0x88>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d021      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007036:	1d3a      	adds	r2, r7, #4
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd fd95 	bl	8004b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	2302      	movs	r3, #2
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	460a      	mov	r2, r1
 8007058:	4912      	ldr	r1, [pc, #72]	@ (80070a4 <xTimerCreateTimerTask+0x8c>)
 800705a:	4813      	ldr	r0, [pc, #76]	@ (80070a8 <xTimerCreateTimerTask+0x90>)
 800705c:	f7fe ff86 	bl	8005f6c <xTaskCreateStatic>
 8007060:	4603      	mov	r3, r0
 8007062:	4a12      	ldr	r2, [pc, #72]	@ (80070ac <xTimerCreateTimerTask+0x94>)
 8007064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007066:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <xTimerCreateTimerTask+0x94>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10d      	bne.n	8007094 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	613b      	str	r3, [r7, #16]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007094:	697b      	ldr	r3, [r7, #20]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20003e84 	.word	0x20003e84
 80070a4:	08013064 	.word	0x08013064
 80070a8:	080071f1 	.word	0x080071f1
 80070ac:	20003e88 	.word	0x20003e88

080070b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <xTimerGenericCommand+0x34>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070e4:	4b19      	ldr	r3, [pc, #100]	@ (800714c <xTimerGenericCommand+0x9c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02a      	beq.n	8007142 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	dc18      	bgt.n	8007130 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070fe:	f7ff fda1 	bl	8006c44 <xTaskGetSchedulerState>
 8007102:	4603      	mov	r3, r0
 8007104:	2b02      	cmp	r3, #2
 8007106:	d109      	bne.n	800711c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007108:	4b10      	ldr	r3, [pc, #64]	@ (800714c <xTimerGenericCommand+0x9c>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	f107 0110 	add.w	r1, r7, #16
 8007110:	2300      	movs	r3, #0
 8007112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007114:	f7fe f886 	bl	8005224 <xQueueGenericSend>
 8007118:	6278      	str	r0, [r7, #36]	@ 0x24
 800711a:	e012      	b.n	8007142 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <xTimerGenericCommand+0x9c>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	f107 0110 	add.w	r1, r7, #16
 8007124:	2300      	movs	r3, #0
 8007126:	2200      	movs	r2, #0
 8007128:	f7fe f87c 	bl	8005224 <xQueueGenericSend>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
 800712e:	e008      	b.n	8007142 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007130:	4b06      	ldr	r3, [pc, #24]	@ (800714c <xTimerGenericCommand+0x9c>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	f107 0110 	add.w	r1, r7, #16
 8007138:	2300      	movs	r3, #0
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	f7fe f97c 	bl	8005438 <xQueueGenericSendFromISR>
 8007140:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007144:	4618      	mov	r0, r3
 8007146:	3728      	adds	r7, #40	@ 0x28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20003e84 	.word	0x20003e84

08007150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af02      	add	r7, sp, #8
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800715a:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <prvProcessExpiredTimer+0x9c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	3304      	adds	r3, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fd fda5 	bl	8004cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d025      	beq.n	80071c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	699a      	ldr	r2, [r3, #24]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	18d1      	adds	r1, r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6978      	ldr	r0, [r7, #20]
 800718a:	f000 f8d7 	bl	800733c <prvInsertTimerInActiveList>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007194:	2300      	movs	r3, #0
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	2100      	movs	r1, #0
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f7ff ff86 	bl	80070b0 <xTimerGenericCommand>
 80071a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d116      	bne.n	80071da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	b672      	cpsid	i
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	b662      	cpsie	i
 80071c0:	60fb      	str	r3, [r7, #12]
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	4798      	blx	r3
}
 80071e2:	bf00      	nop
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20003e7c 	.word	0x20003e7c

080071f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071f8:	f107 0308 	add.w	r3, r7, #8
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f859 	bl	80072b4 <prvGetNextExpireTime>
 8007202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4619      	mov	r1, r3
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f805 	bl	8007218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800720e:	f000 f8d7 	bl	80073c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007212:	bf00      	nop
 8007214:	e7f0      	b.n	80071f8 <prvTimerTask+0x8>
	...

08007218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007222:	f7ff f8f5 	bl	8006410 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f866 	bl	80072fc <prvSampleTimeNow>
 8007230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d130      	bne.n	800729a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <prvProcessTimerOrBlockTask+0x3c>
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	429a      	cmp	r2, r3
 8007244:	d806      	bhi.n	8007254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007246:	f7ff f8f1 	bl	800642c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff7f 	bl	8007150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007252:	e024      	b.n	800729e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800725a:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <prvProcessTimerOrBlockTask+0x90>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <prvProcessTimerOrBlockTask+0x50>
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <prvProcessTimerOrBlockTask+0x52>
 8007268:	2300      	movs	r3, #0
 800726a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800726c:	4b0f      	ldr	r3, [pc, #60]	@ (80072ac <prvProcessTimerOrBlockTask+0x94>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	4619      	mov	r1, r3
 800727a:	f7fe fe43 	bl	8005f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800727e:	f7ff f8d5 	bl	800642c <xTaskResumeAll>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <prvProcessTimerOrBlockTask+0x98>)
 800728a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	f3bf 8f6f 	isb	sy
}
 8007298:	e001      	b.n	800729e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800729a:	f7ff f8c7 	bl	800642c <xTaskResumeAll>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20003e80 	.word	0x20003e80
 80072ac:	20003e84 	.word	0x20003e84
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <prvGetNextExpireTime+0x44>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <prvGetNextExpireTime+0x16>
 80072c6:	2201      	movs	r2, #1
 80072c8:	e000      	b.n	80072cc <prvGetNextExpireTime+0x18>
 80072ca:	2200      	movs	r2, #0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072d8:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <prvGetNextExpireTime+0x44>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e001      	b.n	80072e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20003e7c 	.word	0x20003e7c

080072fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007304:	f7ff f932 	bl	800656c <xTaskGetTickCount>
 8007308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <prvSampleTimeNow+0x3c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	429a      	cmp	r2, r3
 8007312:	d205      	bcs.n	8007320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007314:	f000 f940 	bl	8007598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e002      	b.n	8007326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007326:	4a04      	ldr	r2, [pc, #16]	@ (8007338 <prvSampleTimeNow+0x3c>)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20003e8c 	.word	0x20003e8c

0800733c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	429a      	cmp	r2, r3
 8007360:	d812      	bhi.n	8007388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	d302      	bcc.n	8007376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e01b      	b.n	80073ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007376:	4b10      	ldr	r3, [pc, #64]	@ (80073b8 <prvInsertTimerInActiveList+0x7c>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fd fc60 	bl	8004c46 <vListInsert>
 8007386:	e012      	b.n	80073ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d206      	bcs.n	800739e <prvInsertTimerInActiveList+0x62>
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	e007      	b.n	80073ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800739e:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <prvInsertTimerInActiveList+0x80>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4619      	mov	r1, r3
 80073a8:	4610      	mov	r0, r2
 80073aa:	f7fd fc4c 	bl	8004c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073ae:	697b      	ldr	r3, [r7, #20]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20003e80 	.word	0x20003e80
 80073bc:	20003e7c 	.word	0x20003e7c

080073c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	@ 0x38
 80073c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073c6:	e0d4      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	da1b      	bge.n	8007406 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	3304      	adds	r3, #4
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10d      	bne.n	80073f6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	b672      	cpsid	i
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	b662      	cpsie	i
 80073ee:	61fb      	str	r3, [r7, #28]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073fc:	6850      	ldr	r0, [r2, #4]
 80073fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007400:	6892      	ldr	r2, [r2, #8]
 8007402:	4611      	mov	r1, r2
 8007404:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f2c0 80b2 	blt.w	8007572 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d004      	beq.n	8007424 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fc4a 	bl	8004cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007424:	463b      	mov	r3, r7
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff ff68 	bl	80072fc <prvSampleTimeNow>
 800742c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b09      	cmp	r3, #9
 8007432:	f200 809b 	bhi.w	800756c <prvProcessReceivedCommands+0x1ac>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <prvProcessReceivedCommands+0x7c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007465 	.word	0x08007465
 8007440:	08007465 	.word	0x08007465
 8007444:	08007465 	.word	0x08007465
 8007448:	080074df 	.word	0x080074df
 800744c:	080074f3 	.word	0x080074f3
 8007450:	08007543 	.word	0x08007543
 8007454:	08007465 	.word	0x08007465
 8007458:	08007465 	.word	0x08007465
 800745c:	080074df 	.word	0x080074df
 8007460:	080074f3 	.word	0x080074f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	18d1      	adds	r1, r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007484:	f7ff ff5a 	bl	800733c <prvInsertTimerInActiveList>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d070      	beq.n	8007570 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d065      	beq.n	8007570 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	441a      	add	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	2100      	movs	r1, #0
 80074b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b6:	f7ff fdfb 	bl	80070b0 <xTimerGenericCommand>
 80074ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d156      	bne.n	8007570 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	61bb      	str	r3, [r7, #24]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074f0:	e03f      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	b672      	cpsid	i
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	b662      	cpsie	i
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	18d1      	adds	r1, r2, r3
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753c:	f7ff fefe 	bl	800733c <prvInsertTimerInActiveList>
					break;
 8007540:	e017      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007552:	f000 fbd7 	bl	8007d04 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007556:	e00c      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800756a:	e002      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <prvProcessReceivedCommands+0x1b2>
					break;
 8007570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <prvProcessReceivedCommands+0x1d4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1d39      	adds	r1, r7, #4
 8007578:	2200      	movs	r2, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe f898 	bl	80056b0 <xQueueReceive>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	f47f af20 	bne.w	80073c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3730      	adds	r7, #48	@ 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20003e84 	.word	0x20003e84

08007598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800759e:	e04b      	b.n	8007638 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd fb7d 	bl	8004cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d031      	beq.n	8007638 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90e      	bls.n	8007604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7fd fb22 	bl	8004c46 <vListInsert>
 8007602:	e019      	b.n	8007638 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	2100      	movs	r1, #0
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fd4e 	bl	80070b0 <xTimerGenericCommand>
 8007614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	b672      	cpsid	i
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	b662      	cpsie	i
 8007630:	603b      	str	r3, [r7, #0]
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	e7fd      	b.n	8007634 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1ae      	bne.n	80075a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007642:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007648:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <prvSwitchTimerLists+0xcc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a04      	ldr	r2, [pc, #16]	@ (8007660 <prvSwitchTimerLists+0xc8>)
 800764e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007650:	4a04      	ldr	r2, [pc, #16]	@ (8007664 <prvSwitchTimerLists+0xcc>)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	6013      	str	r3, [r2, #0]
}
 8007656:	bf00      	nop
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20003e7c 	.word	0x20003e7c
 8007664:	20003e80 	.word	0x20003e80

08007668 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800766e:	f000 f94d 	bl	800790c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007672:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <prvCheckForValidListAndQueue+0x60>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d120      	bne.n	80076bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800767a:	4814      	ldr	r0, [pc, #80]	@ (80076cc <prvCheckForValidListAndQueue+0x64>)
 800767c:	f7fd fa92 	bl	8004ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007680:	4813      	ldr	r0, [pc, #76]	@ (80076d0 <prvCheckForValidListAndQueue+0x68>)
 8007682:	f7fd fa8f 	bl	8004ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007686:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <prvCheckForValidListAndQueue+0x6c>)
 8007688:	4a10      	ldr	r2, [pc, #64]	@ (80076cc <prvCheckForValidListAndQueue+0x64>)
 800768a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800768c:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <prvCheckForValidListAndQueue+0x70>)
 800768e:	4a10      	ldr	r2, [pc, #64]	@ (80076d0 <prvCheckForValidListAndQueue+0x68>)
 8007690:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007692:	2300      	movs	r3, #0
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4b11      	ldr	r3, [pc, #68]	@ (80076dc <prvCheckForValidListAndQueue+0x74>)
 8007698:	4a11      	ldr	r2, [pc, #68]	@ (80076e0 <prvCheckForValidListAndQueue+0x78>)
 800769a:	2110      	movs	r1, #16
 800769c:	200a      	movs	r0, #10
 800769e:	f7fd fba1 	bl	8004de4 <xQueueGenericCreateStatic>
 80076a2:	4603      	mov	r3, r0
 80076a4:	4a08      	ldr	r2, [pc, #32]	@ (80076c8 <prvCheckForValidListAndQueue+0x60>)
 80076a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076a8:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <prvCheckForValidListAndQueue+0x60>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076b0:	4b05      	ldr	r3, [pc, #20]	@ (80076c8 <prvCheckForValidListAndQueue+0x60>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	490b      	ldr	r1, [pc, #44]	@ (80076e4 <prvCheckForValidListAndQueue+0x7c>)
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fbd0 	bl	8005e5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076bc:	f000 f95c 	bl	8007978 <vPortExitCritical>
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20003e84 	.word	0x20003e84
 80076cc:	20003e54 	.word	0x20003e54
 80076d0:	20003e68 	.word	0x20003e68
 80076d4:	20003e7c 	.word	0x20003e7c
 80076d8:	20003e80 	.word	0x20003e80
 80076dc:	20003f30 	.word	0x20003f30
 80076e0:	20003e90 	.word	0x20003e90
 80076e4:	0801306c 	.word	0x0801306c

080076e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b04      	subs	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007718:	4a0c      	ldr	r2, [pc, #48]	@ (800774c <pxPortInitialiseStack+0x64>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b14      	subs	r3, #20
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f06f 0202 	mvn.w	r2, #2
 8007736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3b20      	subs	r3, #32
 800773c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	08007751 	.word	0x08007751

08007750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <prvTaskExitError+0x60>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d00d      	beq.n	8007780 <prvTaskExitError+0x30>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	b672      	cpsid	i
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	b662      	cpsie	i
 8007778:	60fb      	str	r3, [r7, #12]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <prvTaskExitError+0x2c>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	b672      	cpsid	i
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	b662      	cpsie	i
 8007794:	60bb      	str	r3, [r7, #8]
}
 8007796:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007798:	bf00      	nop
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0fc      	beq.n	800779a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c
	...

080077c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077c0:	4b07      	ldr	r3, [pc, #28]	@ (80077e0 <pxCurrentTCBConst2>)
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	f380 8809 	msr	PSP, r0
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8811 	msr	BASEPRI, r0
 80077da:	4770      	bx	lr
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst2>:
 80077e0:	20003954 	.word	0x20003954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077e8:	4808      	ldr	r0, [pc, #32]	@ (800780c <prvPortStartFirstTask+0x24>)
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f380 8808 	msr	MSP, r0
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8814 	msr	CONTROL, r0
 80077fa:	b662      	cpsie	i
 80077fc:	b661      	cpsie	f
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	df00      	svc	0
 8007808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800780a:	bf00      	nop
 800780c:	e000ed08 	.word	0xe000ed08

08007810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007816:	4b37      	ldr	r3, [pc, #220]	@ (80078f4 <xPortStartScheduler+0xe4>)
 8007818:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	22ff      	movs	r2, #255	@ 0xff
 8007826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b2f      	ldr	r3, [pc, #188]	@ (80078f8 <xPortStartScheduler+0xe8>)
 800783c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800783e:	4b2f      	ldr	r3, [pc, #188]	@ (80078fc <xPortStartScheduler+0xec>)
 8007840:	2207      	movs	r2, #7
 8007842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007844:	e009      	b.n	800785a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007846:	4b2d      	ldr	r3, [pc, #180]	@ (80078fc <xPortStartScheduler+0xec>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3b01      	subs	r3, #1
 800784c:	4a2b      	ldr	r2, [pc, #172]	@ (80078fc <xPortStartScheduler+0xec>)
 800784e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007862:	2b80      	cmp	r3, #128	@ 0x80
 8007864:	d0ef      	beq.n	8007846 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007866:	4b25      	ldr	r3, [pc, #148]	@ (80078fc <xPortStartScheduler+0xec>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1c3 0307 	rsb	r3, r3, #7
 800786e:	2b04      	cmp	r3, #4
 8007870:	d00d      	beq.n	800788e <xPortStartScheduler+0x7e>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	b672      	cpsid	i
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	b662      	cpsie	i
 8007886:	60bb      	str	r3, [r7, #8]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800788e:	4b1b      	ldr	r3, [pc, #108]	@ (80078fc <xPortStartScheduler+0xec>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	4a19      	ldr	r2, [pc, #100]	@ (80078fc <xPortStartScheduler+0xec>)
 8007896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007898:	4b18      	ldr	r3, [pc, #96]	@ (80078fc <xPortStartScheduler+0xec>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078a0:	4a16      	ldr	r2, [pc, #88]	@ (80078fc <xPortStartScheduler+0xec>)
 80078a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078ac:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <xPortStartScheduler+0xf0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a13      	ldr	r2, [pc, #76]	@ (8007900 <xPortStartScheduler+0xf0>)
 80078b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b8:	4b11      	ldr	r3, [pc, #68]	@ (8007900 <xPortStartScheduler+0xf0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a10      	ldr	r2, [pc, #64]	@ (8007900 <xPortStartScheduler+0xf0>)
 80078be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078c4:	f000 f8dc 	bl	8007a80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <xPortStartScheduler+0xf4>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ce:	f000 f8fb 	bl	8007ac8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <xPortStartScheduler+0xf8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007908 <xPortStartScheduler+0xf8>)
 80078d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078de:	f7ff ff83 	bl	80077e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078e2:	f7fe ff21 	bl	8006728 <vTaskSwitchContext>
	prvTaskExitError();
 80078e6:	f7ff ff33 	bl	8007750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000e400 	.word	0xe000e400
 80078f8:	20003f80 	.word	0x20003f80
 80078fc:	20003f84 	.word	0x20003f84
 8007900:	e000ed20 	.word	0xe000ed20
 8007904:	2000000c 	.word	0x2000000c
 8007908:	e000ef34 	.word	0xe000ef34

0800790c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	b672      	cpsid	i
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	b662      	cpsie	i
 8007926:	607b      	str	r3, [r7, #4]
}
 8007928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800792a:	4b11      	ldr	r3, [pc, #68]	@ (8007970 <vPortEnterCritical+0x64>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	4a0f      	ldr	r2, [pc, #60]	@ (8007970 <vPortEnterCritical+0x64>)
 8007932:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007934:	4b0e      	ldr	r3, [pc, #56]	@ (8007970 <vPortEnterCritical+0x64>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d112      	bne.n	8007962 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800793c:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <vPortEnterCritical+0x68>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00d      	beq.n	8007962 <vPortEnterCritical+0x56>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	b672      	cpsid	i
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	b662      	cpsie	i
 800795a:	603b      	str	r3, [r7, #0]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <vPortEnterCritical+0x52>
	}
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	2000000c 	.word	0x2000000c
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800797e:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <vPortExitCritical+0x54>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <vPortExitCritical+0x2a>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	b672      	cpsid	i
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	b662      	cpsie	i
 800799a:	607b      	str	r3, [r7, #4]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80079a2:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <vPortExitCritical+0x54>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <vPortExitCritical+0x54>)
 80079aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vPortExitCritical+0x54>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <vPortExitCritical+0x48>
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079f4:	b672      	cpsid	i
 80079f6:	f380 8811 	msr	BASEPRI, r0
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	b662      	cpsie	i
 8007a04:	f7fe fe90 	bl	8006728 <vTaskSwitchContext>
 8007a08:	f04f 0000 	mov.w	r0, #0
 8007a0c:	f380 8811 	msr	BASEPRI, r0
 8007a10:	bc09      	pop	{r0, r3}
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	6808      	ldr	r0, [r1, #0]
 8007a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	f01e 0f10 	tst.w	lr, #16
 8007a1e:	bf08      	it	eq
 8007a20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a24:	f380 8809 	msr	PSP, r0
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <pxCurrentTCBConst>:
 8007a30:	20003954 	.word	0x20003954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	b672      	cpsid	i
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	b662      	cpsie	i
 8007a52:	607b      	str	r3, [r7, #4]
}
 8007a54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a56:	f7fe fdab 	bl	80065b0 <xTaskIncrementTick>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a60:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <SysTick_Handler+0x44>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f383 8811 	msr	BASEPRI, r3
}
 8007a72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a84:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <vPortSetupTimerInterrupt+0x34>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <vPortSetupTimerInterrupt+0x38>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	@ (8007abc <vPortSetupTimerInterrupt+0x3c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac0 <vPortSetupTimerInterrupt+0x40>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	099b      	lsrs	r3, r3, #6
 8007a9c:	4a09      	ldr	r2, [pc, #36]	@ (8007ac4 <vPortSetupTimerInterrupt+0x44>)
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aa2:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <vPortSetupTimerInterrupt+0x34>)
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	601a      	str	r2, [r3, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	e000e010 	.word	0xe000e010
 8007ab8:	e000e018 	.word	0xe000e018
 8007abc:	20000000 	.word	0x20000000
 8007ac0:	10624dd3 	.word	0x10624dd3
 8007ac4:	e000e014 	.word	0xe000e014

08007ac8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ad8 <vPortEnableVFP+0x10>
 8007acc:	6801      	ldr	r1, [r0, #0]
 8007ace:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ad2:	6001      	str	r1, [r0, #0]
 8007ad4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ad6:	bf00      	nop
 8007ad8:	e000ed88 	.word	0xe000ed88

08007adc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ae2:	f3ef 8305 	mrs	r3, IPSR
 8007ae6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b0f      	cmp	r3, #15
 8007aec:	d917      	bls.n	8007b1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aee:	4a1a      	ldr	r2, [pc, #104]	@ (8007b58 <vPortValidateInterruptPriority+0x7c>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007af8:	4b18      	ldr	r3, [pc, #96]	@ (8007b5c <vPortValidateInterruptPriority+0x80>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	7afa      	ldrb	r2, [r7, #11]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d20d      	bcs.n	8007b1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b1e:	4b10      	ldr	r3, [pc, #64]	@ (8007b60 <vPortValidateInterruptPriority+0x84>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <vPortValidateInterruptPriority+0x88>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d90d      	bls.n	8007b4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	b672      	cpsid	i
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	b662      	cpsie	i
 8007b42:	603b      	str	r3, [r7, #0]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <vPortValidateInterruptPriority+0x6a>
	}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	e000e3f0 	.word	0xe000e3f0
 8007b5c:	20003f80 	.word	0x20003f80
 8007b60:	e000ed0c 	.word	0xe000ed0c
 8007b64:	20003f84 	.word	0x20003f84

08007b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	@ 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b74:	f7fe fc4c 	bl	8006410 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b78:	4b5d      	ldr	r3, [pc, #372]	@ (8007cf0 <pvPortMalloc+0x188>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b80:	f000 f920 	bl	8007dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b84:	4b5b      	ldr	r3, [pc, #364]	@ (8007cf4 <pvPortMalloc+0x18c>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 8094 	bne.w	8007cba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007b98:	2208      	movs	r2, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d017      	beq.n	8007bda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f023 0307 	bic.w	r3, r3, #7
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00d      	beq.n	8007bda <pvPortMalloc+0x72>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	b672      	cpsid	i
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	b662      	cpsie	i
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06c      	beq.n	8007cba <pvPortMalloc+0x152>
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <pvPortMalloc+0x190>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d867      	bhi.n	8007cba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <pvPortMalloc+0x194>)
 8007bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bee:	4b43      	ldr	r3, [pc, #268]	@ (8007cfc <pvPortMalloc+0x194>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf4:	e004      	b.n	8007c00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <pvPortMalloc+0xaa>
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f1      	bne.n	8007bf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <pvPortMalloc+0x188>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d04e      	beq.n	8007cba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4413      	add	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	2308      	movs	r3, #8
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d922      	bls.n	8007c84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <pvPortMalloc+0x104>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	b672      	cpsid	i
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	b662      	cpsie	i
 8007c64:	613b      	str	r3, [r7, #16]
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c7e:	69b8      	ldr	r0, [r7, #24]
 8007c80:	f000 f902 	bl	8007e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c84:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf8 <pvPortMalloc+0x190>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf8 <pvPortMalloc+0x190>)
 8007c90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c92:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <pvPortMalloc+0x190>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	4b1a      	ldr	r3, [pc, #104]	@ (8007d00 <pvPortMalloc+0x198>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d203      	bcs.n	8007ca6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c9e:	4b16      	ldr	r3, [pc, #88]	@ (8007cf8 <pvPortMalloc+0x190>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	@ (8007d00 <pvPortMalloc+0x198>)
 8007ca4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <pvPortMalloc+0x18c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cba:	f7fe fbb7 	bl	800642c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <pvPortMalloc+0x17c>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	b672      	cpsid	i
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	b662      	cpsie	i
 8007cdc:	60fb      	str	r3, [r7, #12]
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <pvPortMalloc+0x178>
	return pvReturn;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3728      	adds	r7, #40	@ 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20007b90 	.word	0x20007b90
 8007cf4:	20007b9c 	.word	0x20007b9c
 8007cf8:	20007b94 	.word	0x20007b94
 8007cfc:	20007b88 	.word	0x20007b88
 8007d00:	20007b98 	.word	0x20007b98

08007d04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d04e      	beq.n	8007db4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d16:	2308      	movs	r3, #8
 8007d18:	425b      	negs	r3, r3
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b24      	ldr	r3, [pc, #144]	@ (8007dbc <vPortFree+0xb8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <vPortFree+0x4a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	b672      	cpsid	i
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	b662      	cpsie	i
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00d      	beq.n	8007d72 <vPortFree+0x6e>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	b672      	cpsid	i
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	b662      	cpsie	i
 8007d6a:	60bb      	str	r3, [r7, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b11      	ldr	r3, [pc, #68]	@ (8007dbc <vPortFree+0xb8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d019      	beq.n	8007db4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d115      	bne.n	8007db4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dbc <vPortFree+0xb8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	401a      	ands	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d98:	f7fe fb3a 	bl	8006410 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <vPortFree+0xbc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a06      	ldr	r2, [pc, #24]	@ (8007dc0 <vPortFree+0xbc>)
 8007da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f000 f86c 	bl	8007e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007db0:	f7fe fb3c 	bl	800642c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20007b9c 	.word	0x20007b9c
 8007dc0:	20007b94 	.word	0x20007b94

08007dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dd0:	4b27      	ldr	r3, [pc, #156]	@ (8007e70 <prvHeapInit+0xac>)
 8007dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3307      	adds	r3, #7
 8007de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <prvHeapInit+0xac>)
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e74 <prvHeapInit+0xb0>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e02:	4b1c      	ldr	r3, [pc, #112]	@ (8007e74 <prvHeapInit+0xb0>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e10:	2208      	movs	r2, #8
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a15      	ldr	r2, [pc, #84]	@ (8007e78 <prvHeapInit+0xb4>)
 8007e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e26:	4b14      	ldr	r3, [pc, #80]	@ (8007e78 <prvHeapInit+0xb4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e2e:	4b12      	ldr	r3, [pc, #72]	@ (8007e78 <prvHeapInit+0xb4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <prvHeapInit+0xb4>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4a0a      	ldr	r2, [pc, #40]	@ (8007e7c <prvHeapInit+0xb8>)
 8007e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <prvHeapInit+0xbc>)
 8007e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e5c:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <prvHeapInit+0xc0>)
 8007e5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20003f88 	.word	0x20003f88
 8007e74:	20007b88 	.word	0x20007b88
 8007e78:	20007b90 	.word	0x20007b90
 8007e7c:	20007b98 	.word	0x20007b98
 8007e80:	20007b94 	.word	0x20007b94
 8007e84:	20007b9c 	.word	0x20007b9c

08007e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e90:	4b28      	ldr	r3, [pc, #160]	@ (8007f34 <prvInsertBlockIntoFreeList+0xac>)
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e002      	b.n	8007e9c <prvInsertBlockIntoFreeList+0x14>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d8f7      	bhi.n	8007e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d108      	bne.n	8007eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d118      	bne.n	8007f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b15      	ldr	r3, [pc, #84]	@ (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d00d      	beq.n	8007f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e008      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f06:	4b0c      	ldr	r3, [pc, #48]	@ (8007f38 <prvInsertBlockIntoFreeList+0xb0>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e003      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d002      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20007b88 	.word	0x20007b88
 8007f38:	20007b90 	.word	0x20007b90

08007f3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007f46:	f007 fa8b 	bl	800f460 <sys_timeouts_sleeptime>
 8007f4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d10b      	bne.n	8007f6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007f54:	4813      	ldr	r0, [pc, #76]	@ (8007fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007f56:	f009 ffe2 	bl	8011f1e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f009 ff6a 	bl	8011e38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007f64:	480f      	ldr	r0, [pc, #60]	@ (8007fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007f66:	f009 ffcb 	bl	8011f00 <sys_mutex_lock>
    return;
 8007f6a:	e018      	b.n	8007f9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007f72:	f007 fa3b 	bl	800f3ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007f76:	e7e6      	b.n	8007f46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007f78:	480a      	ldr	r0, [pc, #40]	@ (8007fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007f7a:	f009 ffd0 	bl	8011f1e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f009 ff58 	bl	8011e38 <sys_arch_mbox_fetch>
 8007f88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8007f8a:	4806      	ldr	r0, [pc, #24]	@ (8007fa4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007f8c:	f009 ffb8 	bl	8011f00 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d102      	bne.n	8007f9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007f98:	f007 fa28 	bl	800f3ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007f9c:	e7d3      	b.n	8007f46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20007bac 	.word	0x20007bac

08007fa8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007fb0:	4810      	ldr	r0, [pc, #64]	@ (8007ff4 <tcpip_thread+0x4c>)
 8007fb2:	f009 ffa5 	bl	8011f00 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007fb6:	4b10      	ldr	r3, [pc, #64]	@ (8007ff8 <tcpip_thread+0x50>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <tcpip_thread+0x50>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8007ffc <tcpip_thread+0x54>)
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4619      	mov	r1, r3
 8007fd0:	480b      	ldr	r0, [pc, #44]	@ (8008000 <tcpip_thread+0x58>)
 8007fd2:	f7ff ffb3 	bl	8007f3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <tcpip_thread+0x5c>)
 8007fde:	2291      	movs	r2, #145	@ 0x91
 8007fe0:	4909      	ldr	r1, [pc, #36]	@ (8008008 <tcpip_thread+0x60>)
 8007fe2:	480a      	ldr	r0, [pc, #40]	@ (800800c <tcpip_thread+0x64>)
 8007fe4:	f00a f8e6 	bl	80121b4 <iprintf>
      continue;
 8007fe8:	e003      	b.n	8007ff2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f80f 	bl	8008010 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007ff2:	e7ea      	b.n	8007fca <tcpip_thread+0x22>
 8007ff4:	20007bac 	.word	0x20007bac
 8007ff8:	20007ba0 	.word	0x20007ba0
 8007ffc:	20007ba4 	.word	0x20007ba4
 8008000:	20007ba8 	.word	0x20007ba8
 8008004:	08013074 	.word	0x08013074
 8008008:	080130a4 	.word	0x080130a4
 800800c:	080130c4 	.word	0x080130c4

08008010 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d026      	beq.n	800806e <tcpip_thread_handle_msg+0x5e>
 8008020:	2b02      	cmp	r3, #2
 8008022:	dc2b      	bgt.n	800807c <tcpip_thread_handle_msg+0x6c>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <tcpip_thread_handle_msg+0x1e>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d015      	beq.n	8008058 <tcpip_thread_handle_msg+0x48>
 800802c:	e026      	b.n	800807c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6850      	ldr	r0, [r2, #4]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	4611      	mov	r1, r2
 800803c:	4798      	blx	r3
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fcd5 	bl	80099f8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	2009      	movs	r0, #9
 8008052:	f000 fe2d 	bl	8008cb0 <memp_free>
      break;
 8008056:	e018      	b.n	800808a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6892      	ldr	r2, [r2, #8]
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	2008      	movs	r0, #8
 8008068:	f000 fe22 	bl	8008cb0 <memp_free>
      break;
 800806c:	e00d      	b.n	800808a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	4610      	mov	r0, r2
 8008078:	4798      	blx	r3
      break;
 800807a:	e006      	b.n	800808a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800807c:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <tcpip_thread_handle_msg+0x84>)
 800807e:	22cf      	movs	r2, #207	@ 0xcf
 8008080:	4905      	ldr	r1, [pc, #20]	@ (8008098 <tcpip_thread_handle_msg+0x88>)
 8008082:	4806      	ldr	r0, [pc, #24]	@ (800809c <tcpip_thread_handle_msg+0x8c>)
 8008084:	f00a f896 	bl	80121b4 <iprintf>
      break;
 8008088:	bf00      	nop
  }
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	08013074 	.word	0x08013074
 8008098:	080130a4 	.word	0x080130a4
 800809c:	080130c4 	.word	0x080130c4

080080a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80080ac:	481a      	ldr	r0, [pc, #104]	@ (8008118 <tcpip_inpkt+0x78>)
 80080ae:	f009 fef4 	bl	8011e9a <sys_mbox_valid>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <tcpip_inpkt+0x24>
 80080b8:	4b18      	ldr	r3, [pc, #96]	@ (800811c <tcpip_inpkt+0x7c>)
 80080ba:	22fc      	movs	r2, #252	@ 0xfc
 80080bc:	4918      	ldr	r1, [pc, #96]	@ (8008120 <tcpip_inpkt+0x80>)
 80080be:	4819      	ldr	r0, [pc, #100]	@ (8008124 <tcpip_inpkt+0x84>)
 80080c0:	f00a f878 	bl	80121b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80080c4:	2009      	movs	r0, #9
 80080c6:	f000 fda1 	bl	8008c0c <memp_malloc>
 80080ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80080d2:	f04f 33ff 	mov.w	r3, #4294967295
 80080d6:	e01a      	b.n	800810e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80080f0:	6979      	ldr	r1, [r7, #20]
 80080f2:	4809      	ldr	r0, [pc, #36]	@ (8008118 <tcpip_inpkt+0x78>)
 80080f4:	f009 fe86 	bl	8011e04 <sys_mbox_trypost>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d006      	beq.n	800810c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	2009      	movs	r0, #9
 8008102:	f000 fdd5 	bl	8008cb0 <memp_free>
    return ERR_MEM;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	e000      	b.n	800810e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800810c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20007ba8 	.word	0x20007ba8
 800811c:	08013074 	.word	0x08013074
 8008120:	080130ec 	.word	0x080130ec
 8008124:	080130c4 	.word	0x080130c4

08008128 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008138:	f003 0318 	and.w	r3, r3, #24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008140:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <tcpip_input+0x3c>)
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff ffab 	bl	80080a0 <tcpip_inpkt>
 800814a:	4603      	mov	r3, r0
 800814c:	e005      	b.n	800815a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800814e:	4a06      	ldr	r2, [pc, #24]	@ (8008168 <tcpip_input+0x40>)
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff ffa4 	bl	80080a0 <tcpip_inpkt>
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	08011c25 	.word	0x08011c25
 8008168:	08010b2d 	.word	0x08010b2d

0800816c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008176:	4819      	ldr	r0, [pc, #100]	@ (80081dc <tcpip_try_callback+0x70>)
 8008178:	f009 fe8f 	bl	8011e9a <sys_mbox_valid>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <tcpip_try_callback+0x24>
 8008182:	4b17      	ldr	r3, [pc, #92]	@ (80081e0 <tcpip_try_callback+0x74>)
 8008184:	f240 125d 	movw	r2, #349	@ 0x15d
 8008188:	4916      	ldr	r1, [pc, #88]	@ (80081e4 <tcpip_try_callback+0x78>)
 800818a:	4817      	ldr	r0, [pc, #92]	@ (80081e8 <tcpip_try_callback+0x7c>)
 800818c:	f00a f812 	bl	80121b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008190:	2008      	movs	r0, #8
 8008192:	f000 fd3b 	bl	8008c0c <memp_malloc>
 8008196:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295
 80081a2:	e017      	b.n	80081d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	4808      	ldr	r0, [pc, #32]	@ (80081dc <tcpip_try_callback+0x70>)
 80081ba:	f009 fe23 	bl	8011e04 <sys_mbox_trypost>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	2008      	movs	r0, #8
 80081c8:	f000 fd72 	bl	8008cb0 <memp_free>
    return ERR_MEM;
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	e000      	b.n	80081d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20007ba8 	.word	0x20007ba8
 80081e0:	08013074 	.word	0x08013074
 80081e4:	080130ec 	.word	0x080130ec
 80081e8:	080130c4 	.word	0x080130c4

080081ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80081f6:	f000 f871 	bl	80082dc <lwip_init>

  tcpip_init_done = initfunc;
 80081fa:	4a17      	ldr	r2, [pc, #92]	@ (8008258 <tcpip_init+0x6c>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008200:	4a16      	ldr	r2, [pc, #88]	@ (800825c <tcpip_init+0x70>)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008206:	2106      	movs	r1, #6
 8008208:	4815      	ldr	r0, [pc, #84]	@ (8008260 <tcpip_init+0x74>)
 800820a:	f009 fde1 	bl	8011dd0 <sys_mbox_new>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008214:	4b13      	ldr	r3, [pc, #76]	@ (8008264 <tcpip_init+0x78>)
 8008216:	f240 2261 	movw	r2, #609	@ 0x261
 800821a:	4913      	ldr	r1, [pc, #76]	@ (8008268 <tcpip_init+0x7c>)
 800821c:	4813      	ldr	r0, [pc, #76]	@ (800826c <tcpip_init+0x80>)
 800821e:	f009 ffc9 	bl	80121b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008222:	4813      	ldr	r0, [pc, #76]	@ (8008270 <tcpip_init+0x84>)
 8008224:	f009 fe56 	bl	8011ed4 <sys_mutex_new>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d006      	beq.n	800823c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <tcpip_init+0x78>)
 8008230:	f240 2265 	movw	r2, #613	@ 0x265
 8008234:	490f      	ldr	r1, [pc, #60]	@ (8008274 <tcpip_init+0x88>)
 8008236:	480d      	ldr	r0, [pc, #52]	@ (800826c <tcpip_init+0x80>)
 8008238:	f009 ffbc 	bl	80121b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800823c:	2318      	movs	r3, #24
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008244:	2200      	movs	r2, #0
 8008246:	490c      	ldr	r1, [pc, #48]	@ (8008278 <tcpip_init+0x8c>)
 8008248:	480c      	ldr	r0, [pc, #48]	@ (800827c <tcpip_init+0x90>)
 800824a:	f009 fe75 	bl	8011f38 <sys_thread_new>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20007ba0 	.word	0x20007ba0
 800825c:	20007ba4 	.word	0x20007ba4
 8008260:	20007ba8 	.word	0x20007ba8
 8008264:	08013074 	.word	0x08013074
 8008268:	080130fc 	.word	0x080130fc
 800826c:	080130c4 	.word	0x080130c4
 8008270:	20007bac 	.word	0x20007bac
 8008274:	08013120 	.word	0x08013120
 8008278:	08007fa9 	.word	0x08007fa9
 800827c:	08013144 	.word	0x08013144

08008280 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	b21a      	sxth	r2, r3
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	b29b      	uxth	r3, r3
 8008296:	b21b      	sxth	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b21b      	sxth	r3, r3
 800829c:	b29b      	uxth	r3, r3
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	061a      	lsls	r2, r3, #24
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	0e1b      	lsrs	r3, r3, #24
 80082ce:	4313      	orrs	r3, r2
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80082e6:	f009 fde9 	bl	8011ebc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80082ea:	f000 f8d9 	bl	80084a0 <mem_init>
  memp_init();
 80082ee:	f000 fc41 	bl	8008b74 <memp_init>
  pbuf_init();
  netif_init();
 80082f2:	f000 fd07 	bl	8008d04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80082f6:	f007 f8eb 	bl	800f4d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80082fa:	f001 fe17 	bl	8009f2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80082fe:	f007 f82d 	bl	800f35c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008316:	4b05      	ldr	r3, [pc, #20]	@ (800832c <ptr_to_mem+0x20>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	4413      	add	r3, r2
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	2000be44 	.word	0x2000be44

08008330 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008338:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <mem_to_ptr+0x20>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	b29b      	uxth	r3, r3
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000be44 	.word	0x2000be44

08008354 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800835c:	4b47      	ldr	r3, [pc, #284]	@ (800847c <plug_holes+0x128>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d206      	bcs.n	8008374 <plug_holes+0x20>
 8008366:	4b46      	ldr	r3, [pc, #280]	@ (8008480 <plug_holes+0x12c>)
 8008368:	f240 12df 	movw	r2, #479	@ 0x1df
 800836c:	4945      	ldr	r1, [pc, #276]	@ (8008484 <plug_holes+0x130>)
 800836e:	4846      	ldr	r0, [pc, #280]	@ (8008488 <plug_holes+0x134>)
 8008370:	f009 ff20 	bl	80121b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008374:	4b45      	ldr	r3, [pc, #276]	@ (800848c <plug_holes+0x138>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d306      	bcc.n	800838c <plug_holes+0x38>
 800837e:	4b40      	ldr	r3, [pc, #256]	@ (8008480 <plug_holes+0x12c>)
 8008380:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008384:	4942      	ldr	r1, [pc, #264]	@ (8008490 <plug_holes+0x13c>)
 8008386:	4840      	ldr	r0, [pc, #256]	@ (8008488 <plug_holes+0x134>)
 8008388:	f009 ff14 	bl	80121b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	791b      	ldrb	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d006      	beq.n	80083a2 <plug_holes+0x4e>
 8008394:	4b3a      	ldr	r3, [pc, #232]	@ (8008480 <plug_holes+0x12c>)
 8008396:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800839a:	493e      	ldr	r1, [pc, #248]	@ (8008494 <plug_holes+0x140>)
 800839c:	483a      	ldr	r0, [pc, #232]	@ (8008488 <plug_holes+0x134>)
 800839e:	f009 ff09 	bl	80121b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	f244 2268 	movw	r2, #17000	@ 0x4268
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d906      	bls.n	80083bc <plug_holes+0x68>
 80083ae:	4b34      	ldr	r3, [pc, #208]	@ (8008480 <plug_holes+0x12c>)
 80083b0:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80083b4:	4938      	ldr	r1, [pc, #224]	@ (8008498 <plug_holes+0x144>)
 80083b6:	4834      	ldr	r0, [pc, #208]	@ (8008488 <plug_holes+0x134>)
 80083b8:	f009 fefc 	bl	80121b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff ffa3 	bl	800830c <ptr_to_mem>
 80083c6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d025      	beq.n	800841c <plug_holes+0xc8>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	791b      	ldrb	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d121      	bne.n	800841c <plug_holes+0xc8>
 80083d8:	4b2c      	ldr	r3, [pc, #176]	@ (800848c <plug_holes+0x138>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d01c      	beq.n	800841c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80083e2:	4b2e      	ldr	r3, [pc, #184]	@ (800849c <plug_holes+0x148>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d102      	bne.n	80083f2 <plug_holes+0x9e>
      lfree = mem;
 80083ec:	4a2b      	ldr	r2, [pc, #172]	@ (800849c <plug_holes+0x148>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008402:	4293      	cmp	r3, r2
 8008404:	d00a      	beq.n	800841c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff ff7e 	bl	800830c <ptr_to_mem>
 8008410:	4604      	mov	r4, r0
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff ff8c 	bl	8008330 <mem_to_ptr>
 8008418:	4603      	mov	r3, r0
 800841a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	885b      	ldrh	r3, [r3, #2]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff ff73 	bl	800830c <ptr_to_mem>
 8008426:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d020      	beq.n	8008472 <plug_holes+0x11e>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11c      	bne.n	8008472 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008438:	4b18      	ldr	r3, [pc, #96]	@ (800849c <plug_holes+0x148>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d102      	bne.n	8008448 <plug_holes+0xf4>
      lfree = pmem;
 8008442:	4a16      	ldr	r2, [pc, #88]	@ (800849c <plug_holes+0x148>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	881a      	ldrh	r2, [r3, #0]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008458:	4293      	cmp	r3, r2
 800845a:	d00a      	beq.n	8008472 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff53 	bl	800830c <ptr_to_mem>
 8008466:	4604      	mov	r4, r0
 8008468:	68b8      	ldr	r0, [r7, #8]
 800846a:	f7ff ff61 	bl	8008330 <mem_to_ptr>
 800846e:	4603      	mov	r3, r0
 8008470:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008472:	bf00      	nop
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}
 800847a:	bf00      	nop
 800847c:	2000be44 	.word	0x2000be44
 8008480:	08013154 	.word	0x08013154
 8008484:	08013184 	.word	0x08013184
 8008488:	0801319c 	.word	0x0801319c
 800848c:	2000be48 	.word	0x2000be48
 8008490:	080131c4 	.word	0x080131c4
 8008494:	080131e0 	.word	0x080131e0
 8008498:	080131fc 	.word	0x080131fc
 800849c:	2000be50 	.word	0x2000be50

080084a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80084a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <mem_init+0x84>)
 80084a8:	3303      	adds	r3, #3
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <mem_init+0x88>)
 80084b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80084b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <mem_init+0x88>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f244 2268 	movw	r2, #17000	@ 0x4268
 80084c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80084ce:	f244 2068 	movw	r0, #17000	@ 0x4268
 80084d2:	f7ff ff1b 	bl	800830c <ptr_to_mem>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4a14      	ldr	r2, [pc, #80]	@ (800852c <mem_init+0x8c>)
 80084da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <mem_init+0x8c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2201      	movs	r2, #1
 80084e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80084e4:	4b11      	ldr	r3, [pc, #68]	@ (800852c <mem_init+0x8c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f244 2268 	movw	r2, #17000	@ 0x4268
 80084ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80084ee:	4b0f      	ldr	r3, [pc, #60]	@ (800852c <mem_init+0x8c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f244 2268 	movw	r2, #17000	@ 0x4268
 80084f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <mem_init+0x88>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008530 <mem_init+0x90>)
 80084fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008500:	480c      	ldr	r0, [pc, #48]	@ (8008534 <mem_init+0x94>)
 8008502:	f009 fce7 	bl	8011ed4 <sys_mutex_new>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <mem_init+0x98>)
 800850e:	f240 221f 	movw	r2, #543	@ 0x21f
 8008512:	490a      	ldr	r1, [pc, #40]	@ (800853c <mem_init+0x9c>)
 8008514:	480a      	ldr	r0, [pc, #40]	@ (8008540 <mem_init+0xa0>)
 8008516:	f009 fe4d 	bl	80121b4 <iprintf>
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20007bc8 	.word	0x20007bc8
 8008528:	2000be44 	.word	0x2000be44
 800852c:	2000be48 	.word	0x2000be48
 8008530:	2000be50 	.word	0x2000be50
 8008534:	2000be4c 	.word	0x2000be4c
 8008538:	08013154 	.word	0x08013154
 800853c:	08013228 	.word	0x08013228
 8008540:	0801319c 	.word	0x0801319c

08008544 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff feef 	bl	8008330 <mem_to_ptr>
 8008552:	4603      	mov	r3, r0
 8008554:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fed6 	bl	800830c <ptr_to_mem>
 8008560:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fed0 	bl	800830c <ptr_to_mem>
 800856c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008576:	4293      	cmp	r3, r2
 8008578:	d819      	bhi.n	80085ae <mem_link_valid+0x6a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008582:	4293      	cmp	r3, r2
 8008584:	d813      	bhi.n	80085ae <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800858a:	8afa      	ldrh	r2, [r7, #22]
 800858c:	429a      	cmp	r2, r3
 800858e:	d004      	beq.n	800859a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	8afa      	ldrh	r2, [r7, #22]
 8008596:	429a      	cmp	r2, r3
 8008598:	d109      	bne.n	80085ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800859a:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <mem_link_valid+0x78>)
 800859c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d006      	beq.n	80085b2 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	885b      	ldrh	r3, [r3, #2]
 80085a8:	8afa      	ldrh	r2, [r7, #22]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d001      	beq.n	80085b2 <mem_link_valid+0x6e>
    return 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <mem_link_valid+0x70>
  }
  return 1;
 80085b2:	2301      	movs	r3, #1
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	2000be48 	.word	0x2000be48

080085c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d070      	beq.n	80086b0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00d      	beq.n	80085f4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80085d8:	4b37      	ldr	r3, [pc, #220]	@ (80086b8 <mem_free+0xf8>)
 80085da:	f240 2273 	movw	r2, #627	@ 0x273
 80085de:	4937      	ldr	r1, [pc, #220]	@ (80086bc <mem_free+0xfc>)
 80085e0:	4837      	ldr	r0, [pc, #220]	@ (80086c0 <mem_free+0x100>)
 80085e2:	f009 fde7 	bl	80121b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80085e6:	f009 fcc7 	bl	8011f78 <sys_arch_protect>
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f009 fcd1 	bl	8011f94 <sys_arch_unprotect>
    return;
 80085f2:	e05e      	b.n	80086b2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3b08      	subs	r3, #8
 80085f8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80085fa:	4b32      	ldr	r3, [pc, #200]	@ (80086c4 <mem_free+0x104>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	429a      	cmp	r2, r3
 8008602:	d306      	bcc.n	8008612 <mem_free+0x52>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f103 020c 	add.w	r2, r3, #12
 800860a:	4b2f      	ldr	r3, [pc, #188]	@ (80086c8 <mem_free+0x108>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d90d      	bls.n	800862e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008612:	4b29      	ldr	r3, [pc, #164]	@ (80086b8 <mem_free+0xf8>)
 8008614:	f240 227f 	movw	r2, #639	@ 0x27f
 8008618:	492c      	ldr	r1, [pc, #176]	@ (80086cc <mem_free+0x10c>)
 800861a:	4829      	ldr	r0, [pc, #164]	@ (80086c0 <mem_free+0x100>)
 800861c:	f009 fdca 	bl	80121b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008620:	f009 fcaa 	bl	8011f78 <sys_arch_protect>
 8008624:	6138      	str	r0, [r7, #16]
 8008626:	6938      	ldr	r0, [r7, #16]
 8008628:	f009 fcb4 	bl	8011f94 <sys_arch_unprotect>
    return;
 800862c:	e041      	b.n	80086b2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800862e:	4828      	ldr	r0, [pc, #160]	@ (80086d0 <mem_free+0x110>)
 8008630:	f009 fc66 	bl	8011f00 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	791b      	ldrb	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d110      	bne.n	800865e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800863c:	4b1e      	ldr	r3, [pc, #120]	@ (80086b8 <mem_free+0xf8>)
 800863e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008642:	4924      	ldr	r1, [pc, #144]	@ (80086d4 <mem_free+0x114>)
 8008644:	481e      	ldr	r0, [pc, #120]	@ (80086c0 <mem_free+0x100>)
 8008646:	f009 fdb5 	bl	80121b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800864a:	4821      	ldr	r0, [pc, #132]	@ (80086d0 <mem_free+0x110>)
 800864c:	f009 fc67 	bl	8011f1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008650:	f009 fc92 	bl	8011f78 <sys_arch_protect>
 8008654:	6178      	str	r0, [r7, #20]
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	f009 fc9c 	bl	8011f94 <sys_arch_unprotect>
    return;
 800865c:	e029      	b.n	80086b2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800865e:	69f8      	ldr	r0, [r7, #28]
 8008660:	f7ff ff70 	bl	8008544 <mem_link_valid>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d110      	bne.n	800868c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <mem_free+0xf8>)
 800866c:	f240 2295 	movw	r2, #661	@ 0x295
 8008670:	4919      	ldr	r1, [pc, #100]	@ (80086d8 <mem_free+0x118>)
 8008672:	4813      	ldr	r0, [pc, #76]	@ (80086c0 <mem_free+0x100>)
 8008674:	f009 fd9e 	bl	80121b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008678:	4815      	ldr	r0, [pc, #84]	@ (80086d0 <mem_free+0x110>)
 800867a:	f009 fc50 	bl	8011f1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800867e:	f009 fc7b 	bl	8011f78 <sys_arch_protect>
 8008682:	61b8      	str	r0, [r7, #24]
 8008684:	69b8      	ldr	r0, [r7, #24]
 8008686:	f009 fc85 	bl	8011f94 <sys_arch_unprotect>
    return;
 800868a:	e012      	b.n	80086b2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2200      	movs	r2, #0
 8008690:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008692:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <mem_free+0x11c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	429a      	cmp	r2, r3
 800869a:	d202      	bcs.n	80086a2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800869c:	4a0f      	ldr	r2, [pc, #60]	@ (80086dc <mem_free+0x11c>)
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80086a2:	69f8      	ldr	r0, [r7, #28]
 80086a4:	f7ff fe56 	bl	8008354 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80086a8:	4809      	ldr	r0, [pc, #36]	@ (80086d0 <mem_free+0x110>)
 80086aa:	f009 fc38 	bl	8011f1e <sys_mutex_unlock>
 80086ae:	e000      	b.n	80086b2 <mem_free+0xf2>
    return;
 80086b0:	bf00      	nop
}
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	08013154 	.word	0x08013154
 80086bc:	08013244 	.word	0x08013244
 80086c0:	0801319c 	.word	0x0801319c
 80086c4:	2000be44 	.word	0x2000be44
 80086c8:	2000be48 	.word	0x2000be48
 80086cc:	08013268 	.word	0x08013268
 80086d0:	2000be4c 	.word	0x2000be4c
 80086d4:	08013284 	.word	0x08013284
 80086d8:	080132ac 	.word	0x080132ac
 80086dc:	2000be50 	.word	0x2000be50

080086e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80086ec:	887b      	ldrh	r3, [r7, #2]
 80086ee:	3303      	adds	r3, #3
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80086f8:	8bfb      	ldrh	r3, [r7, #30]
 80086fa:	2b0b      	cmp	r3, #11
 80086fc:	d801      	bhi.n	8008702 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80086fe:	230c      	movs	r3, #12
 8008700:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008702:	8bfb      	ldrh	r3, [r7, #30]
 8008704:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008708:	4293      	cmp	r3, r2
 800870a:	d803      	bhi.n	8008714 <mem_trim+0x34>
 800870c:	8bfa      	ldrh	r2, [r7, #30]
 800870e:	887b      	ldrh	r3, [r7, #2]
 8008710:	429a      	cmp	r2, r3
 8008712:	d201      	bcs.n	8008718 <mem_trim+0x38>
    return NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	e0dc      	b.n	80088d2 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008718:	4b70      	ldr	r3, [pc, #448]	@ (80088dc <mem_trim+0x1fc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d304      	bcc.n	800872c <mem_trim+0x4c>
 8008722:	4b6f      	ldr	r3, [pc, #444]	@ (80088e0 <mem_trim+0x200>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d306      	bcc.n	800873a <mem_trim+0x5a>
 800872c:	4b6d      	ldr	r3, [pc, #436]	@ (80088e4 <mem_trim+0x204>)
 800872e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008732:	496d      	ldr	r1, [pc, #436]	@ (80088e8 <mem_trim+0x208>)
 8008734:	486d      	ldr	r0, [pc, #436]	@ (80088ec <mem_trim+0x20c>)
 8008736:	f009 fd3d 	bl	80121b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800873a:	4b68      	ldr	r3, [pc, #416]	@ (80088dc <mem_trim+0x1fc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d304      	bcc.n	800874e <mem_trim+0x6e>
 8008744:	4b66      	ldr	r3, [pc, #408]	@ (80088e0 <mem_trim+0x200>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d307      	bcc.n	800875e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800874e:	f009 fc13 	bl	8011f78 <sys_arch_protect>
 8008752:	60b8      	str	r0, [r7, #8]
 8008754:	68b8      	ldr	r0, [r7, #8]
 8008756:	f009 fc1d 	bl	8011f94 <sys_arch_unprotect>
    return rmem;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	e0b9      	b.n	80088d2 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3b08      	subs	r3, #8
 8008762:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008764:	69b8      	ldr	r0, [r7, #24]
 8008766:	f7ff fde3 	bl	8008330 <mem_to_ptr>
 800876a:	4603      	mov	r3, r0
 800876c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	881a      	ldrh	r2, [r3, #0]
 8008772:	8afb      	ldrh	r3, [r7, #22]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b08      	subs	r3, #8
 800877a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800877c:	8bfa      	ldrh	r2, [r7, #30]
 800877e:	8abb      	ldrh	r3, [r7, #20]
 8008780:	429a      	cmp	r2, r3
 8008782:	d906      	bls.n	8008792 <mem_trim+0xb2>
 8008784:	4b57      	ldr	r3, [pc, #348]	@ (80088e4 <mem_trim+0x204>)
 8008786:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800878a:	4959      	ldr	r1, [pc, #356]	@ (80088f0 <mem_trim+0x210>)
 800878c:	4857      	ldr	r0, [pc, #348]	@ (80088ec <mem_trim+0x20c>)
 800878e:	f009 fd11 	bl	80121b4 <iprintf>
  if (newsize > size) {
 8008792:	8bfa      	ldrh	r2, [r7, #30]
 8008794:	8abb      	ldrh	r3, [r7, #20]
 8008796:	429a      	cmp	r2, r3
 8008798:	d901      	bls.n	800879e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	e099      	b.n	80088d2 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800879e:	8bfa      	ldrh	r2, [r7, #30]
 80087a0:	8abb      	ldrh	r3, [r7, #20]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d101      	bne.n	80087aa <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	e093      	b.n	80088d2 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80087aa:	4852      	ldr	r0, [pc, #328]	@ (80088f4 <mem_trim+0x214>)
 80087ac:	f009 fba8 	bl	8011f00 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fda9 	bl	800830c <ptr_to_mem>
 80087ba:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	791b      	ldrb	r3, [r3, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d141      	bne.n	8008848 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	f244 2268 	movw	r2, #17000	@ 0x4268
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d106      	bne.n	80087de <mem_trim+0xfe>
 80087d0:	4b44      	ldr	r3, [pc, #272]	@ (80088e4 <mem_trim+0x204>)
 80087d2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80087d6:	4948      	ldr	r1, [pc, #288]	@ (80088f8 <mem_trim+0x218>)
 80087d8:	4844      	ldr	r0, [pc, #272]	@ (80088ec <mem_trim+0x20c>)
 80087da:	f009 fceb 	bl	80121b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80087e4:	8afa      	ldrh	r2, [r7, #22]
 80087e6:	8bfb      	ldrh	r3, [r7, #30]
 80087e8:	4413      	add	r3, r2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3308      	adds	r3, #8
 80087ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80087f0:	4b42      	ldr	r3, [pc, #264]	@ (80088fc <mem_trim+0x21c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d106      	bne.n	8008808 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 80087fa:	89fb      	ldrh	r3, [r7, #14]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fd85 	bl	800830c <ptr_to_mem>
 8008802:	4603      	mov	r3, r0
 8008804:	4a3d      	ldr	r2, [pc, #244]	@ (80088fc <mem_trim+0x21c>)
 8008806:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff fd7e 	bl	800830c <ptr_to_mem>
 8008810:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2200      	movs	r2, #0
 8008816:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	89ba      	ldrh	r2, [r7, #12]
 800881c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	8afa      	ldrh	r2, [r7, #22]
 8008822:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	89fa      	ldrh	r2, [r7, #14]
 8008828:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008832:	4293      	cmp	r3, r2
 8008834:	d049      	beq.n	80088ca <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fd66 	bl	800830c <ptr_to_mem>
 8008840:	4602      	mov	r2, r0
 8008842:	89fb      	ldrh	r3, [r7, #14]
 8008844:	8053      	strh	r3, [r2, #2]
 8008846:	e040      	b.n	80088ca <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008848:	8bfb      	ldrh	r3, [r7, #30]
 800884a:	f103 0214 	add.w	r2, r3, #20
 800884e:	8abb      	ldrh	r3, [r7, #20]
 8008850:	429a      	cmp	r2, r3
 8008852:	d83a      	bhi.n	80088ca <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008854:	8afa      	ldrh	r2, [r7, #22]
 8008856:	8bfb      	ldrh	r3, [r7, #30]
 8008858:	4413      	add	r3, r2
 800885a:	b29b      	uxth	r3, r3
 800885c:	3308      	adds	r3, #8
 800885e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008868:	4293      	cmp	r3, r2
 800886a:	d106      	bne.n	800887a <mem_trim+0x19a>
 800886c:	4b1d      	ldr	r3, [pc, #116]	@ (80088e4 <mem_trim+0x204>)
 800886e:	f240 3216 	movw	r2, #790	@ 0x316
 8008872:	4921      	ldr	r1, [pc, #132]	@ (80088f8 <mem_trim+0x218>)
 8008874:	481d      	ldr	r0, [pc, #116]	@ (80088ec <mem_trim+0x20c>)
 8008876:	f009 fc9d 	bl	80121b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800887a:	89fb      	ldrh	r3, [r7, #14]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fd45 	bl	800830c <ptr_to_mem>
 8008882:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008884:	4b1d      	ldr	r3, [pc, #116]	@ (80088fc <mem_trim+0x21c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	429a      	cmp	r2, r3
 800888c:	d202      	bcs.n	8008894 <mem_trim+0x1b4>
      lfree = mem2;
 800888e:	4a1b      	ldr	r2, [pc, #108]	@ (80088fc <mem_trim+0x21c>)
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2200      	movs	r2, #0
 8008898:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	881a      	ldrh	r2, [r3, #0]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	8afa      	ldrh	r2, [r7, #22]
 80088a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	89fa      	ldrh	r2, [r7, #14]
 80088ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	f244 2268 	movw	r2, #17000	@ 0x4268
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fd24 	bl	800830c <ptr_to_mem>
 80088c4:	4602      	mov	r2, r0
 80088c6:	89fb      	ldrh	r3, [r7, #14]
 80088c8:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80088ca:	480a      	ldr	r0, [pc, #40]	@ (80088f4 <mem_trim+0x214>)
 80088cc:	f009 fb27 	bl	8011f1e <sys_mutex_unlock>
  return rmem;
 80088d0:	687b      	ldr	r3, [r7, #4]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	2000be44 	.word	0x2000be44
 80088e0:	2000be48 	.word	0x2000be48
 80088e4:	08013154 	.word	0x08013154
 80088e8:	080132e0 	.word	0x080132e0
 80088ec:	0801319c 	.word	0x0801319c
 80088f0:	080132f8 	.word	0x080132f8
 80088f4:	2000be4c 	.word	0x2000be4c
 80088f8:	08013318 	.word	0x08013318
 80088fc:	2000be50 	.word	0x2000be50

08008900 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800890a:	88fb      	ldrh	r3, [r7, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <mem_malloc+0x14>
    return NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	e0e6      	b.n	8008ae2 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	3303      	adds	r3, #3
 8008918:	b29b      	uxth	r3, r3
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008920:	8bbb      	ldrh	r3, [r7, #28]
 8008922:	2b0b      	cmp	r3, #11
 8008924:	d801      	bhi.n	800892a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008926:	230c      	movs	r3, #12
 8008928:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800892a:	8bbb      	ldrh	r3, [r7, #28]
 800892c:	f244 2268 	movw	r2, #17000	@ 0x4268
 8008930:	4293      	cmp	r3, r2
 8008932:	d803      	bhi.n	800893c <mem_malloc+0x3c>
 8008934:	8bba      	ldrh	r2, [r7, #28]
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	429a      	cmp	r2, r3
 800893a:	d201      	bcs.n	8008940 <mem_malloc+0x40>
    return NULL;
 800893c:	2300      	movs	r3, #0
 800893e:	e0d0      	b.n	8008ae2 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008940:	486a      	ldr	r0, [pc, #424]	@ (8008aec <mem_malloc+0x1ec>)
 8008942:	f009 fadd 	bl	8011f00 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008946:	4b6a      	ldr	r3, [pc, #424]	@ (8008af0 <mem_malloc+0x1f0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fcf0 	bl	8008330 <mem_to_ptr>
 8008950:	4603      	mov	r3, r0
 8008952:	83fb      	strh	r3, [r7, #30]
 8008954:	e0b9      	b.n	8008aca <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008956:	8bfb      	ldrh	r3, [r7, #30]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fcd7 	bl	800830c <ptr_to_mem>
 800895e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	791b      	ldrb	r3, [r3, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 80a9 	bne.w	8008abc <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	8bfb      	ldrh	r3, [r7, #30]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f1a3 0208 	sub.w	r2, r3, #8
 8008978:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800897a:	429a      	cmp	r2, r3
 800897c:	f0c0 809e 	bcc.w	8008abc <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	f1a3 0208 	sub.w	r2, r3, #8
 800898e:	8bbb      	ldrh	r3, [r7, #28]
 8008990:	3314      	adds	r3, #20
 8008992:	429a      	cmp	r2, r3
 8008994:	d335      	bcc.n	8008a02 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008996:	8bfa      	ldrh	r2, [r7, #30]
 8008998:	8bbb      	ldrh	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	3308      	adds	r3, #8
 80089a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	f244 2268 	movw	r2, #17000	@ 0x4268
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d106      	bne.n	80089ba <mem_malloc+0xba>
 80089ac:	4b51      	ldr	r3, [pc, #324]	@ (8008af4 <mem_malloc+0x1f4>)
 80089ae:	f240 3287 	movw	r2, #903	@ 0x387
 80089b2:	4951      	ldr	r1, [pc, #324]	@ (8008af8 <mem_malloc+0x1f8>)
 80089b4:	4851      	ldr	r0, [pc, #324]	@ (8008afc <mem_malloc+0x1fc>)
 80089b6:	f009 fbfd 	bl	80121b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80089ba:	8a7b      	ldrh	r3, [r7, #18]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff fca5 	bl	800830c <ptr_to_mem>
 80089c2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	881a      	ldrh	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8bfa      	ldrh	r2, [r7, #30]
 80089d6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	8a7a      	ldrh	r2, [r7, #18]
 80089dc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2201      	movs	r2, #1
 80089e2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	f244 2268 	movw	r2, #17000	@ 0x4268
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fc89 	bl	800830c <ptr_to_mem>
 80089fa:	4602      	mov	r2, r0
 80089fc:	8a7b      	ldrh	r3, [r7, #18]
 80089fe:	8053      	strh	r3, [r2, #2]
 8008a00:	e002      	b.n	8008a08 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2201      	movs	r2, #1
 8008a06:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008a08:	4b39      	ldr	r3, [pc, #228]	@ (8008af0 <mem_malloc+0x1f0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d127      	bne.n	8008a62 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8008a12:	4b37      	ldr	r3, [pc, #220]	@ (8008af0 <mem_malloc+0x1f0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008a18:	e005      	b.n	8008a26 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fc74 	bl	800830c <ptr_to_mem>
 8008a24:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	791b      	ldrb	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <mem_malloc+0x138>
 8008a2e:	4b34      	ldr	r3, [pc, #208]	@ (8008b00 <mem_malloc+0x200>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d1f0      	bne.n	8008a1a <mem_malloc+0x11a>
          }
          lfree = cur;
 8008a38:	4a2d      	ldr	r2, [pc, #180]	@ (8008af0 <mem_malloc+0x1f0>)
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8008af0 <mem_malloc+0x1f0>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b2f      	ldr	r3, [pc, #188]	@ (8008b00 <mem_malloc+0x200>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d00b      	beq.n	8008a62 <mem_malloc+0x162>
 8008a4a:	4b29      	ldr	r3, [pc, #164]	@ (8008af0 <mem_malloc+0x1f0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d006      	beq.n	8008a62 <mem_malloc+0x162>
 8008a54:	4b27      	ldr	r3, [pc, #156]	@ (8008af4 <mem_malloc+0x1f4>)
 8008a56:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008a5a:	492a      	ldr	r1, [pc, #168]	@ (8008b04 <mem_malloc+0x204>)
 8008a5c:	4827      	ldr	r0, [pc, #156]	@ (8008afc <mem_malloc+0x1fc>)
 8008a5e:	f009 fba9 	bl	80121b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008a62:	4822      	ldr	r0, [pc, #136]	@ (8008aec <mem_malloc+0x1ec>)
 8008a64:	f009 fa5b 	bl	8011f1e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008a68:	8bba      	ldrh	r2, [r7, #28]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3308      	adds	r3, #8
 8008a70:	4a23      	ldr	r2, [pc, #140]	@ (8008b00 <mem_malloc+0x200>)
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d906      	bls.n	8008a86 <mem_malloc+0x186>
 8008a78:	4b1e      	ldr	r3, [pc, #120]	@ (8008af4 <mem_malloc+0x1f4>)
 8008a7a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008a7e:	4922      	ldr	r1, [pc, #136]	@ (8008b08 <mem_malloc+0x208>)
 8008a80:	481e      	ldr	r0, [pc, #120]	@ (8008afc <mem_malloc+0x1fc>)
 8008a82:	f009 fb97 	bl	80121b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <mem_malloc+0x19e>
 8008a90:	4b18      	ldr	r3, [pc, #96]	@ (8008af4 <mem_malloc+0x1f4>)
 8008a92:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008a96:	491d      	ldr	r1, [pc, #116]	@ (8008b0c <mem_malloc+0x20c>)
 8008a98:	4818      	ldr	r0, [pc, #96]	@ (8008afc <mem_malloc+0x1fc>)
 8008a9a:	f009 fb8b 	bl	80121b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d006      	beq.n	8008ab6 <mem_malloc+0x1b6>
 8008aa8:	4b12      	ldr	r3, [pc, #72]	@ (8008af4 <mem_malloc+0x1f4>)
 8008aaa:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008aae:	4918      	ldr	r1, [pc, #96]	@ (8008b10 <mem_malloc+0x210>)
 8008ab0:	4812      	ldr	r0, [pc, #72]	@ (8008afc <mem_malloc+0x1fc>)
 8008ab2:	f009 fb7f 	bl	80121b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	e012      	b.n	8008ae2 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8008abc:	8bfb      	ldrh	r3, [r7, #30]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fc24 	bl	800830c <ptr_to_mem>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008aca:	8bfa      	ldrh	r2, [r7, #30]
 8008acc:	8bb9      	ldrh	r1, [r7, #28]
 8008ace:	f244 2368 	movw	r3, #17000	@ 0x4268
 8008ad2:	1a5b      	subs	r3, r3, r1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	f4ff af3e 	bcc.w	8008956 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008ada:	4804      	ldr	r0, [pc, #16]	@ (8008aec <mem_malloc+0x1ec>)
 8008adc:	f009 fa1f 	bl	8011f1e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3720      	adds	r7, #32
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000be4c 	.word	0x2000be4c
 8008af0:	2000be50 	.word	0x2000be50
 8008af4:	08013154 	.word	0x08013154
 8008af8:	08013318 	.word	0x08013318
 8008afc:	0801319c 	.word	0x0801319c
 8008b00:	2000be48 	.word	0x2000be48
 8008b04:	0801332c 	.word	0x0801332c
 8008b08:	08013348 	.word	0x08013348
 8008b0c:	08013378 	.word	0x08013378
 8008b10:	080133a8 	.word	0x080133a8

08008b14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	3303      	adds	r3, #3
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e011      	b.n	8008b5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	dbe7      	blt.n	8008b36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	80fb      	strh	r3, [r7, #6]
 8008b7e:	e009      	b.n	8008b94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	4a08      	ldr	r2, [pc, #32]	@ (8008ba4 <memp_init+0x30>)
 8008b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ffc3 	bl	8008b14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	3301      	adds	r3, #1
 8008b92:	80fb      	strh	r3, [r7, #6]
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	2b0c      	cmp	r3, #12
 8008b98:	d9f2      	bls.n	8008b80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	08015bf8 	.word	0x08015bf8

08008ba8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008bb0:	f009 f9e2 	bl	8011f78 <sys_arch_protect>
 8008bb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d015      	beq.n	8008bf0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <do_memp_malloc_pool+0x3e>
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <do_memp_malloc_pool+0x58>)
 8008bda:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008bde:	4909      	ldr	r1, [pc, #36]	@ (8008c04 <do_memp_malloc_pool+0x5c>)
 8008be0:	4809      	ldr	r0, [pc, #36]	@ (8008c08 <do_memp_malloc_pool+0x60>)
 8008be2:	f009 fae7 	bl	80121b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f009 f9d4 	bl	8011f94 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	e003      	b.n	8008bf8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f009 f9cf 	bl	8011f94 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	080133cc 	.word	0x080133cc
 8008c04:	080133fc 	.word	0x080133fc
 8008c08:	08013420 	.word	0x08013420

08008c0c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b0c      	cmp	r3, #12
 8008c1a:	d908      	bls.n	8008c2e <memp_malloc+0x22>
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <memp_malloc+0x3c>)
 8008c1e:	f240 1257 	movw	r2, #343	@ 0x157
 8008c22:	490a      	ldr	r1, [pc, #40]	@ (8008c4c <memp_malloc+0x40>)
 8008c24:	480a      	ldr	r0, [pc, #40]	@ (8008c50 <memp_malloc+0x44>)
 8008c26:	f009 fac5 	bl	80121b4 <iprintf>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e008      	b.n	8008c40 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4a08      	ldr	r2, [pc, #32]	@ (8008c54 <memp_malloc+0x48>)
 8008c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7ff ffb6 	bl	8008ba8 <do_memp_malloc_pool>
 8008c3c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	080133cc 	.word	0x080133cc
 8008c4c:	0801345c 	.word	0x0801345c
 8008c50:	08013420 	.word	0x08013420
 8008c54:	08015bf8 	.word	0x08015bf8

08008c58 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d006      	beq.n	8008c7a <do_memp_free_pool+0x22>
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <do_memp_free_pool+0x4c>)
 8008c6e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008c72:	490d      	ldr	r1, [pc, #52]	@ (8008ca8 <do_memp_free_pool+0x50>)
 8008c74:	480d      	ldr	r0, [pc, #52]	@ (8008cac <do_memp_free_pool+0x54>)
 8008c76:	f009 fa9d 	bl	80121b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008c7e:	f009 f97b 	bl	8011f78 <sys_arch_protect>
 8008c82:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f009 f97c 	bl	8011f94 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008c9c:	bf00      	nop
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	080133cc 	.word	0x080133cc
 8008ca8:	0801347c 	.word	0x0801347c
 8008cac:	08013420 	.word	0x08013420

08008cb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b0c      	cmp	r3, #12
 8008cc0:	d907      	bls.n	8008cd2 <memp_free+0x22>
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <memp_free+0x44>)
 8008cc4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008cc8:	490b      	ldr	r1, [pc, #44]	@ (8008cf8 <memp_free+0x48>)
 8008cca:	480c      	ldr	r0, [pc, #48]	@ (8008cfc <memp_free+0x4c>)
 8008ccc:	f009 fa72 	bl	80121b4 <iprintf>
 8008cd0:	e00c      	b.n	8008cec <memp_free+0x3c>

  if (mem == NULL) {
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	4a09      	ldr	r2, [pc, #36]	@ (8008d00 <memp_free+0x50>)
 8008cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff ffb8 	bl	8008c58 <do_memp_free_pool>
 8008ce8:	e000      	b.n	8008cec <memp_free+0x3c>
    return;
 8008cea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	080133cc 	.word	0x080133cc
 8008cf8:	0801349c 	.word	0x0801349c
 8008cfc:	08013420 	.word	0x08013420
 8008d00:	08015bf8 	.word	0x08015bf8

08008d04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008d08:	bf00      	nop
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <netif_add+0x26>
 8008d28:	4b57      	ldr	r3, [pc, #348]	@ (8008e88 <netif_add+0x174>)
 8008d2a:	f240 1227 	movw	r2, #295	@ 0x127
 8008d2e:	4957      	ldr	r1, [pc, #348]	@ (8008e8c <netif_add+0x178>)
 8008d30:	4857      	ldr	r0, [pc, #348]	@ (8008e90 <netif_add+0x17c>)
 8008d32:	f009 fa3f 	bl	80121b4 <iprintf>
 8008d36:	2300      	movs	r3, #0
 8008d38:	e0a2      	b.n	8008e80 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d108      	bne.n	8008d52 <netif_add+0x3e>
 8008d40:	4b51      	ldr	r3, [pc, #324]	@ (8008e88 <netif_add+0x174>)
 8008d42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008d46:	4953      	ldr	r1, [pc, #332]	@ (8008e94 <netif_add+0x180>)
 8008d48:	4851      	ldr	r0, [pc, #324]	@ (8008e90 <netif_add+0x17c>)
 8008d4a:	f009 fa33 	bl	80121b4 <iprintf>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e096      	b.n	8008e80 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008d58:	4b4f      	ldr	r3, [pc, #316]	@ (8008e98 <netif_add+0x184>)
 8008d5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008d62:	4b4d      	ldr	r3, [pc, #308]	@ (8008e98 <netif_add+0x184>)
 8008d64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008e98 <netif_add+0x184>)
 8008d6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a45      	ldr	r2, [pc, #276]	@ (8008e9c <netif_add+0x188>)
 8008d86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008da2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ea0 <netif_add+0x18c>)
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f913 	bl	8008fe4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	4798      	blx	r3
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <netif_add+0xba>
    return NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e058      	b.n	8008e80 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dd4:	2bff      	cmp	r3, #255	@ 0xff
 8008dd6:	d103      	bne.n	8008de0 <netif_add+0xcc>
        netif->num = 0;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008de4:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea4 <netif_add+0x190>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e02b      	b.n	8008e44 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d106      	bne.n	8008e02 <netif_add+0xee>
 8008df4:	4b24      	ldr	r3, [pc, #144]	@ (8008e88 <netif_add+0x174>)
 8008df6:	f240 128b 	movw	r2, #395	@ 0x18b
 8008dfa:	492b      	ldr	r1, [pc, #172]	@ (8008ea8 <netif_add+0x194>)
 8008dfc:	4824      	ldr	r0, [pc, #144]	@ (8008e90 <netif_add+0x17c>)
 8008dfe:	f009 f9d9 	bl	80121b4 <iprintf>
        num_netifs++;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3301      	adds	r3, #1
 8008e06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2bff      	cmp	r3, #255	@ 0xff
 8008e0c:	dd06      	ble.n	8008e1c <netif_add+0x108>
 8008e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e88 <netif_add+0x174>)
 8008e10:	f240 128d 	movw	r2, #397	@ 0x18d
 8008e14:	4925      	ldr	r1, [pc, #148]	@ (8008eac <netif_add+0x198>)
 8008e16:	481e      	ldr	r0, [pc, #120]	@ (8008e90 <netif_add+0x17c>)
 8008e18:	f009 f9cc 	bl	80121b4 <iprintf>
        if (netif2->num == netif->num) {
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d108      	bne.n	8008e3e <netif_add+0x12a>
          netif->num++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e32:	3301      	adds	r3, #1
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8008e3c:	e005      	b.n	8008e4a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1d0      	bne.n	8008dec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1be      	bne.n	8008dce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e56:	2bfe      	cmp	r3, #254	@ 0xfe
 8008e58:	d103      	bne.n	8008e62 <netif_add+0x14e>
    netif_num = 0;
 8008e5a:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <netif_add+0x18c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e006      	b.n	8008e70 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e68:	3301      	adds	r3, #1
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <netif_add+0x18c>)
 8008e6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008e70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <netif_add+0x190>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008e78:	4a0a      	ldr	r2, [pc, #40]	@ (8008ea4 <netif_add+0x190>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	080134b8 	.word	0x080134b8
 8008e8c:	0801354c 	.word	0x0801354c
 8008e90:	08013508 	.word	0x08013508
 8008e94:	08013568 	.word	0x08013568
 8008e98:	08015c6c 	.word	0x08015c6c
 8008e9c:	080092bf 	.word	0x080092bf
 8008ea0:	2000ef28 	.word	0x2000ef28
 8008ea4:	2000ef20 	.word	0x2000ef20
 8008ea8:	0801358c 	.word	0x0801358c
 8008eac:	080135a0 	.word	0x080135a0

08008eb0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f002 fb7f 	bl	800b5c0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f006 fc8d 	bl	800f7e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <netif_do_set_ipaddr+0x20>
 8008ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f5c <netif_do_set_ipaddr+0x88>)
 8008ee8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8008eec:	491c      	ldr	r1, [pc, #112]	@ (8008f60 <netif_do_set_ipaddr+0x8c>)
 8008eee:	481d      	ldr	r0, [pc, #116]	@ (8008f64 <netif_do_set_ipaddr+0x90>)
 8008ef0:	f009 f960 	bl	80121b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <netif_do_set_ipaddr+0x34>
 8008efa:	4b18      	ldr	r3, [pc, #96]	@ (8008f5c <netif_do_set_ipaddr+0x88>)
 8008efc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8008f00:	4917      	ldr	r1, [pc, #92]	@ (8008f60 <netif_do_set_ipaddr+0x8c>)
 8008f02:	4818      	ldr	r0, [pc, #96]	@ (8008f64 <netif_do_set_ipaddr+0x90>)
 8008f04:	f009 f956 	bl	80121b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d01c      	beq.n	8008f50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008f26:	f107 0314 	add.w	r3, r7, #20
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ffbf 	bl	8008eb0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <netif_do_set_ipaddr+0x6a>
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	e000      	b.n	8008f40 <netif_do_set_ipaddr+0x6c>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008f44:	2101      	movs	r1, #1
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 f8d2 	bl	80090f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e000      	b.n	8008f52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	080134b8 	.word	0x080134b8
 8008f60:	080135d0 	.word	0x080135d0
 8008f64:	08013508 	.word	0x08013508

08008f68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d00a      	beq.n	8008f98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <netif_do_set_netmask+0x26>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	e000      	b.n	8008f90 <netif_do_set_netmask+0x28>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d00a      	beq.n	8008fd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <netif_do_set_gw+0x26>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	e000      	b.n	8008fce <netif_do_set_gw+0x28>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009000:	4b1c      	ldr	r3, [pc, #112]	@ (8009074 <netif_set_addr+0x90>)
 8009002:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800900a:	4b1a      	ldr	r3, [pc, #104]	@ (8009074 <netif_set_addr+0x90>)
 800900c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009014:	4b17      	ldr	r3, [pc, #92]	@ (8009074 <netif_set_addr+0x90>)
 8009016:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <netif_set_addr+0x42>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <netif_set_addr+0x46>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <netif_set_addr+0x48>
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009034:	f107 0310 	add.w	r3, r7, #16
 8009038:	461a      	mov	r2, r3
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff ff49 	bl	8008ed4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff ff8e 	bl	8008f68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff ffa8 	bl	8008fa6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800905c:	f107 0310 	add.w	r3, r7, #16
 8009060:	461a      	mov	r2, r3
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff ff35 	bl	8008ed4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800906a:	bf00      	nop
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	08015c6c 	.word	0x08015c6c

08009078 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009080:	4a04      	ldr	r2, [pc, #16]	@ (8009094 <netif_set_default+0x1c>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	2000ef24 	.word	0x2000ef24

08009098 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d107      	bne.n	80090b6 <netif_set_up+0x1e>
 80090a6:	4b0f      	ldr	r3, [pc, #60]	@ (80090e4 <netif_set_up+0x4c>)
 80090a8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80090ac:	490e      	ldr	r1, [pc, #56]	@ (80090e8 <netif_set_up+0x50>)
 80090ae:	480f      	ldr	r0, [pc, #60]	@ (80090ec <netif_set_up+0x54>)
 80090b0:	f009 f880 	bl	80121b4 <iprintf>
 80090b4:	e013      	b.n	80090de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10c      	bne.n	80090de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80090d6:	2103      	movs	r1, #3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f809 	bl	80090f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	080134b8 	.word	0x080134b8
 80090e8:	08013640 	.word	0x08013640
 80090ec:	08013508 	.word	0x08013508

080090f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <netif_issue_reports+0x20>
 8009102:	4b18      	ldr	r3, [pc, #96]	@ (8009164 <netif_issue_reports+0x74>)
 8009104:	f240 326d 	movw	r2, #877	@ 0x36d
 8009108:	4917      	ldr	r1, [pc, #92]	@ (8009168 <netif_issue_reports+0x78>)
 800910a:	4818      	ldr	r0, [pc, #96]	@ (800916c <netif_issue_reports+0x7c>)
 800910c:	f009 f852 	bl	80121b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01e      	beq.n	800915c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009124:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009128:	2b00      	cmp	r3, #0
 800912a:	d017      	beq.n	800915c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d013      	beq.n	800915e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3304      	adds	r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3304      	adds	r3, #4
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f007 faaf 	bl	80106b8 <etharp_request>
 800915a:	e000      	b.n	800915e <netif_issue_reports+0x6e>
    return;
 800915c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	080134b8 	.word	0x080134b8
 8009168:	0801365c 	.word	0x0801365c
 800916c:	08013508 	.word	0x08013508

08009170 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d107      	bne.n	800918e <netif_set_down+0x1e>
 800917e:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <netif_set_down+0x58>)
 8009180:	f240 329b 	movw	r2, #923	@ 0x39b
 8009184:	4911      	ldr	r1, [pc, #68]	@ (80091cc <netif_set_down+0x5c>)
 8009186:	4812      	ldr	r0, [pc, #72]	@ (80091d0 <netif_set_down+0x60>)
 8009188:	f009 f814 	bl	80121b4 <iprintf>
 800918c:	e019      	b.n	80091c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d012      	beq.n	80091c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091b4:	f003 0308 	and.w	r3, r3, #8
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f006 fe39 	bl	800fe34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	080134b8 	.word	0x080134b8
 80091cc:	08013680 	.word	0x08013680
 80091d0:	08013508 	.word	0x08013508

080091d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d107      	bne.n	80091f2 <netif_set_link_up+0x1e>
 80091e2:	4b13      	ldr	r3, [pc, #76]	@ (8009230 <netif_set_link_up+0x5c>)
 80091e4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80091e8:	4912      	ldr	r1, [pc, #72]	@ (8009234 <netif_set_link_up+0x60>)
 80091ea:	4813      	ldr	r0, [pc, #76]	@ (8009238 <netif_set_link_up+0x64>)
 80091ec:	f008 ffe2 	bl	80121b4 <iprintf>
 80091f0:	e01b      	b.n	800922a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d114      	bne.n	800922a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009206:	f043 0304 	orr.w	r3, r3, #4
 800920a:	b2da      	uxtb	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009212:	2103      	movs	r1, #3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff6b 	bl	80090f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <netif_set_link_up+0x56>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	080134b8 	.word	0x080134b8
 8009234:	080136a0 	.word	0x080136a0
 8009238:	08013508 	.word	0x08013508

0800923c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d107      	bne.n	800925a <netif_set_link_down+0x1e>
 800924a:	4b11      	ldr	r3, [pc, #68]	@ (8009290 <netif_set_link_down+0x54>)
 800924c:	f240 4206 	movw	r2, #1030	@ 0x406
 8009250:	4910      	ldr	r1, [pc, #64]	@ (8009294 <netif_set_link_down+0x58>)
 8009252:	4811      	ldr	r0, [pc, #68]	@ (8009298 <netif_set_link_down+0x5c>)
 8009254:	f008 ffae 	bl	80121b4 <iprintf>
 8009258:	e017      	b.n	800928a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	d010      	beq.n	800928a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800926e:	f023 0304 	bic.w	r3, r3, #4
 8009272:	b2da      	uxtb	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <netif_set_link_down+0x4e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	080134b8 	.word	0x080134b8
 8009294:	080136c4 	.word	0x080136c4
 8009298:	08013508 	.word	0x08013508

0800929c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	61da      	str	r2, [r3, #28]
  }
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80092ca:	f06f 030b 	mvn.w	r3, #11
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d013      	beq.n	8009314 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80092ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009324 <netif_get_by_index+0x48>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e00c      	b.n	800930e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092fa:	3301      	adds	r3, #1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	79fa      	ldrb	r2, [r7, #7]
 8009300:	429a      	cmp	r2, r3
 8009302:	d101      	bne.n	8009308 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	e006      	b.n	8009316 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1ef      	bne.n	80092f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	2000ef20 	.word	0x2000ef20

08009328 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800932e:	f008 fe23 	bl	8011f78 <sys_arch_protect>
 8009332:	6038      	str	r0, [r7, #0]
 8009334:	4b0d      	ldr	r3, [pc, #52]	@ (800936c <pbuf_free_ooseq+0x44>)
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	6838      	ldr	r0, [r7, #0]
 800933c:	f008 fe2a 	bl	8011f94 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009340:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <pbuf_free_ooseq+0x48>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	607b      	str	r3, [r7, #4]
 8009346:	e00a      	b.n	800935e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f002 f973 	bl	800b63c <tcp_free_ooseq>
      return;
 8009356:	e005      	b.n	8009364 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1f1      	bne.n	8009348 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	2000ef29 	.word	0x2000ef29
 8009370:	2000ef38 	.word	0x2000ef38

08009374 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800937c:	f7ff ffd4 	bl	8009328 <pbuf_free_ooseq>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800938e:	f008 fdf3 	bl	8011f78 <sys_arch_protect>
 8009392:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009394:	4b0f      	ldr	r3, [pc, #60]	@ (80093d4 <pbuf_pool_is_empty+0x4c>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800939a:	4b0e      	ldr	r3, [pc, #56]	@ (80093d4 <pbuf_pool_is_empty+0x4c>)
 800939c:	2201      	movs	r2, #1
 800939e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f008 fdf7 	bl	8011f94 <sys_arch_unprotect>

  if (!queued) {
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10f      	bne.n	80093cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80093ac:	2100      	movs	r1, #0
 80093ae:	480a      	ldr	r0, [pc, #40]	@ (80093d8 <pbuf_pool_is_empty+0x50>)
 80093b0:	f7fe fedc 	bl	800816c <tcpip_try_callback>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <pbuf_pool_is_empty+0x44>
 80093ba:	f008 fddd 	bl	8011f78 <sys_arch_protect>
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	4b04      	ldr	r3, [pc, #16]	@ (80093d4 <pbuf_pool_is_empty+0x4c>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f008 fde4 	bl	8011f94 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	2000ef29 	.word	0x2000ef29
 80093d8:	08009375 	.word	0x08009375

080093dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4611      	mov	r1, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	460b      	mov	r3, r1
 80093ec:	80fb      	strh	r3, [r7, #6]
 80093ee:	4613      	mov	r3, r2
 80093f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	88fa      	ldrh	r2, [r7, #6]
 8009402:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	88ba      	ldrh	r2, [r7, #4]
 8009408:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800940a:	8b3b      	ldrh	r3, [r7, #24]
 800940c:	b2da      	uxtb	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	7f3a      	ldrb	r2, [r7, #28]
 8009416:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	73da      	strb	r2, [r3, #15]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08c      	sub	sp, #48	@ 0x30
 8009434:	af02      	add	r7, sp, #8
 8009436:	4603      	mov	r3, r0
 8009438:	71fb      	strb	r3, [r7, #7]
 800943a:	460b      	mov	r3, r1
 800943c:	80bb      	strh	r3, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009446:	887b      	ldrh	r3, [r7, #2]
 8009448:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800944c:	d07f      	beq.n	800954e <pbuf_alloc+0x11e>
 800944e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009452:	f300 80c8 	bgt.w	80095e6 <pbuf_alloc+0x1b6>
 8009456:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800945a:	d010      	beq.n	800947e <pbuf_alloc+0x4e>
 800945c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009460:	f300 80c1 	bgt.w	80095e6 <pbuf_alloc+0x1b6>
 8009464:	2b01      	cmp	r3, #1
 8009466:	d002      	beq.n	800946e <pbuf_alloc+0x3e>
 8009468:	2b41      	cmp	r3, #65	@ 0x41
 800946a:	f040 80bc 	bne.w	80095e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800946e:	887a      	ldrh	r2, [r7, #2]
 8009470:	88bb      	ldrh	r3, [r7, #4]
 8009472:	4619      	mov	r1, r3
 8009474:	2000      	movs	r0, #0
 8009476:	f000 f8d1 	bl	800961c <pbuf_alloc_reference>
 800947a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800947c:	e0bd      	b.n	80095fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009486:	88bb      	ldrh	r3, [r7, #4]
 8009488:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800948a:	200c      	movs	r0, #12
 800948c:	f7ff fbbe 	bl	8008c0c <memp_malloc>
 8009490:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009498:	f7ff ff76 	bl	8009388 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80094a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094a4:	f000 faa8 	bl	80099f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	e0a7      	b.n	80095fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80094ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094ae:	3303      	adds	r3, #3
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f023 0303 	bic.w	r3, r3, #3
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80094bc:	b29b      	uxth	r3, r3
 80094be:	8b7a      	ldrh	r2, [r7, #26]
 80094c0:	4293      	cmp	r3, r2
 80094c2:	bf28      	it	cs
 80094c4:	4613      	movcs	r3, r2
 80094c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80094c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094ca:	3310      	adds	r3, #16
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	3303      	adds	r3, #3
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	4618      	mov	r0, r3
 80094d8:	89f9      	ldrh	r1, [r7, #14]
 80094da:	8b7a      	ldrh	r2, [r7, #26]
 80094dc:	2300      	movs	r3, #0
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	887b      	ldrh	r3, [r7, #2]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	460b      	mov	r3, r1
 80094e6:	4601      	mov	r1, r0
 80094e8:	6938      	ldr	r0, [r7, #16]
 80094ea:	f7ff ff77 	bl	80093dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <pbuf_alloc+0xd8>
 80094fa:	4b42      	ldr	r3, [pc, #264]	@ (8009604 <pbuf_alloc+0x1d4>)
 80094fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009500:	4941      	ldr	r1, [pc, #260]	@ (8009608 <pbuf_alloc+0x1d8>)
 8009502:	4842      	ldr	r0, [pc, #264]	@ (800960c <pbuf_alloc+0x1dc>)
 8009504:	f008 fe56 	bl	80121b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009508:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800950a:	3303      	adds	r3, #3
 800950c:	f023 0303 	bic.w	r3, r3, #3
 8009510:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8009514:	d106      	bne.n	8009524 <pbuf_alloc+0xf4>
 8009516:	4b3b      	ldr	r3, [pc, #236]	@ (8009604 <pbuf_alloc+0x1d4>)
 8009518:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800951c:	493c      	ldr	r1, [pc, #240]	@ (8009610 <pbuf_alloc+0x1e0>)
 800951e:	483b      	ldr	r0, [pc, #236]	@ (800960c <pbuf_alloc+0x1dc>)
 8009520:	f008 fe48 	bl	80121b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
 800952e:	e002      	b.n	8009536 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800953a:	8b7a      	ldrh	r2, [r7, #26]
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009546:	8b7b      	ldrh	r3, [r7, #26]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d19e      	bne.n	800948a <pbuf_alloc+0x5a>
      break;
 800954c:	e055      	b.n	80095fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800954e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009550:	3303      	adds	r3, #3
 8009552:	b29b      	uxth	r3, r3
 8009554:	f023 0303 	bic.w	r3, r3, #3
 8009558:	b29a      	uxth	r2, r3
 800955a:	88bb      	ldrh	r3, [r7, #4]
 800955c:	3303      	adds	r3, #3
 800955e:	b29b      	uxth	r3, r3
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	b29b      	uxth	r3, r3
 8009566:	4413      	add	r3, r2
 8009568:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800956a:	8b3b      	ldrh	r3, [r7, #24]
 800956c:	3310      	adds	r3, #16
 800956e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009570:	8b3a      	ldrh	r2, [r7, #24]
 8009572:	88bb      	ldrh	r3, [r7, #4]
 8009574:	3303      	adds	r3, #3
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	429a      	cmp	r2, r3
 800957c:	d306      	bcc.n	800958c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800957e:	8afa      	ldrh	r2, [r7, #22]
 8009580:	88bb      	ldrh	r3, [r7, #4]
 8009582:	3303      	adds	r3, #3
 8009584:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009588:	429a      	cmp	r2, r3
 800958a:	d201      	bcs.n	8009590 <pbuf_alloc+0x160>
        return NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	e035      	b.n	80095fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009590:	8afb      	ldrh	r3, [r7, #22]
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff f9b4 	bl	8008900 <mem_malloc>
 8009598:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <pbuf_alloc+0x174>
        return NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e02b      	b.n	80095fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80095a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095a6:	3310      	adds	r3, #16
 80095a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095aa:	4413      	add	r3, r2
 80095ac:	3303      	adds	r3, #3
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	4618      	mov	r0, r3
 80095b4:	88b9      	ldrh	r1, [r7, #4]
 80095b6:	88ba      	ldrh	r2, [r7, #4]
 80095b8:	2300      	movs	r3, #0
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	887b      	ldrh	r3, [r7, #2]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	460b      	mov	r3, r1
 80095c2:	4601      	mov	r1, r0
 80095c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095c6:	f7ff ff09 	bl	80093dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d010      	beq.n	80095f8 <pbuf_alloc+0x1c8>
 80095d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009604 <pbuf_alloc+0x1d4>)
 80095d8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80095dc:	490d      	ldr	r1, [pc, #52]	@ (8009614 <pbuf_alloc+0x1e4>)
 80095de:	480b      	ldr	r0, [pc, #44]	@ (800960c <pbuf_alloc+0x1dc>)
 80095e0:	f008 fde8 	bl	80121b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80095e4:	e008      	b.n	80095f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80095e6:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <pbuf_alloc+0x1d4>)
 80095e8:	f240 1227 	movw	r2, #295	@ 0x127
 80095ec:	490a      	ldr	r1, [pc, #40]	@ (8009618 <pbuf_alloc+0x1e8>)
 80095ee:	4807      	ldr	r0, [pc, #28]	@ (800960c <pbuf_alloc+0x1dc>)
 80095f0:	f008 fde0 	bl	80121b4 <iprintf>
      return NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e001      	b.n	80095fc <pbuf_alloc+0x1cc>
      break;
 80095f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3728      	adds	r7, #40	@ 0x28
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	080136e8 	.word	0x080136e8
 8009608:	08013718 	.word	0x08013718
 800960c:	08013748 	.word	0x08013748
 8009610:	08013770 	.word	0x08013770
 8009614:	080137a4 	.word	0x080137a4
 8009618:	080137d0 	.word	0x080137d0

0800961c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af02      	add	r7, sp, #8
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	807b      	strh	r3, [r7, #2]
 8009628:	4613      	mov	r3, r2
 800962a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800962c:	883b      	ldrh	r3, [r7, #0]
 800962e:	2b41      	cmp	r3, #65	@ 0x41
 8009630:	d009      	beq.n	8009646 <pbuf_alloc_reference+0x2a>
 8009632:	883b      	ldrh	r3, [r7, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d006      	beq.n	8009646 <pbuf_alloc_reference+0x2a>
 8009638:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <pbuf_alloc_reference+0x5c>)
 800963a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800963e:	490f      	ldr	r1, [pc, #60]	@ (800967c <pbuf_alloc_reference+0x60>)
 8009640:	480f      	ldr	r0, [pc, #60]	@ (8009680 <pbuf_alloc_reference+0x64>)
 8009642:	f008 fdb7 	bl	80121b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009646:	200b      	movs	r0, #11
 8009648:	f7ff fae0 	bl	8008c0c <memp_malloc>
 800964c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	e00b      	b.n	8009670 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009658:	8879      	ldrh	r1, [r7, #2]
 800965a:	887a      	ldrh	r2, [r7, #2]
 800965c:	2300      	movs	r3, #0
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	883b      	ldrh	r3, [r7, #0]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	460b      	mov	r3, r1
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff feb7 	bl	80093dc <pbuf_init_alloced_pbuf>
  return p;
 800966e:	68fb      	ldr	r3, [r7, #12]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	080136e8 	.word	0x080136e8
 800967c:	080137ec 	.word	0x080137ec
 8009680:	08013748 	.word	0x08013748

08009684 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af02      	add	r7, sp, #8
 800968a:	607b      	str	r3, [r7, #4]
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]
 8009690:	460b      	mov	r3, r1
 8009692:	81bb      	strh	r3, [r7, #12]
 8009694:	4613      	mov	r3, r2
 8009696:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800969c:	8a7b      	ldrh	r3, [r7, #18]
 800969e:	3303      	adds	r3, #3
 80096a0:	f023 0203 	bic.w	r2, r3, #3
 80096a4:	89bb      	ldrh	r3, [r7, #12]
 80096a6:	441a      	add	r2, r3
 80096a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d901      	bls.n	80096b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e018      	b.n	80096e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80096b8:	8a7b      	ldrh	r3, [r7, #18]
 80096ba:	3303      	adds	r3, #3
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	6a3a      	ldr	r2, [r7, #32]
 80096c2:	4413      	add	r3, r2
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	e001      	b.n	80096cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	89b9      	ldrh	r1, [r7, #12]
 80096d0:	89ba      	ldrh	r2, [r7, #12]
 80096d2:	2302      	movs	r3, #2
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	897b      	ldrh	r3, [r7, #10]
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	460b      	mov	r3, r1
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	f7ff fe7d 	bl	80093dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80096e2:	687b      	ldr	r3, [r7, #4]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <pbuf_realloc+0x20>
 80096fe:	4b3a      	ldr	r3, [pc, #232]	@ (80097e8 <pbuf_realloc+0xfc>)
 8009700:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009704:	4939      	ldr	r1, [pc, #228]	@ (80097ec <pbuf_realloc+0x100>)
 8009706:	483a      	ldr	r0, [pc, #232]	@ (80097f0 <pbuf_realloc+0x104>)
 8009708:	f008 fd54 	bl	80121b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	887a      	ldrh	r2, [r7, #2]
 8009712:	429a      	cmp	r2, r3
 8009714:	d263      	bcs.n	80097de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	891a      	ldrh	r2, [r3, #8]
 800971a:	887b      	ldrh	r3, [r7, #2]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	817b      	strh	r3, [r7, #10]
  q = p;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009728:	e018      	b.n	800975c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	895b      	ldrh	r3, [r3, #10]
 800972e:	897a      	ldrh	r2, [r7, #10]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	891a      	ldrh	r2, [r3, #8]
 8009738:	893b      	ldrh	r3, [r7, #8]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <pbuf_realloc+0x70>
 800974e:	4b26      	ldr	r3, [pc, #152]	@ (80097e8 <pbuf_realloc+0xfc>)
 8009750:	f240 12af 	movw	r2, #431	@ 0x1af
 8009754:	4927      	ldr	r1, [pc, #156]	@ (80097f4 <pbuf_realloc+0x108>)
 8009756:	4826      	ldr	r0, [pc, #152]	@ (80097f0 <pbuf_realloc+0x104>)
 8009758:	f008 fd2c 	bl	80121b4 <iprintf>
  while (rem_len > q->len) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	895b      	ldrh	r3, [r3, #10]
 8009760:	897a      	ldrh	r2, [r7, #10]
 8009762:	429a      	cmp	r2, r3
 8009764:	d8e1      	bhi.n	800972a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	7b1b      	ldrb	r3, [r3, #12]
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	2b00      	cmp	r3, #0
 8009770:	d121      	bne.n	80097b6 <pbuf_realloc+0xca>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	895b      	ldrh	r3, [r3, #10]
 8009776:	897a      	ldrh	r2, [r7, #10]
 8009778:	429a      	cmp	r2, r3
 800977a:	d01c      	beq.n	80097b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	7b5b      	ldrb	r3, [r3, #13]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d116      	bne.n	80097b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	b29a      	uxth	r2, r3
 8009792:	897b      	ldrh	r3, [r7, #10]
 8009794:	4413      	add	r3, r2
 8009796:	b29b      	uxth	r3, r3
 8009798:	4619      	mov	r1, r3
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7fe ffa0 	bl	80086e0 <mem_trim>
 80097a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <pbuf_realloc+0xca>
 80097a8:	4b0f      	ldr	r3, [pc, #60]	@ (80097e8 <pbuf_realloc+0xfc>)
 80097aa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80097ae:	4912      	ldr	r1, [pc, #72]	@ (80097f8 <pbuf_realloc+0x10c>)
 80097b0:	480f      	ldr	r0, [pc, #60]	@ (80097f0 <pbuf_realloc+0x104>)
 80097b2:	f008 fcff 	bl	80121b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	897a      	ldrh	r2, [r7, #10]
 80097ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	895a      	ldrh	r2, [r3, #10]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f911 	bl	80099f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e000      	b.n	80097e0 <pbuf_realloc+0xf4>
    return;
 80097de:	bf00      	nop

}
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	080136e8 	.word	0x080136e8
 80097ec:	08013800 	.word	0x08013800
 80097f0:	08013748 	.word	0x08013748
 80097f4:	08013818 	.word	0x08013818
 80097f8:	08013830 	.word	0x08013830

080097fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <pbuf_add_header_impl+0x22>
 8009810:	4b2b      	ldr	r3, [pc, #172]	@ (80098c0 <pbuf_add_header_impl+0xc4>)
 8009812:	f240 12df 	movw	r2, #479	@ 0x1df
 8009816:	492b      	ldr	r1, [pc, #172]	@ (80098c4 <pbuf_add_header_impl+0xc8>)
 8009818:	482b      	ldr	r0, [pc, #172]	@ (80098c8 <pbuf_add_header_impl+0xcc>)
 800981a:	f008 fccb 	bl	80121b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <pbuf_add_header_impl+0x30>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982a:	d301      	bcc.n	8009830 <pbuf_add_header_impl+0x34>
    return 1;
 800982c:	2301      	movs	r3, #1
 800982e:	e043      	b.n	80098b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <pbuf_add_header_impl+0x3e>
    return 0;
 8009836:	2300      	movs	r3, #0
 8009838:	e03e      	b.n	80098b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	891a      	ldrh	r2, [r3, #8]
 8009842:	8a7b      	ldrh	r3, [r7, #18]
 8009844:	4413      	add	r3, r2
 8009846:	b29b      	uxth	r3, r3
 8009848:	8a7a      	ldrh	r2, [r7, #18]
 800984a:	429a      	cmp	r2, r3
 800984c:	d901      	bls.n	8009852 <pbuf_add_header_impl+0x56>
    return 1;
 800984e:	2301      	movs	r3, #1
 8009850:	e032      	b.n	80098b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	7b1b      	ldrb	r3, [r3, #12]
 8009856:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009858:	8a3b      	ldrh	r3, [r7, #16]
 800985a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00c      	beq.n	800987c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	425b      	negs	r3, r3
 800986a:	4413      	add	r3, r2
 800986c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3310      	adds	r3, #16
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	429a      	cmp	r2, r3
 8009876:	d20d      	bcs.n	8009894 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009878:	2301      	movs	r3, #1
 800987a:	e01d      	b.n	80098b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d006      	beq.n	8009890 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	425b      	negs	r3, r3
 800988a:	4413      	add	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	e001      	b.n	8009894 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009890:	2301      	movs	r3, #1
 8009892:	e011      	b.n	80098b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	895a      	ldrh	r2, [r3, #10]
 800989e:	8a7b      	ldrh	r3, [r7, #18]
 80098a0:	4413      	add	r3, r2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	891a      	ldrh	r2, [r3, #8]
 80098ac:	8a7b      	ldrh	r3, [r7, #18]
 80098ae:	4413      	add	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	080136e8 	.word	0x080136e8
 80098c4:	0801384c 	.word	0x0801384c
 80098c8:	08013748 	.word	0x08013748

080098cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80098d6:	2200      	movs	r2, #0
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff ff8e 	bl	80097fc <pbuf_add_header_impl>
 80098e0:	4603      	mov	r3, r0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <pbuf_remove_header+0x1e>
 80098fc:	4b20      	ldr	r3, [pc, #128]	@ (8009980 <pbuf_remove_header+0x94>)
 80098fe:	f240 224b 	movw	r2, #587	@ 0x24b
 8009902:	4920      	ldr	r1, [pc, #128]	@ (8009984 <pbuf_remove_header+0x98>)
 8009904:	4820      	ldr	r0, [pc, #128]	@ (8009988 <pbuf_remove_header+0x9c>)
 8009906:	f008 fc55 	bl	80121b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <pbuf_remove_header+0x2c>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009916:	d301      	bcc.n	800991c <pbuf_remove_header+0x30>
    return 1;
 8009918:	2301      	movs	r3, #1
 800991a:	e02c      	b.n	8009976 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <pbuf_remove_header+0x3a>
    return 0;
 8009922:	2300      	movs	r3, #0
 8009924:	e027      	b.n	8009976 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	895b      	ldrh	r3, [r3, #10]
 800992e:	89fa      	ldrh	r2, [r7, #14]
 8009930:	429a      	cmp	r2, r3
 8009932:	d908      	bls.n	8009946 <pbuf_remove_header+0x5a>
 8009934:	4b12      	ldr	r3, [pc, #72]	@ (8009980 <pbuf_remove_header+0x94>)
 8009936:	f240 2255 	movw	r2, #597	@ 0x255
 800993a:	4914      	ldr	r1, [pc, #80]	@ (800998c <pbuf_remove_header+0xa0>)
 800993c:	4812      	ldr	r0, [pc, #72]	@ (8009988 <pbuf_remove_header+0x9c>)
 800993e:	f008 fc39 	bl	80121b4 <iprintf>
 8009942:	2301      	movs	r3, #1
 8009944:	e017      	b.n	8009976 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	441a      	add	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	895a      	ldrh	r2, [r3, #10]
 800995c:	89fb      	ldrh	r3, [r7, #14]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	891a      	ldrh	r2, [r3, #8]
 800996a:	89fb      	ldrh	r3, [r7, #14]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	b29a      	uxth	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	080136e8 	.word	0x080136e8
 8009984:	0801384c 	.word	0x0801384c
 8009988:	08013748 	.word	0x08013748
 800998c:	08013858 	.word	0x08013858

08009990 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	807b      	strh	r3, [r7, #2]
 800999c:	4613      	mov	r3, r2
 800999e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80099a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da08      	bge.n	80099ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80099a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099ac:	425b      	negs	r3, r3
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff ff9b 	bl	80098ec <pbuf_remove_header>
 80099b6:	4603      	mov	r3, r0
 80099b8:	e007      	b.n	80099ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80099ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099be:	787a      	ldrb	r2, [r7, #1]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff ff1a 	bl	80097fc <pbuf_add_header_impl>
 80099c8:	4603      	mov	r3, r0
  }
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80099de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099e2:	2201      	movs	r2, #1
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff ffd2 	bl	8009990 <pbuf_header_impl>
 80099ec:	4603      	mov	r3, r0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <pbuf_free+0x22>
 8009a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8009afc <pbuf_free+0x104>)
 8009a0e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009a12:	493b      	ldr	r1, [pc, #236]	@ (8009b00 <pbuf_free+0x108>)
 8009a14:	483b      	ldr	r0, [pc, #236]	@ (8009b04 <pbuf_free+0x10c>)
 8009a16:	f008 fbcd 	bl	80121b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e069      	b.n	8009af2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009a22:	e062      	b.n	8009aea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009a24:	f008 faa8 	bl	8011f78 <sys_arch_protect>
 8009a28:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7b9b      	ldrb	r3, [r3, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <pbuf_free+0x48>
 8009a32:	4b32      	ldr	r3, [pc, #200]	@ (8009afc <pbuf_free+0x104>)
 8009a34:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009a38:	4933      	ldr	r1, [pc, #204]	@ (8009b08 <pbuf_free+0x110>)
 8009a3a:	4832      	ldr	r0, [pc, #200]	@ (8009b04 <pbuf_free+0x10c>)
 8009a3c:	f008 fbba 	bl	80121b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7b9b      	ldrb	r3, [r3, #14]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	739a      	strb	r2, [r3, #14]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	7b9b      	ldrb	r3, [r3, #14]
 8009a50:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009a52:	69b8      	ldr	r0, [r7, #24]
 8009a54:	f008 fa9e 	bl	8011f94 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d143      	bne.n	8009ae6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7b1b      	ldrb	r3, [r3, #12]
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7b5b      	ldrb	r3, [r3, #13]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d011      	beq.n	8009a9e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <pbuf_free+0x9c>
 8009a86:	4b1d      	ldr	r3, [pc, #116]	@ (8009afc <pbuf_free+0x104>)
 8009a88:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009a8c:	491f      	ldr	r1, [pc, #124]	@ (8009b0c <pbuf_free+0x114>)
 8009a8e:	481d      	ldr	r0, [pc, #116]	@ (8009b04 <pbuf_free+0x10c>)
 8009a90:	f008 fb90 	bl	80121b4 <iprintf>
        pc->custom_free_function(p);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
 8009a9c:	e01d      	b.n	8009ada <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d104      	bne.n	8009aae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	200c      	movs	r0, #12
 8009aa8:	f7ff f902 	bl	8008cb0 <memp_free>
 8009aac:	e015      	b.n	8009ada <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d104      	bne.n	8009abe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	200b      	movs	r0, #11
 8009ab8:	f7ff f8fa 	bl	8008cb0 <memp_free>
 8009abc:	e00d      	b.n	8009ada <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <pbuf_free+0xd4>
          mem_free(p);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fe fd7b 	bl	80085c0 <mem_free>
 8009aca:	e006      	b.n	8009ada <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009acc:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <pbuf_free+0x104>)
 8009ace:	f240 320f 	movw	r2, #783	@ 0x30f
 8009ad2:	490f      	ldr	r1, [pc, #60]	@ (8009b10 <pbuf_free+0x118>)
 8009ad4:	480b      	ldr	r0, [pc, #44]	@ (8009b04 <pbuf_free+0x10c>)
 8009ad6:	f008 fb6d 	bl	80121b4 <iprintf>
        }
      }
      count++;
 8009ada:	7ffb      	ldrb	r3, [r7, #31]
 8009adc:	3301      	adds	r3, #1
 8009ade:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	e001      	b.n	8009aea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d199      	bne.n	8009a24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3720      	adds	r7, #32
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	080136e8 	.word	0x080136e8
 8009b00:	0801384c 	.word	0x0801384c
 8009b04:	08013748 	.word	0x08013748
 8009b08:	08013878 	.word	0x08013878
 8009b0c:	08013890 	.word	0x08013890
 8009b10:	080138b4 	.word	0x080138b4

08009b14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009b20:	e005      	b.n	8009b2e <pbuf_clen+0x1a>
    ++len;
 8009b22:	89fb      	ldrh	r3, [r7, #14]
 8009b24:	3301      	adds	r3, #1
 8009b26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f6      	bne.n	8009b22 <pbuf_clen+0xe>
  }
  return len;
 8009b34:	89fb      	ldrh	r3, [r7, #14]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
	...

08009b44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d016      	beq.n	8009b80 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009b52:	f008 fa11 	bl	8011f78 <sys_arch_protect>
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7b9b      	ldrb	r3, [r3, #14]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	739a      	strb	r2, [r3, #14]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f008 fa15 	bl	8011f94 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7b9b      	ldrb	r3, [r3, #14]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <pbuf_ref+0x3c>
 8009b72:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <pbuf_ref+0x44>)
 8009b74:	f240 3242 	movw	r2, #834	@ 0x342
 8009b78:	4904      	ldr	r1, [pc, #16]	@ (8009b8c <pbuf_ref+0x48>)
 8009b7a:	4805      	ldr	r0, [pc, #20]	@ (8009b90 <pbuf_ref+0x4c>)
 8009b7c:	f008 fb1a 	bl	80121b4 <iprintf>
  }
}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	080136e8 	.word	0x080136e8
 8009b8c:	080138c8 	.word	0x080138c8
 8009b90:	08013748 	.word	0x08013748

08009b94 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <pbuf_cat+0x16>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d107      	bne.n	8009bba <pbuf_cat+0x26>
 8009baa:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <pbuf_cat+0x98>)
 8009bac:	f240 3259 	movw	r2, #857	@ 0x359
 8009bb0:	491f      	ldr	r1, [pc, #124]	@ (8009c30 <pbuf_cat+0x9c>)
 8009bb2:	4820      	ldr	r0, [pc, #128]	@ (8009c34 <pbuf_cat+0xa0>)
 8009bb4:	f008 fafe 	bl	80121b4 <iprintf>
 8009bb8:	e034      	b.n	8009c24 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e00a      	b.n	8009bd6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	891a      	ldrh	r2, [r3, #8]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	891b      	ldrh	r3, [r3, #8]
 8009bc8:	4413      	add	r3, r2
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1f0      	bne.n	8009bc0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	891a      	ldrh	r2, [r3, #8]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	895b      	ldrh	r3, [r3, #10]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d006      	beq.n	8009bf8 <pbuf_cat+0x64>
 8009bea:	4b10      	ldr	r3, [pc, #64]	@ (8009c2c <pbuf_cat+0x98>)
 8009bec:	f240 3262 	movw	r2, #866	@ 0x362
 8009bf0:	4911      	ldr	r1, [pc, #68]	@ (8009c38 <pbuf_cat+0xa4>)
 8009bf2:	4810      	ldr	r0, [pc, #64]	@ (8009c34 <pbuf_cat+0xa0>)
 8009bf4:	f008 fade 	bl	80121b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <pbuf_cat+0x7a>
 8009c00:	4b0a      	ldr	r3, [pc, #40]	@ (8009c2c <pbuf_cat+0x98>)
 8009c02:	f240 3263 	movw	r2, #867	@ 0x363
 8009c06:	490d      	ldr	r1, [pc, #52]	@ (8009c3c <pbuf_cat+0xa8>)
 8009c08:	480a      	ldr	r0, [pc, #40]	@ (8009c34 <pbuf_cat+0xa0>)
 8009c0a:	f008 fad3 	bl	80121b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	891a      	ldrh	r2, [r3, #8]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	891b      	ldrh	r3, [r3, #8]
 8009c16:	4413      	add	r3, r2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	080136e8 	.word	0x080136e8
 8009c30:	080138dc 	.word	0x080138dc
 8009c34:	08013748 	.word	0x08013748
 8009c38:	08013914 	.word	0x08013914
 8009c3c:	08013944 	.word	0x08013944

08009c40 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d008      	beq.n	8009c6a <pbuf_copy+0x2a>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <pbuf_copy+0x2a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	891a      	ldrh	r2, [r3, #8]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	891b      	ldrh	r3, [r3, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d209      	bcs.n	8009c7e <pbuf_copy+0x3e>
 8009c6a:	4b57      	ldr	r3, [pc, #348]	@ (8009dc8 <pbuf_copy+0x188>)
 8009c6c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009c70:	4956      	ldr	r1, [pc, #344]	@ (8009dcc <pbuf_copy+0x18c>)
 8009c72:	4857      	ldr	r0, [pc, #348]	@ (8009dd0 <pbuf_copy+0x190>)
 8009c74:	f008 fa9e 	bl	80121b4 <iprintf>
 8009c78:	f06f 030f 	mvn.w	r3, #15
 8009c7c:	e09f      	b.n	8009dbe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	895b      	ldrh	r3, [r3, #10]
 8009c82:	461a      	mov	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	895b      	ldrh	r3, [r3, #10]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	1acb      	subs	r3, r1, r3
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d306      	bcc.n	8009ca4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	895b      	ldrh	r3, [r3, #10]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	e005      	b.n	8009cb0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	895b      	ldrh	r3, [r3, #10]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	18d0      	adds	r0, r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f008 fb51 	bl	801236a <memcpy>
    offset_to += len;
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	895b      	ldrh	r3, [r3, #10]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d906      	bls.n	8009cf2 <pbuf_copy+0xb2>
 8009ce4:	4b38      	ldr	r3, [pc, #224]	@ (8009dc8 <pbuf_copy+0x188>)
 8009ce6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8009cea:	493a      	ldr	r1, [pc, #232]	@ (8009dd4 <pbuf_copy+0x194>)
 8009cec:	4838      	ldr	r0, [pc, #224]	@ (8009dd0 <pbuf_copy+0x190>)
 8009cee:	f008 fa61 	bl	80121b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	895b      	ldrh	r3, [r3, #10]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d906      	bls.n	8009d0c <pbuf_copy+0xcc>
 8009cfe:	4b32      	ldr	r3, [pc, #200]	@ (8009dc8 <pbuf_copy+0x188>)
 8009d00:	f240 32da 	movw	r2, #986	@ 0x3da
 8009d04:	4934      	ldr	r1, [pc, #208]	@ (8009dd8 <pbuf_copy+0x198>)
 8009d06:	4832      	ldr	r0, [pc, #200]	@ (8009dd0 <pbuf_copy+0x190>)
 8009d08:	f008 fa54 	bl	80121b4 <iprintf>
    if (offset_from >= p_from->len) {
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	895b      	ldrh	r3, [r3, #10]
 8009d10:	461a      	mov	r2, r3
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d304      	bcc.n	8009d22 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	895b      	ldrh	r3, [r3, #10]
 8009d26:	461a      	mov	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d114      	bne.n	8009d58 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10c      	bne.n	8009d58 <pbuf_copy+0x118>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d009      	beq.n	8009d58 <pbuf_copy+0x118>
 8009d44:	4b20      	ldr	r3, [pc, #128]	@ (8009dc8 <pbuf_copy+0x188>)
 8009d46:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009d4a:	4924      	ldr	r1, [pc, #144]	@ (8009ddc <pbuf_copy+0x19c>)
 8009d4c:	4820      	ldr	r0, [pc, #128]	@ (8009dd0 <pbuf_copy+0x190>)
 8009d4e:	f008 fa31 	bl	80121b4 <iprintf>
 8009d52:	f06f 030f 	mvn.w	r3, #15
 8009d56:	e032      	b.n	8009dbe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d013      	beq.n	8009d86 <pbuf_copy+0x146>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	895a      	ldrh	r2, [r3, #10]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	891b      	ldrh	r3, [r3, #8]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d10d      	bne.n	8009d86 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <pbuf_copy+0x146>
 8009d72:	4b15      	ldr	r3, [pc, #84]	@ (8009dc8 <pbuf_copy+0x188>)
 8009d74:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009d78:	4919      	ldr	r1, [pc, #100]	@ (8009de0 <pbuf_copy+0x1a0>)
 8009d7a:	4815      	ldr	r0, [pc, #84]	@ (8009dd0 <pbuf_copy+0x190>)
 8009d7c:	f008 fa1a 	bl	80121b4 <iprintf>
 8009d80:	f06f 0305 	mvn.w	r3, #5
 8009d84:	e01b      	b.n	8009dbe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d013      	beq.n	8009db4 <pbuf_copy+0x174>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	895a      	ldrh	r2, [r3, #10]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	891b      	ldrh	r3, [r3, #8]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d10d      	bne.n	8009db4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d009      	beq.n	8009db4 <pbuf_copy+0x174>
 8009da0:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <pbuf_copy+0x188>)
 8009da2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009da6:	490e      	ldr	r1, [pc, #56]	@ (8009de0 <pbuf_copy+0x1a0>)
 8009da8:	4809      	ldr	r0, [pc, #36]	@ (8009dd0 <pbuf_copy+0x190>)
 8009daa:	f008 fa03 	bl	80121b4 <iprintf>
 8009dae:	f06f 0305 	mvn.w	r3, #5
 8009db2:	e004      	b.n	8009dbe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f47f af61 	bne.w	8009c7e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	080136e8 	.word	0x080136e8
 8009dcc:	08013990 	.word	0x08013990
 8009dd0:	08013748 	.word	0x08013748
 8009dd4:	080139c0 	.word	0x080139c0
 8009dd8:	080139d8 	.word	0x080139d8
 8009ddc:	080139f4 	.word	0x080139f4
 8009de0:	08013a04 	.word	0x08013a04

08009de4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4611      	mov	r1, r2
 8009df0:	461a      	mov	r2, r3
 8009df2:	460b      	mov	r3, r1
 8009df4:	80fb      	strh	r3, [r7, #6]
 8009df6:	4613      	mov	r3, r2
 8009df8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d108      	bne.n	8009e1a <pbuf_copy_partial+0x36>
 8009e08:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb8 <pbuf_copy_partial+0xd4>)
 8009e0a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009e0e:	492b      	ldr	r1, [pc, #172]	@ (8009ebc <pbuf_copy_partial+0xd8>)
 8009e10:	482b      	ldr	r0, [pc, #172]	@ (8009ec0 <pbuf_copy_partial+0xdc>)
 8009e12:	f008 f9cf 	bl	80121b4 <iprintf>
 8009e16:	2300      	movs	r3, #0
 8009e18:	e04a      	b.n	8009eb0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d108      	bne.n	8009e32 <pbuf_copy_partial+0x4e>
 8009e20:	4b25      	ldr	r3, [pc, #148]	@ (8009eb8 <pbuf_copy_partial+0xd4>)
 8009e22:	f240 420b 	movw	r2, #1035	@ 0x40b
 8009e26:	4927      	ldr	r1, [pc, #156]	@ (8009ec4 <pbuf_copy_partial+0xe0>)
 8009e28:	4825      	ldr	r0, [pc, #148]	@ (8009ec0 <pbuf_copy_partial+0xdc>)
 8009e2a:	f008 f9c3 	bl	80121b4 <iprintf>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e03e      	b.n	8009eb0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	e034      	b.n	8009ea2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009e38:	88bb      	ldrh	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <pbuf_copy_partial+0x70>
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	895b      	ldrh	r3, [r3, #10]
 8009e42:	88ba      	ldrh	r2, [r7, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d305      	bcc.n	8009e54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	895b      	ldrh	r3, [r3, #10]
 8009e4c:	88ba      	ldrh	r2, [r7, #4]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	80bb      	strh	r3, [r7, #4]
 8009e52:	e023      	b.n	8009e9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	895a      	ldrh	r2, [r3, #10]
 8009e58:	88bb      	ldrh	r3, [r7, #4]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009e5e:	8b3a      	ldrh	r2, [r7, #24]
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d901      	bls.n	8009e6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009e6a:	8b7b      	ldrh	r3, [r7, #26]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	18d0      	adds	r0, r2, r3
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	88bb      	ldrh	r3, [r7, #4]
 8009e76:	4413      	add	r3, r2
 8009e78:	8b3a      	ldrh	r2, [r7, #24]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f008 fa75 	bl	801236a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009e80:	8afa      	ldrh	r2, [r7, #22]
 8009e82:	8b3b      	ldrh	r3, [r7, #24]
 8009e84:	4413      	add	r3, r2
 8009e86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009e88:	8b7a      	ldrh	r2, [r7, #26]
 8009e8a:	8b3b      	ldrh	r3, [r7, #24]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009e90:	88fa      	ldrh	r2, [r7, #6]
 8009e92:	8b3b      	ldrh	r3, [r7, #24]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <pbuf_copy_partial+0xca>
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1c4      	bne.n	8009e38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009eae:	8afb      	ldrh	r3, [r7, #22]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	080136e8 	.word	0x080136e8
 8009ebc:	08013a30 	.word	0x08013a30
 8009ec0:	08013748 	.word	0x08013748
 8009ec4:	08013a50 	.word	0x08013a50

08009ec8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	603a      	str	r2, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	8919      	ldrh	r1, [r3, #8]
 8009edc:	88ba      	ldrh	r2, [r7, #4]
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff faa5 	bl	8009430 <pbuf_alloc>
 8009ee6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <pbuf_clone+0x2a>
    return NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e011      	b.n	8009f16 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7ff fea3 	bl	8009c40 <pbuf_copy>
 8009efa:	4603      	mov	r3, r0
 8009efc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009efe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <pbuf_clone+0x4c>
 8009f06:	4b06      	ldr	r3, [pc, #24]	@ (8009f20 <pbuf_clone+0x58>)
 8009f08:	f240 5224 	movw	r2, #1316	@ 0x524
 8009f0c:	4905      	ldr	r1, [pc, #20]	@ (8009f24 <pbuf_clone+0x5c>)
 8009f0e:	4806      	ldr	r0, [pc, #24]	@ (8009f28 <pbuf_clone+0x60>)
 8009f10:	f008 f950 	bl	80121b4 <iprintf>
  return q;
 8009f14:	68fb      	ldr	r3, [r7, #12]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	080136e8 	.word	0x080136e8
 8009f24:	08013b5c 	.word	0x08013b5c
 8009f28:	08013748 	.word	0x08013748

08009f2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009f30:	f008 f840 	bl	8011fb4 <rand>
 8009f34:	4603      	mov	r3, r0
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	4b01      	ldr	r3, [pc, #4]	@ (8009f4c <tcp_init+0x20>)
 8009f46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009f48:	bf00      	nop
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000010 	.word	0x20000010

08009f50 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d105      	bne.n	8009f6c <tcp_free+0x1c>
 8009f60:	4b06      	ldr	r3, [pc, #24]	@ (8009f7c <tcp_free+0x2c>)
 8009f62:	22d4      	movs	r2, #212	@ 0xd4
 8009f64:	4906      	ldr	r1, [pc, #24]	@ (8009f80 <tcp_free+0x30>)
 8009f66:	4807      	ldr	r0, [pc, #28]	@ (8009f84 <tcp_free+0x34>)
 8009f68:	f008 f924 	bl	80121b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	2001      	movs	r0, #1
 8009f70:	f7fe fe9e 	bl	8008cb0 <memp_free>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	08013be8 	.word	0x08013be8
 8009f80:	08013c18 	.word	0x08013c18
 8009f84:	08013c2c 	.word	0x08013c2c

08009f88 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7d1b      	ldrb	r3, [r3, #20]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d105      	bne.n	8009fa4 <tcp_free_listen+0x1c>
 8009f98:	4b06      	ldr	r3, [pc, #24]	@ (8009fb4 <tcp_free_listen+0x2c>)
 8009f9a:	22df      	movs	r2, #223	@ 0xdf
 8009f9c:	4906      	ldr	r1, [pc, #24]	@ (8009fb8 <tcp_free_listen+0x30>)
 8009f9e:	4807      	ldr	r0, [pc, #28]	@ (8009fbc <tcp_free_listen+0x34>)
 8009fa0:	f008 f908 	bl	80121b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	2002      	movs	r0, #2
 8009fa8:	f7fe fe82 	bl	8008cb0 <memp_free>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	08013be8 	.word	0x08013be8
 8009fb8:	08013c54 	.word	0x08013c54
 8009fbc:	08013c2c 	.word	0x08013c2c

08009fc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009fc4:	f000 fea4 	bl	800ad10 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009fc8:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <tcp_tmr+0x28>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	4b05      	ldr	r3, [pc, #20]	@ (8009fe8 <tcp_tmr+0x28>)
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	4b04      	ldr	r3, [pc, #16]	@ (8009fe8 <tcp_tmr+0x28>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009fe0:	f000 fb54 	bl	800a68c <tcp_slowtmr>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	2000ef41 	.word	0x2000ef41

08009fec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d105      	bne.n	800a008 <tcp_remove_listener+0x1c>
 8009ffc:	4b0d      	ldr	r3, [pc, #52]	@ (800a034 <tcp_remove_listener+0x48>)
 8009ffe:	22ff      	movs	r2, #255	@ 0xff
 800a000:	490d      	ldr	r1, [pc, #52]	@ (800a038 <tcp_remove_listener+0x4c>)
 800a002:	480e      	ldr	r0, [pc, #56]	@ (800a03c <tcp_remove_listener+0x50>)
 800a004:	f008 f8d6 	bl	80121b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	e00a      	b.n	800a024 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d102      	bne.n	800a01e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f1      	bne.n	800a00e <tcp_remove_listener+0x22>
    }
  }
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	08013be8 	.word	0x08013be8
 800a038:	08013c70 	.word	0x08013c70
 800a03c:	08013c2c 	.word	0x08013c2c

0800a040 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <tcp_listen_closed+0x1c>
 800a04e:	4b14      	ldr	r3, [pc, #80]	@ (800a0a0 <tcp_listen_closed+0x60>)
 800a050:	f240 1211 	movw	r2, #273	@ 0x111
 800a054:	4913      	ldr	r1, [pc, #76]	@ (800a0a4 <tcp_listen_closed+0x64>)
 800a056:	4814      	ldr	r0, [pc, #80]	@ (800a0a8 <tcp_listen_closed+0x68>)
 800a058:	f008 f8ac 	bl	80121b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7d1b      	ldrb	r3, [r3, #20]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d006      	beq.n	800a072 <tcp_listen_closed+0x32>
 800a064:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <tcp_listen_closed+0x60>)
 800a066:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a06a:	4910      	ldr	r1, [pc, #64]	@ (800a0ac <tcp_listen_closed+0x6c>)
 800a06c:	480e      	ldr	r0, [pc, #56]	@ (800a0a8 <tcp_listen_closed+0x68>)
 800a06e:	f008 f8a1 	bl	80121b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a072:	2301      	movs	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	e00b      	b.n	800a090 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a078:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b0 <tcp_listen_closed+0x70>)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ffb1 	bl	8009fec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3301      	adds	r3, #1
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b03      	cmp	r3, #3
 800a094:	d9f0      	bls.n	800a078 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	08013be8 	.word	0x08013be8
 800a0a4:	08013c98 	.word	0x08013c98
 800a0a8:	08013c2c 	.word	0x08013c2c
 800a0ac:	08013ca4 	.word	0x08013ca4
 800a0b0:	08015c44 	.word	0x08015c44

0800a0b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a0b4:	b5b0      	push	{r4, r5, r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <tcp_close_shutdown+0x20>
 800a0c6:	4b63      	ldr	r3, [pc, #396]	@ (800a254 <tcp_close_shutdown+0x1a0>)
 800a0c8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a0cc:	4962      	ldr	r1, [pc, #392]	@ (800a258 <tcp_close_shutdown+0x1a4>)
 800a0ce:	4863      	ldr	r0, [pc, #396]	@ (800a25c <tcp_close_shutdown+0x1a8>)
 800a0d0:	f008 f870 	bl	80121b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d066      	beq.n	800a1a8 <tcp_close_shutdown+0xf4>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7d1b      	ldrb	r3, [r3, #20]
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d003      	beq.n	800a0ea <tcp_close_shutdown+0x36>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	7d1b      	ldrb	r3, [r3, #20]
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	d15e      	bne.n	800a1a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <tcp_close_shutdown+0x48>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a0fa:	d055      	beq.n	800a1a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8b5b      	ldrh	r3, [r3, #26]
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <tcp_close_shutdown+0x62>
 800a108:	4b52      	ldr	r3, [pc, #328]	@ (800a254 <tcp_close_shutdown+0x1a0>)
 800a10a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a10e:	4954      	ldr	r1, [pc, #336]	@ (800a260 <tcp_close_shutdown+0x1ac>)
 800a110:	4852      	ldr	r0, [pc, #328]	@ (800a25c <tcp_close_shutdown+0x1a8>)
 800a112:	f008 f84f 	bl	80121b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a11e:	687d      	ldr	r5, [r7, #4]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	8ad2      	ldrh	r2, [r2, #22]
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	8b09      	ldrh	r1, [r1, #24]
 800a12c:	9102      	str	r1, [sp, #8]
 800a12e:	9201      	str	r2, [sp, #4]
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462b      	mov	r3, r5
 800a134:	4622      	mov	r2, r4
 800a136:	4601      	mov	r1, r0
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f004 fe8d 	bl	800ee58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 f8c8 	bl	800b2d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a144:	4b47      	ldr	r3, [pc, #284]	@ (800a264 <tcp_close_shutdown+0x1b0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d105      	bne.n	800a15a <tcp_close_shutdown+0xa6>
 800a14e:	4b45      	ldr	r3, [pc, #276]	@ (800a264 <tcp_close_shutdown+0x1b0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4a43      	ldr	r2, [pc, #268]	@ (800a264 <tcp_close_shutdown+0x1b0>)
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	e013      	b.n	800a182 <tcp_close_shutdown+0xce>
 800a15a:	4b42      	ldr	r3, [pc, #264]	@ (800a264 <tcp_close_shutdown+0x1b0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e00c      	b.n	800a17c <tcp_close_shutdown+0xc8>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d104      	bne.n	800a176 <tcp_close_shutdown+0xc2>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	60da      	str	r2, [r3, #12]
 800a174:	e005      	b.n	800a182 <tcp_close_shutdown+0xce>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1ef      	bne.n	800a162 <tcp_close_shutdown+0xae>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	60da      	str	r2, [r3, #12]
 800a188:	4b37      	ldr	r3, [pc, #220]	@ (800a268 <tcp_close_shutdown+0x1b4>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a18e:	4b37      	ldr	r3, [pc, #220]	@ (800a26c <tcp_close_shutdown+0x1b8>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	429a      	cmp	r2, r3
 800a196:	d102      	bne.n	800a19e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a198:	f003 fd5c 	bl	800dc54 <tcp_trigger_input_pcb_close>
 800a19c:	e002      	b.n	800a1a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff fed6 	bl	8009f50 <tcp_free>
      }
      return ERR_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e050      	b.n	800a24a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d03b      	beq.n	800a228 <tcp_close_shutdown+0x174>
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	dc44      	bgt.n	800a23e <tcp_close_shutdown+0x18a>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <tcp_close_shutdown+0x10a>
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d02a      	beq.n	800a212 <tcp_close_shutdown+0x15e>
 800a1bc:	e03f      	b.n	800a23e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	8adb      	ldrh	r3, [r3, #22]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d021      	beq.n	800a20a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a1c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a270 <tcp_close_shutdown+0x1bc>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d105      	bne.n	800a1dc <tcp_close_shutdown+0x128>
 800a1d0:	4b27      	ldr	r3, [pc, #156]	@ (800a270 <tcp_close_shutdown+0x1bc>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	4a26      	ldr	r2, [pc, #152]	@ (800a270 <tcp_close_shutdown+0x1bc>)
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e013      	b.n	800a204 <tcp_close_shutdown+0x150>
 800a1dc:	4b24      	ldr	r3, [pc, #144]	@ (800a270 <tcp_close_shutdown+0x1bc>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60bb      	str	r3, [r7, #8]
 800a1e2:	e00c      	b.n	800a1fe <tcp_close_shutdown+0x14a>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d104      	bne.n	800a1f8 <tcp_close_shutdown+0x144>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	e005      	b.n	800a204 <tcp_close_shutdown+0x150>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	60bb      	str	r3, [r7, #8]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1ef      	bne.n	800a1e4 <tcp_close_shutdown+0x130>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff fea0 	bl	8009f50 <tcp_free>
      break;
 800a210:	e01a      	b.n	800a248 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff ff14 	bl	800a040 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	4816      	ldr	r0, [pc, #88]	@ (800a274 <tcp_close_shutdown+0x1c0>)
 800a21c:	f001 f8aa 	bl	800b374 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff feb1 	bl	8009f88 <tcp_free_listen>
      break;
 800a226:	e00f      	b.n	800a248 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	480e      	ldr	r0, [pc, #56]	@ (800a264 <tcp_close_shutdown+0x1b0>)
 800a22c:	f001 f8a2 	bl	800b374 <tcp_pcb_remove>
 800a230:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <tcp_close_shutdown+0x1b4>)
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff fe8a 	bl	8009f50 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a23c:	e004      	b.n	800a248 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f81a 	bl	800a278 <tcp_close_shutdown_fin>
 800a244:	4603      	mov	r3, r0
 800a246:	e000      	b.n	800a24a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bdb0      	pop	{r4, r5, r7, pc}
 800a252:	bf00      	nop
 800a254:	08013be8 	.word	0x08013be8
 800a258:	08013cbc 	.word	0x08013cbc
 800a25c:	08013c2c 	.word	0x08013c2c
 800a260:	08013cdc 	.word	0x08013cdc
 800a264:	2000ef38 	.word	0x2000ef38
 800a268:	2000ef40 	.word	0x2000ef40
 800a26c:	2000ef78 	.word	0x2000ef78
 800a270:	2000ef30 	.word	0x2000ef30
 800a274:	2000ef34 	.word	0x2000ef34

0800a278 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <tcp_close_shutdown_fin+0x1c>
 800a286:	4b2e      	ldr	r3, [pc, #184]	@ (800a340 <tcp_close_shutdown_fin+0xc8>)
 800a288:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a28c:	492d      	ldr	r1, [pc, #180]	@ (800a344 <tcp_close_shutdown_fin+0xcc>)
 800a28e:	482e      	ldr	r0, [pc, #184]	@ (800a348 <tcp_close_shutdown_fin+0xd0>)
 800a290:	f007 ff90 	bl	80121b4 <iprintf>

  switch (pcb->state) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	7d1b      	ldrb	r3, [r3, #20]
 800a298:	2b07      	cmp	r3, #7
 800a29a:	d020      	beq.n	800a2de <tcp_close_shutdown_fin+0x66>
 800a29c:	2b07      	cmp	r3, #7
 800a29e:	dc2b      	bgt.n	800a2f8 <tcp_close_shutdown_fin+0x80>
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d002      	beq.n	800a2aa <tcp_close_shutdown_fin+0x32>
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d00d      	beq.n	800a2c4 <tcp_close_shutdown_fin+0x4c>
 800a2a8:	e026      	b.n	800a2f8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f003 fee2 	bl	800e074 <tcp_send_fin>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11f      	bne.n	800a2fc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2205      	movs	r2, #5
 800a2c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a2c2:	e01b      	b.n	800a2fc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f003 fed5 	bl	800e074 <tcp_send_fin>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d114      	bne.n	800a300 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2205      	movs	r2, #5
 800a2da:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a2dc:	e010      	b.n	800a300 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f003 fec8 	bl	800e074 <tcp_send_fin>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d109      	bne.n	800a304 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2209      	movs	r2, #9
 800a2f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a2f6:	e005      	b.n	800a304 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e01c      	b.n	800a336 <tcp_close_shutdown_fin+0xbe>
      break;
 800a2fc:	bf00      	nop
 800a2fe:	e002      	b.n	800a306 <tcp_close_shutdown_fin+0x8e>
      break;
 800a300:	bf00      	nop
 800a302:	e000      	b.n	800a306 <tcp_close_shutdown_fin+0x8e>
      break;
 800a304:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d103      	bne.n	800a316 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f003 ffee 	bl	800e2f0 <tcp_output>
 800a314:	e00d      	b.n	800a332 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d108      	bne.n	800a332 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8b5b      	ldrh	r3, [r3, #26]
 800a324:	f043 0308 	orr.w	r3, r3, #8
 800a328:	b29a      	uxth	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e001      	b.n	800a336 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	08013be8 	.word	0x08013be8
 800a344:	08013c98 	.word	0x08013c98
 800a348:	08013c2c 	.word	0x08013c2c

0800a34c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d109      	bne.n	800a36e <tcp_close+0x22>
 800a35a:	4b0f      	ldr	r3, [pc, #60]	@ (800a398 <tcp_close+0x4c>)
 800a35c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a360:	490e      	ldr	r1, [pc, #56]	@ (800a39c <tcp_close+0x50>)
 800a362:	480f      	ldr	r0, [pc, #60]	@ (800a3a0 <tcp_close+0x54>)
 800a364:	f007 ff26 	bl	80121b4 <iprintf>
 800a368:	f06f 030f 	mvn.w	r3, #15
 800a36c:	e00f      	b.n	800a38e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7d1b      	ldrb	r3, [r3, #20]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d006      	beq.n	800a384 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8b5b      	ldrh	r3, [r3, #26]
 800a37a:	f043 0310 	orr.w	r3, r3, #16
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a384:	2101      	movs	r1, #1
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff fe94 	bl	800a0b4 <tcp_close_shutdown>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	08013be8 	.word	0x08013be8
 800a39c:	08013cf8 	.word	0x08013cf8
 800a3a0:	08013c2c 	.word	0x08013c2c

0800a3a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08e      	sub	sp, #56	@ 0x38
 800a3a8:	af04      	add	r7, sp, #16
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <tcp_abandon+0x20>
 800a3b4:	4b52      	ldr	r3, [pc, #328]	@ (800a500 <tcp_abandon+0x15c>)
 800a3b6:	f240 223d 	movw	r2, #573	@ 0x23d
 800a3ba:	4952      	ldr	r1, [pc, #328]	@ (800a504 <tcp_abandon+0x160>)
 800a3bc:	4852      	ldr	r0, [pc, #328]	@ (800a508 <tcp_abandon+0x164>)
 800a3be:	f007 fef9 	bl	80121b4 <iprintf>
 800a3c2:	e099      	b.n	800a4f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7d1b      	ldrb	r3, [r3, #20]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d106      	bne.n	800a3da <tcp_abandon+0x36>
 800a3cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a500 <tcp_abandon+0x15c>)
 800a3ce:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a3d2:	494e      	ldr	r1, [pc, #312]	@ (800a50c <tcp_abandon+0x168>)
 800a3d4:	484c      	ldr	r0, [pc, #304]	@ (800a508 <tcp_abandon+0x164>)
 800a3d6:	f007 feed 	bl	80121b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	7d1b      	ldrb	r3, [r3, #20]
 800a3de:	2b0a      	cmp	r3, #10
 800a3e0:	d107      	bne.n	800a3f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	484a      	ldr	r0, [pc, #296]	@ (800a510 <tcp_abandon+0x16c>)
 800a3e6:	f000 ffc5 	bl	800b374 <tcp_pcb_remove>
    tcp_free(pcb);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff fdb0 	bl	8009f50 <tcp_free>
 800a3f0:	e082      	b.n	800a4f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a40c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7d1b      	ldrb	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d126      	bne.n	800a46a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	8adb      	ldrh	r3, [r3, #22]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d02e      	beq.n	800a482 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a424:	4b3b      	ldr	r3, [pc, #236]	@ (800a514 <tcp_abandon+0x170>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d105      	bne.n	800a43a <tcp_abandon+0x96>
 800a42e:	4b39      	ldr	r3, [pc, #228]	@ (800a514 <tcp_abandon+0x170>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	4a37      	ldr	r2, [pc, #220]	@ (800a514 <tcp_abandon+0x170>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	e013      	b.n	800a462 <tcp_abandon+0xbe>
 800a43a:	4b36      	ldr	r3, [pc, #216]	@ (800a514 <tcp_abandon+0x170>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	e00c      	b.n	800a45c <tcp_abandon+0xb8>
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d104      	bne.n	800a456 <tcp_abandon+0xb2>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	60da      	str	r2, [r3, #12]
 800a454:	e005      	b.n	800a462 <tcp_abandon+0xbe>
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1ef      	bne.n	800a442 <tcp_abandon+0x9e>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	e00b      	b.n	800a482 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8adb      	ldrh	r3, [r3, #22]
 800a472:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	4828      	ldr	r0, [pc, #160]	@ (800a518 <tcp_abandon+0x174>)
 800a478:	f000 ff7c 	bl	800b374 <tcp_pcb_remove>
 800a47c:	4b27      	ldr	r3, [pc, #156]	@ (800a51c <tcp_abandon+0x178>)
 800a47e:	2201      	movs	r2, #1
 800a480:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fd1e 	bl	800aed0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d004      	beq.n	800a4a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fd15 	bl	800aed0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd0c 	bl	800aed0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00e      	beq.n	800a4dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	8b12      	ldrh	r2, [r2, #24]
 800a4c8:	9202      	str	r2, [sp, #8]
 800a4ca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a4cc:	9201      	str	r2, [sp, #4]
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f004 fcbe 	bl	800ee58 <tcp_rst>
    }
    last_state = pcb->state;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7d1b      	ldrb	r3, [r3, #20]
 800a4e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fd34 	bl	8009f50 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <tcp_abandon+0x154>
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f06f 010c 	mvn.w	r1, #12
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	4798      	blx	r3
  }
}
 800a4f8:	3728      	adds	r7, #40	@ 0x28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08013be8 	.word	0x08013be8
 800a504:	08013d2c 	.word	0x08013d2c
 800a508:	08013c2c 	.word	0x08013c2c
 800a50c:	08013d48 	.word	0x08013d48
 800a510:	2000ef3c 	.word	0x2000ef3c
 800a514:	2000ef30 	.word	0x2000ef30
 800a518:	2000ef38 	.word	0x2000ef38
 800a51c:	2000ef40 	.word	0x2000ef40

0800a520 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a528:	2101      	movs	r1, #1
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff ff3a 	bl	800a3a4 <tcp_abandon>
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <tcp_update_rcv_ann_wnd+0x1c>
 800a546:	4b25      	ldr	r3, [pc, #148]	@ (800a5dc <tcp_update_rcv_ann_wnd+0xa4>)
 800a548:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a54c:	4924      	ldr	r1, [pc, #144]	@ (800a5e0 <tcp_update_rcv_ann_wnd+0xa8>)
 800a54e:	4825      	ldr	r0, [pc, #148]	@ (800a5e4 <tcp_update_rcv_ann_wnd+0xac>)
 800a550:	f007 fe30 	bl	80121b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a55c:	4413      	add	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800a568:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a56c:	bf28      	it	cs
 800a56e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800a572:	b292      	uxth	r2, r2
 800a574:	4413      	add	r3, r2
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	db08      	blt.n	800a590 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	e020      	b.n	800a5d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd03      	ble.n	800a5a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a5a4:	e014      	b.n	800a5d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5b8:	d306      	bcc.n	800a5c8 <tcp_update_rcv_ann_wnd+0x90>
 800a5ba:	4b08      	ldr	r3, [pc, #32]	@ (800a5dc <tcp_update_rcv_ann_wnd+0xa4>)
 800a5bc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800a5c0:	4909      	ldr	r1, [pc, #36]	@ (800a5e8 <tcp_update_rcv_ann_wnd+0xb0>)
 800a5c2:	4808      	ldr	r0, [pc, #32]	@ (800a5e4 <tcp_update_rcv_ann_wnd+0xac>)
 800a5c4:	f007 fdf6 	bl	80121b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800a5d0:	2300      	movs	r3, #0
  }
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	08013be8 	.word	0x08013be8
 800a5e0:	08013e44 	.word	0x08013e44
 800a5e4:	08013c2c 	.word	0x08013c2c
 800a5e8:	08013e68 	.word	0x08013e68

0800a5ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d107      	bne.n	800a60e <tcp_recved+0x22>
 800a5fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a67c <tcp_recved+0x90>)
 800a600:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800a604:	491e      	ldr	r1, [pc, #120]	@ (800a680 <tcp_recved+0x94>)
 800a606:	481f      	ldr	r0, [pc, #124]	@ (800a684 <tcp_recved+0x98>)
 800a608:	f007 fdd4 	bl	80121b4 <iprintf>
 800a60c:	e032      	b.n	800a674 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7d1b      	ldrb	r3, [r3, #20]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d106      	bne.n	800a624 <tcp_recved+0x38>
 800a616:	4b19      	ldr	r3, [pc, #100]	@ (800a67c <tcp_recved+0x90>)
 800a618:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800a61c:	491a      	ldr	r1, [pc, #104]	@ (800a688 <tcp_recved+0x9c>)
 800a61e:	4819      	ldr	r0, [pc, #100]	@ (800a684 <tcp_recved+0x98>)
 800a620:	f007 fdc8 	bl	80121b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a628:	887b      	ldrh	r3, [r7, #2]
 800a62a:	4413      	add	r3, r2
 800a62c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a62e:	89fb      	ldrh	r3, [r7, #14]
 800a630:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a634:	d804      	bhi.n	800a640 <tcp_recved+0x54>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a63a:	89fa      	ldrh	r2, [r7, #14]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d204      	bcs.n	800a64a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a646:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a648:	e002      	b.n	800a650 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	89fa      	ldrh	r2, [r7, #14]
 800a64e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff ff71 	bl	800a538 <tcp_update_rcv_ann_wnd>
 800a656:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a65e:	d309      	bcc.n	800a674 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8b5b      	ldrh	r3, [r3, #26]
 800a664:	f043 0302 	orr.w	r3, r3, #2
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f003 fe3e 	bl	800e2f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08013be8 	.word	0x08013be8
 800a680:	08013e84 	.word	0x08013e84
 800a684:	08013c2c 	.word	0x08013c2c
 800a688:	08013e9c 	.word	0x08013e9c

0800a68c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a68c:	b5b0      	push	{r4, r5, r7, lr}
 800a68e:	b090      	sub	sp, #64	@ 0x40
 800a690:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800a698:	4b95      	ldr	r3, [pc, #596]	@ (800a8f0 <tcp_slowtmr+0x264>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3301      	adds	r3, #1
 800a69e:	4a94      	ldr	r2, [pc, #592]	@ (800a8f0 <tcp_slowtmr+0x264>)
 800a6a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a6a2:	4b94      	ldr	r3, [pc, #592]	@ (800a8f4 <tcp_slowtmr+0x268>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b92      	ldr	r3, [pc, #584]	@ (800a8f4 <tcp_slowtmr+0x268>)
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	e000      	b.n	800a6b2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800a6b0:	bf00      	nop
  prev = NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800a6b6:	4b90      	ldr	r3, [pc, #576]	@ (800a8f8 <tcp_slowtmr+0x26c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a6bc:	e29d      	b.n	800abfa <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c0:	7d1b      	ldrb	r3, [r3, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <tcp_slowtmr+0x48>
 800a6c6:	4b8d      	ldr	r3, [pc, #564]	@ (800a8fc <tcp_slowtmr+0x270>)
 800a6c8:	f240 42be 	movw	r2, #1214	@ 0x4be
 800a6cc:	498c      	ldr	r1, [pc, #560]	@ (800a900 <tcp_slowtmr+0x274>)
 800a6ce:	488d      	ldr	r0, [pc, #564]	@ (800a904 <tcp_slowtmr+0x278>)
 800a6d0:	f007 fd70 	bl	80121b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	7d1b      	ldrb	r3, [r3, #20]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d106      	bne.n	800a6ea <tcp_slowtmr+0x5e>
 800a6dc:	4b87      	ldr	r3, [pc, #540]	@ (800a8fc <tcp_slowtmr+0x270>)
 800a6de:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800a6e2:	4989      	ldr	r1, [pc, #548]	@ (800a908 <tcp_slowtmr+0x27c>)
 800a6e4:	4887      	ldr	r0, [pc, #540]	@ (800a904 <tcp_slowtmr+0x278>)
 800a6e6:	f007 fd65 	bl	80121b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ec:	7d1b      	ldrb	r3, [r3, #20]
 800a6ee:	2b0a      	cmp	r3, #10
 800a6f0:	d106      	bne.n	800a700 <tcp_slowtmr+0x74>
 800a6f2:	4b82      	ldr	r3, [pc, #520]	@ (800a8fc <tcp_slowtmr+0x270>)
 800a6f4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800a6f8:	4984      	ldr	r1, [pc, #528]	@ (800a90c <tcp_slowtmr+0x280>)
 800a6fa:	4882      	ldr	r0, [pc, #520]	@ (800a904 <tcp_slowtmr+0x278>)
 800a6fc:	f007 fd5a 	bl	80121b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a702:	7f9a      	ldrb	r2, [r3, #30]
 800a704:	4b7b      	ldr	r3, [pc, #492]	@ (800a8f4 <tcp_slowtmr+0x268>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d105      	bne.n	800a718 <tcp_slowtmr+0x8c>
      prev = pcb;
 800a70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800a716:	e270      	b.n	800abfa <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800a718:	4b76      	ldr	r3, [pc, #472]	@ (800a8f4 <tcp_slowtmr+0x268>)
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72e:	7d1b      	ldrb	r3, [r3, #20]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d10a      	bne.n	800a74a <tcp_slowtmr+0xbe>
 800a734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d905      	bls.n	800a74a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a73e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a742:	3301      	adds	r3, #1
 800a744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a748:	e11e      	b.n	800a988 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a750:	2b0b      	cmp	r3, #11
 800a752:	d905      	bls.n	800a760 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800a754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a758:	3301      	adds	r3, #1
 800a75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a75e:	e113      	b.n	800a988 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a762:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a766:	2b00      	cmp	r3, #0
 800a768:	d075      	beq.n	800a856 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <tcp_slowtmr+0xf4>
 800a772:	4b62      	ldr	r3, [pc, #392]	@ (800a8fc <tcp_slowtmr+0x270>)
 800a774:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800a778:	4965      	ldr	r1, [pc, #404]	@ (800a910 <tcp_slowtmr+0x284>)
 800a77a:	4862      	ldr	r0, [pc, #392]	@ (800a904 <tcp_slowtmr+0x278>)
 800a77c:	f007 fd1a 	bl	80121b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <tcp_slowtmr+0x10a>
 800a788:	4b5c      	ldr	r3, [pc, #368]	@ (800a8fc <tcp_slowtmr+0x270>)
 800a78a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800a78e:	4961      	ldr	r1, [pc, #388]	@ (800a914 <tcp_slowtmr+0x288>)
 800a790:	485c      	ldr	r0, [pc, #368]	@ (800a904 <tcp_slowtmr+0x278>)
 800a792:	f007 fd0f 	bl	80121b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a798:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a79c:	2b0b      	cmp	r3, #11
 800a79e:	d905      	bls.n	800a7ac <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800a7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7aa:	e0ed      	b.n	800a988 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	4a58      	ldr	r2, [pc, #352]	@ (800a918 <tcp_slowtmr+0x28c>)
 800a7b6:	5cd3      	ldrb	r3, [r2, r3]
 800a7b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a7c0:	7c7a      	ldrb	r2, [r7, #17]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d907      	bls.n	800a7d6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a7dc:	7c7a      	ldrb	r2, [r7, #17]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f200 80d2 	bhi.w	800a988 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800a7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d108      	bne.n	800a804 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a7f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7f4:	f004 fc24 	bl	800f040 <tcp_zero_window_probe>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d014      	beq.n	800a828 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800a7fe:	2300      	movs	r3, #0
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	e011      	b.n	800a828 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a80a:	4619      	mov	r1, r3
 800a80c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a80e:	f003 fae9 	bl	800dde4 <tcp_split_unsent_seg>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d107      	bne.n	800a828 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800a818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a81a:	f003 fd69 	bl	800e2f0 <tcp_output>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 80ac 	beq.w	800a988 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a83e:	2b06      	cmp	r3, #6
 800a840:	f200 80a2 	bhi.w	800a988 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a846:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a84a:	3301      	adds	r3, #1
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a850:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a854:	e098      	b.n	800a988 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a858:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	db0f      	blt.n	800a880 <tcp_slowtmr+0x1f4>
 800a860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a862:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a866:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d008      	beq.n	800a880 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a870:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a874:	b29b      	uxth	r3, r3
 800a876:	3301      	adds	r3, #1
 800a878:	b29b      	uxth	r3, r3
 800a87a:	b21a      	sxth	r2, r3
 800a87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800a886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a888:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a88c:	429a      	cmp	r2, r3
 800a88e:	db7b      	blt.n	800a988 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a890:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a892:	f004 f821 	bl	800e8d8 <tcp_rexmit_rto_prepare>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d007      	beq.n	800a8ac <tcp_slowtmr+0x220>
 800a89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d171      	bne.n	800a988 <tcp_slowtmr+0x2fc>
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d06d      	beq.n	800a988 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	7d1b      	ldrb	r3, [r3, #20]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d03a      	beq.n	800a92a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8ba:	2b0c      	cmp	r3, #12
 800a8bc:	bf28      	it	cs
 800a8be:	230c      	movcs	r3, #12
 800a8c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a8c8:	10db      	asrs	r3, r3, #3
 800a8ca:	b21b      	sxth	r3, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a8d4:	4413      	add	r3, r2
 800a8d6:	7efa      	ldrb	r2, [r7, #27]
 800a8d8:	4910      	ldr	r1, [pc, #64]	@ (800a91c <tcp_slowtmr+0x290>)
 800a8da:	5c8a      	ldrb	r2, [r1, r2]
 800a8dc:	4093      	lsls	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	dc1a      	bgt.n	800a920 <tcp_slowtmr+0x294>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	b21a      	sxth	r2, r3
 800a8ee:	e019      	b.n	800a924 <tcp_slowtmr+0x298>
 800a8f0:	2000ef2c 	.word	0x2000ef2c
 800a8f4:	2000ef42 	.word	0x2000ef42
 800a8f8:	2000ef38 	.word	0x2000ef38
 800a8fc:	08013be8 	.word	0x08013be8
 800a900:	08013f2c 	.word	0x08013f2c
 800a904:	08013c2c 	.word	0x08013c2c
 800a908:	08013f58 	.word	0x08013f58
 800a90c:	08013f84 	.word	0x08013f84
 800a910:	08013fb4 	.word	0x08013fb4
 800a914:	08013fe8 	.word	0x08013fe8
 800a918:	08015c3c 	.word	0x08015c3c
 800a91c:	08015c2c 	.word	0x08015c2c
 800a920:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a926:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800a92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92c:	2200      	movs	r2, #0
 800a92e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a932:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a938:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a93c:	4293      	cmp	r3, r2
 800a93e:	bf28      	it	cs
 800a940:	4613      	movcs	r3, r2
 800a942:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a944:	8a7b      	ldrh	r3, [r7, #18]
 800a946:	085b      	lsrs	r3, r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a952:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	429a      	cmp	r2, r3
 800a960:	d206      	bcs.n	800a970 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a964:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	b29a      	uxth	r2, r3
 800a96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800a970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a972:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a976:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a982:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a984:	f004 f818 	bl	800e9b8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	7d1b      	ldrb	r3, [r3, #20]
 800a98c:	2b06      	cmp	r3, #6
 800a98e:	d111      	bne.n	800a9b4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800a990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a992:	8b5b      	ldrh	r3, [r3, #26]
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00b      	beq.n	800a9b4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a99c:	4b9c      	ldr	r3, [pc, #624]	@ (800ac10 <tcp_slowtmr+0x584>)
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b28      	cmp	r3, #40	@ 0x28
 800a9a8:	d904      	bls.n	800a9b4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800a9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	7a5b      	ldrb	r3, [r3, #9]
 800a9b8:	f003 0308 	and.w	r3, r3, #8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d04a      	beq.n	800aa56 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d003      	beq.n	800a9d0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800a9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a9cc:	2b07      	cmp	r3, #7
 800a9ce:	d142      	bne.n	800aa56 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9d0:	4b8f      	ldr	r3, [pc, #572]	@ (800ac10 <tcp_slowtmr+0x584>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800a9e0:	4b8c      	ldr	r3, [pc, #560]	@ (800ac14 <tcp_slowtmr+0x588>)
 800a9e2:	440b      	add	r3, r1
 800a9e4:	498c      	ldr	r1, [pc, #560]	@ (800ac18 <tcp_slowtmr+0x58c>)
 800a9e6:	fba1 1303 	umull	r1, r3, r1, r3
 800a9ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d90a      	bls.n	800aa06 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800a9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800a9fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aa04:	e027      	b.n	800aa56 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa06:	4b82      	ldr	r3, [pc, #520]	@ (800ac10 <tcp_slowtmr+0x584>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800aa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa18:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4b7f      	ldr	r3, [pc, #508]	@ (800ac1c <tcp_slowtmr+0x590>)
 800aa20:	fb00 f303 	mul.w	r3, r0, r3
 800aa24:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800aa26:	497c      	ldr	r1, [pc, #496]	@ (800ac18 <tcp_slowtmr+0x58c>)
 800aa28:	fba1 1303 	umull	r1, r3, r1, r3
 800aa2c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d911      	bls.n	800aa56 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800aa32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa34:	f004 fac4 	bl	800efc0 <tcp_keepalive>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800aa3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d107      	bne.n	800aa56 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa52:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800aa56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d011      	beq.n	800aa82 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800aa5e:	4b6c      	ldr	r3, [pc, #432]	@ (800ac10 <tcp_slowtmr+0x584>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800aa6e:	4619      	mov	r1, r3
 800aa70:	460b      	mov	r3, r1
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	440b      	add	r3, r1
 800aa76:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d302      	bcc.n	800aa82 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800aa7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa7e:	f000 fddd 	bl	800b63c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800aa82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa84:	7d1b      	ldrb	r3, [r3, #20]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d10b      	bne.n	800aaa2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa8a:	4b61      	ldr	r3, [pc, #388]	@ (800ac10 <tcp_slowtmr+0x584>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b28      	cmp	r3, #40	@ 0x28
 800aa96:	d904      	bls.n	800aaa2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800aa98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	7d1b      	ldrb	r3, [r3, #20]
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	d10b      	bne.n	800aac2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aaaa:	4b59      	ldr	r3, [pc, #356]	@ (800ac10 <tcp_slowtmr+0x584>)
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2bf0      	cmp	r3, #240	@ 0xf0
 800aab6:	d904      	bls.n	800aac2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800aab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aabc:	3301      	adds	r3, #1
 800aabe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800aac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d060      	beq.n	800ab8c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800aaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800aad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aad4:	f000 fbfe 	bl	800b2d4 <tcp_pcb_purge>
      if (prev != NULL) {
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d010      	beq.n	800ab00 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aade:	4b50      	ldr	r3, [pc, #320]	@ (800ac20 <tcp_slowtmr+0x594>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d106      	bne.n	800aaf6 <tcp_slowtmr+0x46a>
 800aae8:	4b4e      	ldr	r3, [pc, #312]	@ (800ac24 <tcp_slowtmr+0x598>)
 800aaea:	f240 526d 	movw	r2, #1389	@ 0x56d
 800aaee:	494e      	ldr	r1, [pc, #312]	@ (800ac28 <tcp_slowtmr+0x59c>)
 800aaf0:	484e      	ldr	r0, [pc, #312]	@ (800ac2c <tcp_slowtmr+0x5a0>)
 800aaf2:	f007 fb5f 	bl	80121b4 <iprintf>
        prev->next = pcb->next;
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	60da      	str	r2, [r3, #12]
 800aafe:	e00f      	b.n	800ab20 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ab00:	4b47      	ldr	r3, [pc, #284]	@ (800ac20 <tcp_slowtmr+0x594>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d006      	beq.n	800ab18 <tcp_slowtmr+0x48c>
 800ab0a:	4b46      	ldr	r3, [pc, #280]	@ (800ac24 <tcp_slowtmr+0x598>)
 800ab0c:	f240 5271 	movw	r2, #1393	@ 0x571
 800ab10:	4947      	ldr	r1, [pc, #284]	@ (800ac30 <tcp_slowtmr+0x5a4>)
 800ab12:	4846      	ldr	r0, [pc, #280]	@ (800ac2c <tcp_slowtmr+0x5a0>)
 800ab14:	f007 fb4e 	bl	80121b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	4a40      	ldr	r2, [pc, #256]	@ (800ac20 <tcp_slowtmr+0x594>)
 800ab1e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ab20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d013      	beq.n	800ab50 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ab30:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	3304      	adds	r3, #4
 800ab36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab38:	8ad2      	ldrh	r2, [r2, #22]
 800ab3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab3c:	8b09      	ldrh	r1, [r1, #24]
 800ab3e:	9102      	str	r1, [sp, #8]
 800ab40:	9201      	str	r2, [sp, #4]
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	462b      	mov	r3, r5
 800ab46:	4622      	mov	r2, r4
 800ab48:	4601      	mov	r1, r0
 800ab4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab4c:	f004 f984 	bl	800ee58 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ab50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ab56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab58:	7d1b      	ldrb	r3, [r3, #20]
 800ab5a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ab5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ab60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ab66:	6838      	ldr	r0, [r7, #0]
 800ab68:	f7ff f9f2 	bl	8009f50 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ab6c:	4b31      	ldr	r3, [pc, #196]	@ (800ac34 <tcp_slowtmr+0x5a8>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <tcp_slowtmr+0x4f6>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f06f 010c 	mvn.w	r1, #12
 800ab7e:	68b8      	ldr	r0, [r7, #8]
 800ab80:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ab82:	4b2c      	ldr	r3, [pc, #176]	@ (800ac34 <tcp_slowtmr+0x5a8>)
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d037      	beq.n	800abfa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ab8a:	e592      	b.n	800a6b2 <tcp_slowtmr+0x26>
      prev = pcb;
 800ab8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ab96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab98:	7f1b      	ldrb	r3, [r3, #28]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba4:	7f1a      	ldrb	r2, [r3, #28]
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	7f5b      	ldrb	r3, [r3, #29]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d325      	bcc.n	800abfa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	2200      	movs	r2, #0
 800abb2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800abb4:	4b1f      	ldr	r3, [pc, #124]	@ (800ac34 <tcp_slowtmr+0x5a8>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <tcp_slowtmr+0x550>
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abcc:	6912      	ldr	r2, [r2, #16]
 800abce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abd0:	4610      	mov	r0, r2
 800abd2:	4798      	blx	r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800abda:	e002      	b.n	800abe2 <tcp_slowtmr+0x556>
 800abdc:	2300      	movs	r3, #0
 800abde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800abe2:	4b14      	ldr	r3, [pc, #80]	@ (800ac34 <tcp_slowtmr+0x5a8>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f47f ad62 	bne.w	800a6b0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800abec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800abf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf6:	f003 fb7b 	bl	800e2f0 <tcp_output>
  while (pcb != NULL) {
 800abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f47f ad5e 	bne.w	800a6be <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ac06:	4b0c      	ldr	r3, [pc, #48]	@ (800ac38 <tcp_slowtmr+0x5ac>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ac0c:	e069      	b.n	800ace2 <tcp_slowtmr+0x656>
 800ac0e:	bf00      	nop
 800ac10:	2000ef2c 	.word	0x2000ef2c
 800ac14:	000a4cb8 	.word	0x000a4cb8
 800ac18:	10624dd3 	.word	0x10624dd3
 800ac1c:	000124f8 	.word	0x000124f8
 800ac20:	2000ef38 	.word	0x2000ef38
 800ac24:	08013be8 	.word	0x08013be8
 800ac28:	08014020 	.word	0x08014020
 800ac2c:	08013c2c 	.word	0x08013c2c
 800ac30:	0801404c 	.word	0x0801404c
 800ac34:	2000ef40 	.word	0x2000ef40
 800ac38:	2000ef3c 	.word	0x2000ef3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3e:	7d1b      	ldrb	r3, [r3, #20]
 800ac40:	2b0a      	cmp	r3, #10
 800ac42:	d006      	beq.n	800ac52 <tcp_slowtmr+0x5c6>
 800ac44:	4b2b      	ldr	r3, [pc, #172]	@ (800acf4 <tcp_slowtmr+0x668>)
 800ac46:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ac4a:	492b      	ldr	r1, [pc, #172]	@ (800acf8 <tcp_slowtmr+0x66c>)
 800ac4c:	482b      	ldr	r0, [pc, #172]	@ (800acfc <tcp_slowtmr+0x670>)
 800ac4e:	f007 fab1 	bl	80121b4 <iprintf>
    pcb_remove = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac58:	4b29      	ldr	r3, [pc, #164]	@ (800ad00 <tcp_slowtmr+0x674>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2bf0      	cmp	r3, #240	@ 0xf0
 800ac64:	d904      	bls.n	800ac70 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ac66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ac70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d02f      	beq.n	800acd8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ac78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac7a:	f000 fb2b 	bl	800b2d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d010      	beq.n	800aca6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ac84:	4b1f      	ldr	r3, [pc, #124]	@ (800ad04 <tcp_slowtmr+0x678>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d106      	bne.n	800ac9c <tcp_slowtmr+0x610>
 800ac8e:	4b19      	ldr	r3, [pc, #100]	@ (800acf4 <tcp_slowtmr+0x668>)
 800ac90:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ac94:	491c      	ldr	r1, [pc, #112]	@ (800ad08 <tcp_slowtmr+0x67c>)
 800ac96:	4819      	ldr	r0, [pc, #100]	@ (800acfc <tcp_slowtmr+0x670>)
 800ac98:	f007 fa8c 	bl	80121b4 <iprintf>
        prev->next = pcb->next;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	60da      	str	r2, [r3, #12]
 800aca4:	e00f      	b.n	800acc6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800aca6:	4b17      	ldr	r3, [pc, #92]	@ (800ad04 <tcp_slowtmr+0x678>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acac:	429a      	cmp	r2, r3
 800acae:	d006      	beq.n	800acbe <tcp_slowtmr+0x632>
 800acb0:	4b10      	ldr	r3, [pc, #64]	@ (800acf4 <tcp_slowtmr+0x668>)
 800acb2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800acb6:	4915      	ldr	r1, [pc, #84]	@ (800ad0c <tcp_slowtmr+0x680>)
 800acb8:	4810      	ldr	r0, [pc, #64]	@ (800acfc <tcp_slowtmr+0x670>)
 800acba:	f007 fa7b 	bl	80121b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800acbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	4a10      	ldr	r2, [pc, #64]	@ (800ad04 <tcp_slowtmr+0x678>)
 800acc4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800acd0:	69f8      	ldr	r0, [r7, #28]
 800acd2:	f7ff f93d 	bl	8009f50 <tcp_free>
 800acd6:	e004      	b.n	800ace2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800acd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acda:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ace2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1a9      	bne.n	800ac3c <tcp_slowtmr+0x5b0>
    }
  }
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	3730      	adds	r7, #48	@ 0x30
 800acee:	46bd      	mov	sp, r7
 800acf0:	bdb0      	pop	{r4, r5, r7, pc}
 800acf2:	bf00      	nop
 800acf4:	08013be8 	.word	0x08013be8
 800acf8:	08014078 	.word	0x08014078
 800acfc:	08013c2c 	.word	0x08013c2c
 800ad00:	2000ef2c 	.word	0x2000ef2c
 800ad04:	2000ef3c 	.word	0x2000ef3c
 800ad08:	080140a8 	.word	0x080140a8
 800ad0c:	080140d0 	.word	0x080140d0

0800ad10 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ad16:	4b2d      	ldr	r3, [pc, #180]	@ (800adcc <tcp_fasttmr+0xbc>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	4b2b      	ldr	r3, [pc, #172]	@ (800adcc <tcp_fasttmr+0xbc>)
 800ad20:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ad22:	4b2b      	ldr	r3, [pc, #172]	@ (800add0 <tcp_fasttmr+0xc0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ad28:	e048      	b.n	800adbc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7f9a      	ldrb	r2, [r3, #30]
 800ad2e:	4b27      	ldr	r3, [pc, #156]	@ (800adcc <tcp_fasttmr+0xbc>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d03f      	beq.n	800adb6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ad36:	4b25      	ldr	r3, [pc, #148]	@ (800adcc <tcp_fasttmr+0xbc>)
 800ad38:	781a      	ldrb	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	8b5b      	ldrh	r3, [r3, #26]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d010      	beq.n	800ad6c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8b5b      	ldrh	r3, [r3, #26]
 800ad4e:	f043 0302 	orr.w	r3, r3, #2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f003 fac9 	bl	800e2f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	8b5b      	ldrh	r3, [r3, #26]
 800ad62:	f023 0303 	bic.w	r3, r3, #3
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	8b5b      	ldrh	r3, [r3, #26]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	8b5b      	ldrh	r3, [r3, #26]
 800ad7c:	f023 0308 	bic.w	r3, r3, #8
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fa76 	bl	800a278 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	@ (800add4 <tcp_fasttmr+0xc4>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f819 	bl	800add8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ada6:	4b0b      	ldr	r3, [pc, #44]	@ (800add4 <tcp_fasttmr+0xc4>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d000      	beq.n	800adb0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800adae:	e7b8      	b.n	800ad22 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	e002      	b.n	800adbc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1b3      	bne.n	800ad2a <tcp_fasttmr+0x1a>
    }
  }
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000ef42 	.word	0x2000ef42
 800add0:	2000ef38 	.word	0x2000ef38
 800add4:	2000ef40 	.word	0x2000ef40

0800add8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <tcp_process_refused_data+0x22>
 800ade6:	4b37      	ldr	r3, [pc, #220]	@ (800aec4 <tcp_process_refused_data+0xec>)
 800ade8:	f240 6209 	movw	r2, #1545	@ 0x609
 800adec:	4936      	ldr	r1, [pc, #216]	@ (800aec8 <tcp_process_refused_data+0xf0>)
 800adee:	4837      	ldr	r0, [pc, #220]	@ (800aecc <tcp_process_refused_data+0xf4>)
 800adf0:	f007 f9e0 	bl	80121b4 <iprintf>
 800adf4:	f06f 030f 	mvn.w	r3, #15
 800adf8:	e060      	b.n	800aebc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adfe:	7b5b      	ldrb	r3, [r3, #13]
 800ae00:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae06:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <tcp_process_refused_data+0x58>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6918      	ldr	r0, [r3, #16]
 800ae22:	2300      	movs	r3, #0
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	47a0      	blx	r4
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
 800ae2e:	e007      	b.n	800ae40 <tcp_process_refused_data+0x68>
 800ae30:	2300      	movs	r3, #0
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	2000      	movs	r0, #0
 800ae38:	f000 f8a4 	bl	800af84 <tcp_recv_null>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d12a      	bne.n	800ae9e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d033      	beq.n	800aeba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae56:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ae5a:	d005      	beq.n	800ae68 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae60:	3301      	adds	r3, #1
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00b      	beq.n	800ae8a <tcp_process_refused_data+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6918      	ldr	r0, [r3, #16]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	6879      	ldr	r1, [r7, #4]
 800ae82:	47a0      	blx	r4
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
 800ae88:	e001      	b.n	800ae8e <tcp_process_refused_data+0xb6>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ae8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae92:	f113 0f0d 	cmn.w	r3, #13
 800ae96:	d110      	bne.n	800aeba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ae98:	f06f 030c 	mvn.w	r3, #12
 800ae9c:	e00e      	b.n	800aebc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea2:	f113 0f0d 	cmn.w	r3, #13
 800aea6:	d102      	bne.n	800aeae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aea8:	f06f 030c 	mvn.w	r3, #12
 800aeac:	e006      	b.n	800aebc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800aeb4:	f06f 0304 	mvn.w	r3, #4
 800aeb8:	e000      	b.n	800aebc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd90      	pop	{r4, r7, pc}
 800aec4:	08013be8 	.word	0x08013be8
 800aec8:	080140f8 	.word	0x080140f8
 800aecc:	08013c2c 	.word	0x08013c2c

0800aed0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800aed8:	e007      	b.n	800aeea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f80a 	bl	800aefa <tcp_seg_free>
    seg = next;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f4      	bne.n	800aeda <tcp_segs_free+0xa>
  }
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00c      	beq.n	800af22 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d004      	beq.n	800af1a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fd6f 	bl	80099f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	2003      	movs	r0, #3
 800af1e:	f7fd fec7 	bl	8008cb0 <memp_free>
  }
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d106      	bne.n	800af48 <tcp_seg_copy+0x1c>
 800af3a:	4b0f      	ldr	r3, [pc, #60]	@ (800af78 <tcp_seg_copy+0x4c>)
 800af3c:	f240 6282 	movw	r2, #1666	@ 0x682
 800af40:	490e      	ldr	r1, [pc, #56]	@ (800af7c <tcp_seg_copy+0x50>)
 800af42:	480f      	ldr	r0, [pc, #60]	@ (800af80 <tcp_seg_copy+0x54>)
 800af44:	f007 f936 	bl	80121b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800af48:	2003      	movs	r0, #3
 800af4a:	f7fd fe5f 	bl	8008c0c <memp_malloc>
 800af4e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <tcp_seg_copy+0x2e>
    return NULL;
 800af56:	2300      	movs	r3, #0
 800af58:	e00a      	b.n	800af70 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800af5a:	2210      	movs	r2, #16
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f007 fa03 	bl	801236a <memcpy>
  pbuf_ref(cseg->p);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fdeb 	bl	8009b44 <pbuf_ref>
  return cseg;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	08013be8 	.word	0x08013be8
 800af7c:	0801413c 	.word	0x0801413c
 800af80:	08013c2c 	.word	0x08013c2c

0800af84 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d109      	bne.n	800afac <tcp_recv_null+0x28>
 800af98:	4b12      	ldr	r3, [pc, #72]	@ (800afe4 <tcp_recv_null+0x60>)
 800af9a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800af9e:	4912      	ldr	r1, [pc, #72]	@ (800afe8 <tcp_recv_null+0x64>)
 800afa0:	4812      	ldr	r0, [pc, #72]	@ (800afec <tcp_recv_null+0x68>)
 800afa2:	f007 f907 	bl	80121b4 <iprintf>
 800afa6:	f06f 030f 	mvn.w	r3, #15
 800afaa:	e016      	b.n	800afda <tcp_recv_null+0x56>

  if (p != NULL) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	891b      	ldrh	r3, [r3, #8]
 800afb6:	4619      	mov	r1, r3
 800afb8:	68b8      	ldr	r0, [r7, #8]
 800afba:	f7ff fb17 	bl	800a5ec <tcp_recved>
    pbuf_free(p);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fe fd1a 	bl	80099f8 <pbuf_free>
 800afc4:	e008      	b.n	800afd8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800afc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d104      	bne.n	800afd8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800afce:	68b8      	ldr	r0, [r7, #8]
 800afd0:	f7ff f9bc 	bl	800a34c <tcp_close>
 800afd4:	4603      	mov	r3, r0
 800afd6:	e000      	b.n	800afda <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	08013be8 	.word	0x08013be8
 800afe8:	08014158 	.word	0x08014158
 800afec:	08013c2c 	.word	0x08013c2c

0800aff0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800affa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800affe:	2b00      	cmp	r3, #0
 800b000:	db01      	blt.n	800b006 <tcp_kill_prio+0x16>
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	e000      	b.n	800b008 <tcp_kill_prio+0x18>
 800b006:	237f      	movs	r3, #127	@ 0x7f
 800b008:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d034      	beq.n	800b07a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	3b01      	subs	r3, #1
 800b014:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b01e:	4b19      	ldr	r3, [pc, #100]	@ (800b084 <tcp_kill_prio+0x94>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	e01f      	b.n	800b066 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	7d5b      	ldrb	r3, [r3, #21]
 800b02a:	7afa      	ldrb	r2, [r7, #11]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d80c      	bhi.n	800b04a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b034:	7afa      	ldrb	r2, [r7, #11]
 800b036:	429a      	cmp	r2, r3
 800b038:	d112      	bne.n	800b060 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b03a:	4b13      	ldr	r3, [pc, #76]	@ (800b088 <tcp_kill_prio+0x98>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	429a      	cmp	r2, r3
 800b048:	d80a      	bhi.n	800b060 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b04a:	4b0f      	ldr	r3, [pc, #60]	@ (800b088 <tcp_kill_prio+0x98>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	7d5b      	ldrb	r3, [r3, #21]
 800b05e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1dc      	bne.n	800b026 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d004      	beq.n	800b07c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b072:	6938      	ldr	r0, [r7, #16]
 800b074:	f7ff fa54 	bl	800a520 <tcp_abort>
 800b078:	e000      	b.n	800b07c <tcp_kill_prio+0x8c>
    return;
 800b07a:	bf00      	nop
  }
}
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	2000ef38 	.word	0x2000ef38
 800b088:	2000ef2c 	.word	0x2000ef2c

0800b08c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d009      	beq.n	800b0b0 <tcp_kill_state+0x24>
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d006      	beq.n	800b0b0 <tcp_kill_state+0x24>
 800b0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b10c <tcp_kill_state+0x80>)
 800b0a4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b0a8:	4919      	ldr	r1, [pc, #100]	@ (800b110 <tcp_kill_state+0x84>)
 800b0aa:	481a      	ldr	r0, [pc, #104]	@ (800b114 <tcp_kill_state+0x88>)
 800b0ac:	f007 f882 	bl	80121b4 <iprintf>

  inactivity = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0b8:	4b17      	ldr	r3, [pc, #92]	@ (800b118 <tcp_kill_state+0x8c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e017      	b.n	800b0f0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	7d1b      	ldrb	r3, [r3, #20]
 800b0c4:	79fa      	ldrb	r2, [r7, #7]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d10f      	bne.n	800b0ea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b0ca:	4b14      	ldr	r3, [pc, #80]	@ (800b11c <tcp_kill_state+0x90>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d807      	bhi.n	800b0ea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b0da:	4b10      	ldr	r3, [pc, #64]	@ (800b11c <tcp_kill_state+0x90>)
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	617b      	str	r3, [r7, #20]
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1e4      	bne.n	800b0c0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	6938      	ldr	r0, [r7, #16]
 800b100:	f7ff f950 	bl	800a3a4 <tcp_abandon>
  }
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	08013be8 	.word	0x08013be8
 800b110:	08014174 	.word	0x08014174
 800b114:	08013c2c 	.word	0x08013c2c
 800b118:	2000ef38 	.word	0x2000ef38
 800b11c:	2000ef2c 	.word	0x2000ef2c

0800b120 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b12e:	4b12      	ldr	r3, [pc, #72]	@ (800b178 <tcp_kill_timewait+0x58>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e012      	b.n	800b15c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b136:	4b11      	ldr	r3, [pc, #68]	@ (800b17c <tcp_kill_timewait+0x5c>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d807      	bhi.n	800b156 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <tcp_kill_timewait+0x5c>)
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e9      	bne.n	800b136 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b168:	68b8      	ldr	r0, [r7, #8]
 800b16a:	f7ff f9d9 	bl	800a520 <tcp_abort>
  }
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	2000ef3c 	.word	0x2000ef3c
 800b17c:	2000ef2c 	.word	0x2000ef2c

0800b180 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b186:	4b10      	ldr	r3, [pc, #64]	@ (800b1c8 <tcp_handle_closepend+0x48>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b18c:	e014      	b.n	800b1b8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	8b5b      	ldrh	r3, [r3, #26]
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8b5b      	ldrh	r3, [r3, #26]
 800b1a4:	f023 0308 	bic.w	r3, r3, #8
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff f862 	bl	800a278 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e7      	bne.n	800b18e <tcp_handle_closepend+0xe>
  }
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	2000ef38 	.word	0x2000ef38

0800b1cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f7fd fd18 	bl	8008c0c <memp_malloc>
 800b1dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d126      	bne.n	800b232 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b1e4:	f7ff ffcc 	bl	800b180 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b1e8:	f7ff ff9a 	bl	800b120 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f7fd fd0d 	bl	8008c0c <memp_malloc>
 800b1f2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d11b      	bne.n	800b232 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b1fa:	2009      	movs	r0, #9
 800b1fc:	f7ff ff46 	bl	800b08c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b200:	2001      	movs	r0, #1
 800b202:	f7fd fd03 	bl	8008c0c <memp_malloc>
 800b206:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d111      	bne.n	800b232 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b20e:	2008      	movs	r0, #8
 800b210:	f7ff ff3c 	bl	800b08c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b214:	2001      	movs	r0, #1
 800b216:	f7fd fcf9 	bl	8008c0c <memp_malloc>
 800b21a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d107      	bne.n	800b232 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff fee3 	bl	800aff0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b22a:	2001      	movs	r0, #1
 800b22c:	f7fd fcee 	bl	8008c0c <memp_malloc>
 800b230:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d03f      	beq.n	800b2b8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b238:	229c      	movs	r2, #156	@ 0x9c
 800b23a:	2100      	movs	r1, #0
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f007 f81e 	bl	801227e <memset>
    pcb->prio = prio;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	79fa      	ldrb	r2, [r7, #7]
 800b246:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b24e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b258:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	22ff      	movs	r2, #255	@ 0xff
 800b266:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b26e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2206      	movs	r2, #6
 800b274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2206      	movs	r2, #6
 800b27c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b284:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2201      	movs	r2, #1
 800b28a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800b28e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <tcp_alloc+0xf8>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <tcp_alloc+0xfc>)
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b2a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4a08      	ldr	r2, [pc, #32]	@ (800b2cc <tcp_alloc+0x100>)
 800b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a07      	ldr	r2, [pc, #28]	@ (800b2d0 <tcp_alloc+0x104>)
 800b2b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2000ef2c 	.word	0x2000ef2c
 800b2c8:	2000ef42 	.word	0x2000ef42
 800b2cc:	0800af85 	.word	0x0800af85
 800b2d0:	006ddd00 	.word	0x006ddd00

0800b2d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d107      	bne.n	800b2f2 <tcp_pcb_purge+0x1e>
 800b2e2:	4b21      	ldr	r3, [pc, #132]	@ (800b368 <tcp_pcb_purge+0x94>)
 800b2e4:	f640 0251 	movw	r2, #2129	@ 0x851
 800b2e8:	4920      	ldr	r1, [pc, #128]	@ (800b36c <tcp_pcb_purge+0x98>)
 800b2ea:	4821      	ldr	r0, [pc, #132]	@ (800b370 <tcp_pcb_purge+0x9c>)
 800b2ec:	f006 ff62 	bl	80121b4 <iprintf>
 800b2f0:	e037      	b.n	800b362 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7d1b      	ldrb	r3, [r3, #20]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d033      	beq.n	800b362 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b2fe:	2b0a      	cmp	r3, #10
 800b300:	d02f      	beq.n	800b362 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b306:	2b01      	cmp	r3, #1
 800b308:	d02b      	beq.n	800b362 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fb6e 	bl	80099f8 <pbuf_free>
      pcb->refused_data = NULL;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f986 	bl	800b63c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b336:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff fdc7 	bl	800aed0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fdc2 	bl	800aed0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08013be8 	.word	0x08013be8
 800b36c:	08014234 	.word	0x08014234
 800b370:	08013c2c 	.word	0x08013c2c

0800b374 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <tcp_pcb_remove+0x1e>
 800b384:	4b3e      	ldr	r3, [pc, #248]	@ (800b480 <tcp_pcb_remove+0x10c>)
 800b386:	f640 0283 	movw	r2, #2179	@ 0x883
 800b38a:	493e      	ldr	r1, [pc, #248]	@ (800b484 <tcp_pcb_remove+0x110>)
 800b38c:	483e      	ldr	r0, [pc, #248]	@ (800b488 <tcp_pcb_remove+0x114>)
 800b38e:	f006 ff11 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <tcp_pcb_remove+0x32>
 800b398:	4b39      	ldr	r3, [pc, #228]	@ (800b480 <tcp_pcb_remove+0x10c>)
 800b39a:	f640 0284 	movw	r2, #2180	@ 0x884
 800b39e:	493b      	ldr	r1, [pc, #236]	@ (800b48c <tcp_pcb_remove+0x118>)
 800b3a0:	4839      	ldr	r0, [pc, #228]	@ (800b488 <tcp_pcb_remove+0x114>)
 800b3a2:	f006 ff07 	bl	80121b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d105      	bne.n	800b3bc <tcp_pcb_remove+0x48>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e013      	b.n	800b3e4 <tcp_pcb_remove+0x70>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	e00c      	b.n	800b3de <tcp_pcb_remove+0x6a>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d104      	bne.n	800b3d8 <tcp_pcb_remove+0x64>
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	60da      	str	r2, [r3, #12]
 800b3d6:	e005      	b.n	800b3e4 <tcp_pcb_remove+0x70>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1ef      	bne.n	800b3c4 <tcp_pcb_remove+0x50>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b3ea:	6838      	ldr	r0, [r7, #0]
 800b3ec:	f7ff ff72 	bl	800b2d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	7d1b      	ldrb	r3, [r3, #20]
 800b3f4:	2b0a      	cmp	r3, #10
 800b3f6:	d013      	beq.n	800b420 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d00f      	beq.n	800b420 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	8b5b      	ldrh	r3, [r3, #26]
 800b404:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	8b5b      	ldrh	r3, [r3, #26]
 800b410:	f043 0302 	orr.w	r3, r3, #2
 800b414:	b29a      	uxth	r2, r3
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b41a:	6838      	ldr	r0, [r7, #0]
 800b41c:	f002 ff68 	bl	800e2f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	7d1b      	ldrb	r3, [r3, #20]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d020      	beq.n	800b46a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d006      	beq.n	800b43e <tcp_pcb_remove+0xca>
 800b430:	4b13      	ldr	r3, [pc, #76]	@ (800b480 <tcp_pcb_remove+0x10c>)
 800b432:	f640 0293 	movw	r2, #2195	@ 0x893
 800b436:	4916      	ldr	r1, [pc, #88]	@ (800b490 <tcp_pcb_remove+0x11c>)
 800b438:	4813      	ldr	r0, [pc, #76]	@ (800b488 <tcp_pcb_remove+0x114>)
 800b43a:	f006 febb 	bl	80121b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b442:	2b00      	cmp	r3, #0
 800b444:	d006      	beq.n	800b454 <tcp_pcb_remove+0xe0>
 800b446:	4b0e      	ldr	r3, [pc, #56]	@ (800b480 <tcp_pcb_remove+0x10c>)
 800b448:	f640 0294 	movw	r2, #2196	@ 0x894
 800b44c:	4911      	ldr	r1, [pc, #68]	@ (800b494 <tcp_pcb_remove+0x120>)
 800b44e:	480e      	ldr	r0, [pc, #56]	@ (800b488 <tcp_pcb_remove+0x114>)
 800b450:	f006 feb0 	bl	80121b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d006      	beq.n	800b46a <tcp_pcb_remove+0xf6>
 800b45c:	4b08      	ldr	r3, [pc, #32]	@ (800b480 <tcp_pcb_remove+0x10c>)
 800b45e:	f640 0296 	movw	r2, #2198	@ 0x896
 800b462:	490d      	ldr	r1, [pc, #52]	@ (800b498 <tcp_pcb_remove+0x124>)
 800b464:	4808      	ldr	r0, [pc, #32]	@ (800b488 <tcp_pcb_remove+0x114>)
 800b466:	f006 fea5 	bl	80121b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2200      	movs	r2, #0
 800b46e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2200      	movs	r2, #0
 800b474:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	08013be8 	.word	0x08013be8
 800b484:	08014250 	.word	0x08014250
 800b488:	08013c2c 	.word	0x08013c2c
 800b48c:	0801426c 	.word	0x0801426c
 800b490:	0801428c 	.word	0x0801428c
 800b494:	080142a4 	.word	0x080142a4
 800b498:	080142c0 	.word	0x080142c0

0800b49c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <tcp_next_iss+0x1c>
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d4 <tcp_next_iss+0x38>)
 800b4ac:	f640 02af 	movw	r2, #2223	@ 0x8af
 800b4b0:	4909      	ldr	r1, [pc, #36]	@ (800b4d8 <tcp_next_iss+0x3c>)
 800b4b2:	480a      	ldr	r0, [pc, #40]	@ (800b4dc <tcp_next_iss+0x40>)
 800b4b4:	f006 fe7e 	bl	80121b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b4b8:	4b09      	ldr	r3, [pc, #36]	@ (800b4e0 <tcp_next_iss+0x44>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	4b09      	ldr	r3, [pc, #36]	@ (800b4e4 <tcp_next_iss+0x48>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4a07      	ldr	r2, [pc, #28]	@ (800b4e0 <tcp_next_iss+0x44>)
 800b4c4:	6013      	str	r3, [r2, #0]
  return iss;
 800b4c6:	4b06      	ldr	r3, [pc, #24]	@ (800b4e0 <tcp_next_iss+0x44>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08013be8 	.word	0x08013be8
 800b4d8:	080142d8 	.word	0x080142d8
 800b4dc:	08013c2c 	.word	0x08013c2c
 800b4e0:	20000014 	.word	0x20000014
 800b4e4:	2000ef2c 	.word	0x2000ef2c

0800b4e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d106      	bne.n	800b50a <tcp_eff_send_mss_netif+0x22>
 800b4fc:	4b14      	ldr	r3, [pc, #80]	@ (800b550 <tcp_eff_send_mss_netif+0x68>)
 800b4fe:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800b502:	4914      	ldr	r1, [pc, #80]	@ (800b554 <tcp_eff_send_mss_netif+0x6c>)
 800b504:	4814      	ldr	r0, [pc, #80]	@ (800b558 <tcp_eff_send_mss_netif+0x70>)
 800b506:	f006 fe55 	bl	80121b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d101      	bne.n	800b514 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b510:	89fb      	ldrh	r3, [r7, #14]
 800b512:	e019      	b.n	800b548 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b518:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b51a:	8afb      	ldrh	r3, [r7, #22]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d012      	beq.n	800b546 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b520:	2328      	movs	r3, #40	@ 0x28
 800b522:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b524:	8afa      	ldrh	r2, [r7, #22]
 800b526:	8abb      	ldrh	r3, [r7, #20]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d904      	bls.n	800b536 <tcp_eff_send_mss_netif+0x4e>
 800b52c:	8afa      	ldrh	r2, [r7, #22]
 800b52e:	8abb      	ldrh	r3, [r7, #20]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	b29b      	uxth	r3, r3
 800b534:	e000      	b.n	800b538 <tcp_eff_send_mss_netif+0x50>
 800b536:	2300      	movs	r3, #0
 800b538:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b53a:	8a7a      	ldrh	r2, [r7, #18]
 800b53c:	89fb      	ldrh	r3, [r7, #14]
 800b53e:	4293      	cmp	r3, r2
 800b540:	bf28      	it	cs
 800b542:	4613      	movcs	r3, r2
 800b544:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b546:	89fb      	ldrh	r3, [r7, #14]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	08013be8 	.word	0x08013be8
 800b554:	080142f4 	.word	0x080142f4
 800b558:	08013c2c 	.word	0x08013c2c

0800b55c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d119      	bne.n	800b5a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b570:	4b10      	ldr	r3, [pc, #64]	@ (800b5b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b572:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b576:	4910      	ldr	r1, [pc, #64]	@ (800b5b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b578:	4810      	ldr	r0, [pc, #64]	@ (800b5bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b57a:	f006 fe1b 	bl	80121b4 <iprintf>

  while (pcb != NULL) {
 800b57e:	e011      	b.n	800b5a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d108      	bne.n	800b59e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7fe ffc4 	bl	800a520 <tcp_abort>
      pcb = next;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e002      	b.n	800b5a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1ea      	bne.n	800b580 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	08013be8 	.word	0x08013be8
 800b5b8:	0801431c 	.word	0x0801431c
 800b5bc:	08013c2c 	.word	0x08013c2c

0800b5c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d02a      	beq.n	800b626 <tcp_netif_ip_addr_changed+0x66>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d026      	beq.n	800b626 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b5d8:	4b15      	ldr	r3, [pc, #84]	@ (800b630 <tcp_netif_ip_addr_changed+0x70>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff ffbc 	bl	800b55c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b5e4:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <tcp_netif_ip_addr_changed+0x74>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff ffb6 	bl	800b55c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d017      	beq.n	800b626 <tcp_netif_ip_addr_changed+0x66>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d013      	beq.n	800b626 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b638 <tcp_netif_ip_addr_changed+0x78>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	e00c      	b.n	800b620 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d103      	bne.n	800b61a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1ef      	bne.n	800b606 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	2000ef38 	.word	0x2000ef38
 800b634:	2000ef30 	.word	0x2000ef30
 800b638:	2000ef34 	.word	0x2000ef34

0800b63c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff fc3d 	bl	800aed0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b08d      	sub	sp, #52	@ 0x34
 800b668:	af04      	add	r7, sp, #16
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d105      	bne.n	800b680 <tcp_input+0x1c>
 800b674:	4b9b      	ldr	r3, [pc, #620]	@ (800b8e4 <tcp_input+0x280>)
 800b676:	2283      	movs	r2, #131	@ 0x83
 800b678:	499b      	ldr	r1, [pc, #620]	@ (800b8e8 <tcp_input+0x284>)
 800b67a:	489c      	ldr	r0, [pc, #624]	@ (800b8ec <tcp_input+0x288>)
 800b67c:	f006 fd9a 	bl	80121b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4a9a      	ldr	r2, [pc, #616]	@ (800b8f0 <tcp_input+0x28c>)
 800b686:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	895b      	ldrh	r3, [r3, #10]
 800b68c:	2b13      	cmp	r3, #19
 800b68e:	f240 83d1 	bls.w	800be34 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b692:	4b98      	ldr	r3, [pc, #608]	@ (800b8f4 <tcp_input+0x290>)
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	4a97      	ldr	r2, [pc, #604]	@ (800b8f4 <tcp_input+0x290>)
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f005 fc41 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f040 83c7 	bne.w	800be38 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b6aa:	4b92      	ldr	r3, [pc, #584]	@ (800b8f4 <tcp_input+0x290>)
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b6b2:	2be0      	cmp	r3, #224	@ 0xe0
 800b6b4:	f000 83c0 	beq.w	800be38 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b6b8:	4b8d      	ldr	r3, [pc, #564]	@ (800b8f0 <tcp_input+0x28c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	899b      	ldrh	r3, [r3, #12]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fc fddd 	bl	8008280 <lwip_htons>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	0b1b      	lsrs	r3, r3, #12
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b6d2:	7cbb      	ldrb	r3, [r7, #18]
 800b6d4:	2b13      	cmp	r3, #19
 800b6d6:	f240 83b1 	bls.w	800be3c <tcp_input+0x7d8>
 800b6da:	7cbb      	ldrb	r3, [r7, #18]
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	891b      	ldrh	r3, [r3, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	f200 83aa 	bhi.w	800be3c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b6e8:	7cbb      	ldrb	r3, [r7, #18]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b14      	subs	r3, #20
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	4b81      	ldr	r3, [pc, #516]	@ (800b8f8 <tcp_input+0x294>)
 800b6f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b6f4:	4b81      	ldr	r3, [pc, #516]	@ (800b8fc <tcp_input+0x298>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	895a      	ldrh	r2, [r3, #10]
 800b6fe:	7cbb      	ldrb	r3, [r7, #18]
 800b700:	b29b      	uxth	r3, r3
 800b702:	429a      	cmp	r2, r3
 800b704:	d309      	bcc.n	800b71a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b706:	4b7c      	ldr	r3, [pc, #496]	@ (800b8f8 <tcp_input+0x294>)
 800b708:	881a      	ldrh	r2, [r3, #0]
 800b70a:	4b7d      	ldr	r3, [pc, #500]	@ (800b900 <tcp_input+0x29c>)
 800b70c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b70e:	7cbb      	ldrb	r3, [r7, #18]
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7fe f8ea 	bl	80098ec <pbuf_remove_header>
 800b718:	e04e      	b.n	800b7b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <tcp_input+0xca>
 800b722:	4b70      	ldr	r3, [pc, #448]	@ (800b8e4 <tcp_input+0x280>)
 800b724:	22c2      	movs	r2, #194	@ 0xc2
 800b726:	4977      	ldr	r1, [pc, #476]	@ (800b904 <tcp_input+0x2a0>)
 800b728:	4870      	ldr	r0, [pc, #448]	@ (800b8ec <tcp_input+0x288>)
 800b72a:	f006 fd43 	bl	80121b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b72e:	2114      	movs	r1, #20
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7fe f8db 	bl	80098ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	895a      	ldrh	r2, [r3, #10]
 800b73a:	4b71      	ldr	r3, [pc, #452]	@ (800b900 <tcp_input+0x29c>)
 800b73c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b73e:	4b6e      	ldr	r3, [pc, #440]	@ (800b8f8 <tcp_input+0x294>)
 800b740:	881a      	ldrh	r2, [r3, #0]
 800b742:	4b6f      	ldr	r3, [pc, #444]	@ (800b900 <tcp_input+0x29c>)
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b74a:	4b6d      	ldr	r3, [pc, #436]	@ (800b900 <tcp_input+0x29c>)
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7fe f8cb 	bl	80098ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	895b      	ldrh	r3, [r3, #10]
 800b75c:	8a3a      	ldrh	r2, [r7, #16]
 800b75e:	429a      	cmp	r2, r3
 800b760:	f200 836e 	bhi.w	800be40 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	4a64      	ldr	r2, [pc, #400]	@ (800b8fc <tcp_input+0x298>)
 800b76c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	8a3a      	ldrh	r2, [r7, #16]
 800b774:	4611      	mov	r1, r2
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe f8b8 	bl	80098ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	891a      	ldrh	r2, [r3, #8]
 800b780:	8a3b      	ldrh	r3, [r7, #16]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	895b      	ldrh	r3, [r3, #10]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d005      	beq.n	800b79e <tcp_input+0x13a>
 800b792:	4b54      	ldr	r3, [pc, #336]	@ (800b8e4 <tcp_input+0x280>)
 800b794:	22df      	movs	r2, #223	@ 0xdf
 800b796:	495c      	ldr	r1, [pc, #368]	@ (800b908 <tcp_input+0x2a4>)
 800b798:	4854      	ldr	r0, [pc, #336]	@ (800b8ec <tcp_input+0x288>)
 800b79a:	f006 fd0b 	bl	80121b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	891a      	ldrh	r2, [r3, #8]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	891b      	ldrh	r3, [r3, #8]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d005      	beq.n	800b7b8 <tcp_input+0x154>
 800b7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800b8e4 <tcp_input+0x280>)
 800b7ae:	22e0      	movs	r2, #224	@ 0xe0
 800b7b0:	4956      	ldr	r1, [pc, #344]	@ (800b90c <tcp_input+0x2a8>)
 800b7b2:	484e      	ldr	r0, [pc, #312]	@ (800b8ec <tcp_input+0x288>)
 800b7b4:	f006 fcfe 	bl	80121b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b7b8:	4b4d      	ldr	r3, [pc, #308]	@ (800b8f0 <tcp_input+0x28c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4a4b      	ldr	r2, [pc, #300]	@ (800b8f0 <tcp_input+0x28c>)
 800b7c2:	6814      	ldr	r4, [r2, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fc fd5b 	bl	8008280 <lwip_htons>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b7ce:	4b48      	ldr	r3, [pc, #288]	@ (800b8f0 <tcp_input+0x28c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	885b      	ldrh	r3, [r3, #2]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	4a46      	ldr	r2, [pc, #280]	@ (800b8f0 <tcp_input+0x28c>)
 800b7d8:	6814      	ldr	r4, [r2, #0]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fc fd50 	bl	8008280 <lwip_htons>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b7e4:	4b42      	ldr	r3, [pc, #264]	@ (800b8f0 <tcp_input+0x28c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4a41      	ldr	r2, [pc, #260]	@ (800b8f0 <tcp_input+0x28c>)
 800b7ec:	6814      	ldr	r4, [r2, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fc fd5b 	bl	80082aa <lwip_htonl>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	6063      	str	r3, [r4, #4]
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	4a45      	ldr	r2, [pc, #276]	@ (800b910 <tcp_input+0x2ac>)
 800b7fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b7fe:	4b3c      	ldr	r3, [pc, #240]	@ (800b8f0 <tcp_input+0x28c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	4a3a      	ldr	r2, [pc, #232]	@ (800b8f0 <tcp_input+0x28c>)
 800b806:	6814      	ldr	r4, [r2, #0]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fc fd4e 	bl	80082aa <lwip_htonl>
 800b80e:	4603      	mov	r3, r0
 800b810:	60a3      	str	r3, [r4, #8]
 800b812:	68a3      	ldr	r3, [r4, #8]
 800b814:	4a3f      	ldr	r2, [pc, #252]	@ (800b914 <tcp_input+0x2b0>)
 800b816:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b818:	4b35      	ldr	r3, [pc, #212]	@ (800b8f0 <tcp_input+0x28c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	89db      	ldrh	r3, [r3, #14]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	4a33      	ldr	r2, [pc, #204]	@ (800b8f0 <tcp_input+0x28c>)
 800b822:	6814      	ldr	r4, [r2, #0]
 800b824:	4618      	mov	r0, r3
 800b826:	f7fc fd2b 	bl	8008280 <lwip_htons>
 800b82a:	4603      	mov	r3, r0
 800b82c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b82e:	4b30      	ldr	r3, [pc, #192]	@ (800b8f0 <tcp_input+0x28c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	899b      	ldrh	r3, [r3, #12]
 800b834:	b29b      	uxth	r3, r3
 800b836:	4618      	mov	r0, r3
 800b838:	f7fc fd22 	bl	8008280 <lwip_htons>
 800b83c:	4603      	mov	r3, r0
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b844:	b2da      	uxtb	r2, r3
 800b846:	4b34      	ldr	r3, [pc, #208]	@ (800b918 <tcp_input+0x2b4>)
 800b848:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	891a      	ldrh	r2, [r3, #8]
 800b84e:	4b33      	ldr	r3, [pc, #204]	@ (800b91c <tcp_input+0x2b8>)
 800b850:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b852:	4b31      	ldr	r3, [pc, #196]	@ (800b918 <tcp_input+0x2b4>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00c      	beq.n	800b878 <tcp_input+0x214>
    tcplen++;
 800b85e:	4b2f      	ldr	r3, [pc, #188]	@ (800b91c <tcp_input+0x2b8>)
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	3301      	adds	r3, #1
 800b864:	b29a      	uxth	r2, r3
 800b866:	4b2d      	ldr	r3, [pc, #180]	@ (800b91c <tcp_input+0x2b8>)
 800b868:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	891a      	ldrh	r2, [r3, #8]
 800b86e:	4b2b      	ldr	r3, [pc, #172]	@ (800b91c <tcp_input+0x2b8>)
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	429a      	cmp	r2, r3
 800b874:	f200 82e6 	bhi.w	800be44 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b87c:	4b28      	ldr	r3, [pc, #160]	@ (800b920 <tcp_input+0x2bc>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	e09d      	b.n	800b9c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	7d1b      	ldrb	r3, [r3, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d105      	bne.n	800b898 <tcp_input+0x234>
 800b88c:	4b15      	ldr	r3, [pc, #84]	@ (800b8e4 <tcp_input+0x280>)
 800b88e:	22fb      	movs	r2, #251	@ 0xfb
 800b890:	4924      	ldr	r1, [pc, #144]	@ (800b924 <tcp_input+0x2c0>)
 800b892:	4816      	ldr	r0, [pc, #88]	@ (800b8ec <tcp_input+0x288>)
 800b894:	f006 fc8e 	bl	80121b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	7d1b      	ldrb	r3, [r3, #20]
 800b89c:	2b0a      	cmp	r3, #10
 800b89e:	d105      	bne.n	800b8ac <tcp_input+0x248>
 800b8a0:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <tcp_input+0x280>)
 800b8a2:	22fc      	movs	r2, #252	@ 0xfc
 800b8a4:	4920      	ldr	r1, [pc, #128]	@ (800b928 <tcp_input+0x2c4>)
 800b8a6:	4811      	ldr	r0, [pc, #68]	@ (800b8ec <tcp_input+0x288>)
 800b8a8:	f006 fc84 	bl	80121b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	7d1b      	ldrb	r3, [r3, #20]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d105      	bne.n	800b8c0 <tcp_input+0x25c>
 800b8b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e4 <tcp_input+0x280>)
 800b8b6:	22fd      	movs	r2, #253	@ 0xfd
 800b8b8:	491c      	ldr	r1, [pc, #112]	@ (800b92c <tcp_input+0x2c8>)
 800b8ba:	480c      	ldr	r0, [pc, #48]	@ (800b8ec <tcp_input+0x288>)
 800b8bc:	f006 fc7a 	bl	80121b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	7a1b      	ldrb	r3, [r3, #8]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d033      	beq.n	800b930 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	7a1a      	ldrb	r2, [r3, #8]
 800b8cc:	4b09      	ldr	r3, [pc, #36]	@ (800b8f4 <tcp_input+0x290>)
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d029      	beq.n	800b930 <tcp_input+0x2cc>
      prev = pcb;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	61bb      	str	r3, [r7, #24]
      continue;
 800b8e0:	e06b      	b.n	800b9ba <tcp_input+0x356>
 800b8e2:	bf00      	nop
 800b8e4:	08014350 	.word	0x08014350
 800b8e8:	08014384 	.word	0x08014384
 800b8ec:	0801439c 	.word	0x0801439c
 800b8f0:	2000ef54 	.word	0x2000ef54
 800b8f4:	20007bb0 	.word	0x20007bb0
 800b8f8:	2000ef58 	.word	0x2000ef58
 800b8fc:	2000ef5c 	.word	0x2000ef5c
 800b900:	2000ef5a 	.word	0x2000ef5a
 800b904:	080143c4 	.word	0x080143c4
 800b908:	080143d4 	.word	0x080143d4
 800b90c:	080143e0 	.word	0x080143e0
 800b910:	2000ef64 	.word	0x2000ef64
 800b914:	2000ef68 	.word	0x2000ef68
 800b918:	2000ef70 	.word	0x2000ef70
 800b91c:	2000ef6e 	.word	0x2000ef6e
 800b920:	2000ef38 	.word	0x2000ef38
 800b924:	08014400 	.word	0x08014400
 800b928:	08014428 	.word	0x08014428
 800b92c:	08014454 	.word	0x08014454
    }

    if (pcb->remote_port == tcphdr->src &&
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	8b1a      	ldrh	r2, [r3, #24]
 800b934:	4b72      	ldr	r3, [pc, #456]	@ (800bb00 <tcp_input+0x49c>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d13a      	bne.n	800b9b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	8ada      	ldrh	r2, [r3, #22]
 800b944:	4b6e      	ldr	r3, [pc, #440]	@ (800bb00 <tcp_input+0x49c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	885b      	ldrh	r3, [r3, #2]
 800b94a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d132      	bne.n	800b9b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	4b6b      	ldr	r3, [pc, #428]	@ (800bb04 <tcp_input+0x4a0>)
 800b956:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b958:	429a      	cmp	r2, r3
 800b95a:	d12c      	bne.n	800b9b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b68      	ldr	r3, [pc, #416]	@ (800bb04 <tcp_input+0x4a0>)
 800b962:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b964:	429a      	cmp	r2, r3
 800b966:	d126      	bne.n	800b9b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d106      	bne.n	800b980 <tcp_input+0x31c>
 800b972:	4b65      	ldr	r3, [pc, #404]	@ (800bb08 <tcp_input+0x4a4>)
 800b974:	f240 120d 	movw	r2, #269	@ 0x10d
 800b978:	4964      	ldr	r1, [pc, #400]	@ (800bb0c <tcp_input+0x4a8>)
 800b97a:	4865      	ldr	r0, [pc, #404]	@ (800bb10 <tcp_input+0x4ac>)
 800b97c:	f006 fc1a 	bl	80121b4 <iprintf>
      if (prev != NULL) {
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <tcp_input+0x338>
        prev->next = pcb->next;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	68da      	ldr	r2, [r3, #12]
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b98e:	4b61      	ldr	r3, [pc, #388]	@ (800bb14 <tcp_input+0x4b0>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b996:	4a5f      	ldr	r2, [pc, #380]	@ (800bb14 <tcp_input+0x4b0>)
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	69fa      	ldr	r2, [r7, #28]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d111      	bne.n	800b9ca <tcp_input+0x366>
 800b9a6:	4b58      	ldr	r3, [pc, #352]	@ (800bb08 <tcp_input+0x4a4>)
 800b9a8:	f240 1215 	movw	r2, #277	@ 0x115
 800b9ac:	495a      	ldr	r1, [pc, #360]	@ (800bb18 <tcp_input+0x4b4>)
 800b9ae:	4858      	ldr	r0, [pc, #352]	@ (800bb10 <tcp_input+0x4ac>)
 800b9b0:	f006 fc00 	bl	80121b4 <iprintf>
      break;
 800b9b4:	e009      	b.n	800b9ca <tcp_input+0x366>
    }
    prev = pcb;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f47f af5e 	bne.w	800b884 <tcp_input+0x220>
 800b9c8:	e000      	b.n	800b9cc <tcp_input+0x368>
      break;
 800b9ca:	bf00      	nop
  }

  if (pcb == NULL) {
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f040 80aa 	bne.w	800bb28 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9d4:	4b51      	ldr	r3, [pc, #324]	@ (800bb1c <tcp_input+0x4b8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	e03f      	b.n	800ba5c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	7d1b      	ldrb	r3, [r3, #20]
 800b9e0:	2b0a      	cmp	r3, #10
 800b9e2:	d006      	beq.n	800b9f2 <tcp_input+0x38e>
 800b9e4:	4b48      	ldr	r3, [pc, #288]	@ (800bb08 <tcp_input+0x4a4>)
 800b9e6:	f240 121f 	movw	r2, #287	@ 0x11f
 800b9ea:	494d      	ldr	r1, [pc, #308]	@ (800bb20 <tcp_input+0x4bc>)
 800b9ec:	4848      	ldr	r0, [pc, #288]	@ (800bb10 <tcp_input+0x4ac>)
 800b9ee:	f006 fbe1 	bl	80121b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	7a1b      	ldrb	r3, [r3, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d009      	beq.n	800ba0e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	7a1a      	ldrb	r2, [r3, #8]
 800b9fe:	4b41      	ldr	r3, [pc, #260]	@ (800bb04 <tcp_input+0x4a0>)
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba06:	3301      	adds	r3, #1
 800ba08:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d122      	bne.n	800ba54 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	8b1a      	ldrh	r2, [r3, #24]
 800ba12:	4b3b      	ldr	r3, [pc, #236]	@ (800bb00 <tcp_input+0x49c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d11b      	bne.n	800ba56 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	8ada      	ldrh	r2, [r3, #22]
 800ba22:	4b37      	ldr	r3, [pc, #220]	@ (800bb00 <tcp_input+0x49c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d113      	bne.n	800ba56 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	4b34      	ldr	r3, [pc, #208]	@ (800bb04 <tcp_input+0x4a0>)
 800ba34:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d10d      	bne.n	800ba56 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b31      	ldr	r3, [pc, #196]	@ (800bb04 <tcp_input+0x4a0>)
 800ba40:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d107      	bne.n	800ba56 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ba46:	69f8      	ldr	r0, [r7, #28]
 800ba48:	f000 fb56 	bl	800c0f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7fd ffd3 	bl	80099f8 <pbuf_free>
        return;
 800ba52:	e1fd      	b.n	800be50 <tcp_input+0x7ec>
        continue;
 800ba54:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	61fb      	str	r3, [r7, #28]
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1bc      	bne.n	800b9dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba66:	4b2f      	ldr	r3, [pc, #188]	@ (800bb24 <tcp_input+0x4c0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	e02a      	b.n	800bac4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	7a1b      	ldrb	r3, [r3, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00c      	beq.n	800ba90 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	7a1a      	ldrb	r2, [r3, #8]
 800ba7a:	4b22      	ldr	r3, [pc, #136]	@ (800bb04 <tcp_input+0x4a0>)
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d002      	beq.n	800ba90 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	61bb      	str	r3, [r7, #24]
        continue;
 800ba8e:	e016      	b.n	800babe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	8ada      	ldrh	r2, [r3, #22]
 800ba94:	4b1a      	ldr	r3, [pc, #104]	@ (800bb00 <tcp_input+0x49c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d10c      	bne.n	800baba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b17      	ldr	r3, [pc, #92]	@ (800bb04 <tcp_input+0x4a0>)
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d00f      	beq.n	800bacc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00d      	beq.n	800bace <tcp_input+0x46a>
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1d1      	bne.n	800ba6e <tcp_input+0x40a>
 800baca:	e000      	b.n	800bace <tcp_input+0x46a>
            break;
 800bacc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d029      	beq.n	800bb28 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bae2:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <tcp_input+0x4c0>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800baea:	4a0e      	ldr	r2, [pc, #56]	@ (800bb24 <tcp_input+0x4c0>)
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800baf0:	6978      	ldr	r0, [r7, #20]
 800baf2:	f000 fa03 	bl	800befc <tcp_listen_input>
      }
      pbuf_free(p);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7fd ff7e 	bl	80099f8 <pbuf_free>
      return;
 800bafc:	e1a8      	b.n	800be50 <tcp_input+0x7ec>
 800bafe:	bf00      	nop
 800bb00:	2000ef54 	.word	0x2000ef54
 800bb04:	20007bb0 	.word	0x20007bb0
 800bb08:	08014350 	.word	0x08014350
 800bb0c:	0801447c 	.word	0x0801447c
 800bb10:	0801439c 	.word	0x0801439c
 800bb14:	2000ef38 	.word	0x2000ef38
 800bb18:	080144a8 	.word	0x080144a8
 800bb1c:	2000ef3c 	.word	0x2000ef3c
 800bb20:	080144d4 	.word	0x080144d4
 800bb24:	2000ef34 	.word	0x2000ef34
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 8158 	beq.w	800bde0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bb30:	4b95      	ldr	r3, [pc, #596]	@ (800bd88 <tcp_input+0x724>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	891a      	ldrh	r2, [r3, #8]
 800bb3a:	4b93      	ldr	r3, [pc, #588]	@ (800bd88 <tcp_input+0x724>)
 800bb3c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bb3e:	4a92      	ldr	r2, [pc, #584]	@ (800bd88 <tcp_input+0x724>)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bb44:	4b91      	ldr	r3, [pc, #580]	@ (800bd8c <tcp_input+0x728>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a8f      	ldr	r2, [pc, #572]	@ (800bd88 <tcp_input+0x724>)
 800bb4a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bb4c:	4b90      	ldr	r3, [pc, #576]	@ (800bd90 <tcp_input+0x72c>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bb52:	4b90      	ldr	r3, [pc, #576]	@ (800bd94 <tcp_input+0x730>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bb58:	4b8f      	ldr	r3, [pc, #572]	@ (800bd98 <tcp_input+0x734>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bb5e:	4b8f      	ldr	r3, [pc, #572]	@ (800bd9c <tcp_input+0x738>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	f003 0308 	and.w	r3, r3, #8
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d006      	beq.n	800bb78 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7b5b      	ldrb	r3, [r3, #13]
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d017      	beq.n	800bbb0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bb80:	69f8      	ldr	r0, [r7, #28]
 800bb82:	f7ff f929 	bl	800add8 <tcp_process_refused_data>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f113 0f0d 	cmn.w	r3, #13
 800bb8c:	d007      	beq.n	800bb9e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00c      	beq.n	800bbb0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bb96:	4b82      	ldr	r3, [pc, #520]	@ (800bda0 <tcp_input+0x73c>)
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d008      	beq.n	800bbb0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f040 80e3 	bne.w	800bd6e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bba8:	69f8      	ldr	r0, [r7, #28]
 800bbaa:	f003 f9a7 	bl	800eefc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bbae:	e0de      	b.n	800bd6e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bbb0:	4a7c      	ldr	r2, [pc, #496]	@ (800bda4 <tcp_input+0x740>)
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bbb6:	69f8      	ldr	r0, [r7, #28]
 800bbb8:	f000 fb18 	bl	800c1ec <tcp_process>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bbc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbc4:	f113 0f0d 	cmn.w	r3, #13
 800bbc8:	f000 80d3 	beq.w	800bd72 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bbcc:	4b71      	ldr	r3, [pc, #452]	@ (800bd94 <tcp_input+0x730>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d015      	beq.n	800bc04 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d008      	beq.n	800bbf4 <tcp_input+0x590>
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	6912      	ldr	r2, [r2, #16]
 800bbec:	f06f 010d 	mvn.w	r1, #13
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bbf4:	69f9      	ldr	r1, [r7, #28]
 800bbf6:	486c      	ldr	r0, [pc, #432]	@ (800bda8 <tcp_input+0x744>)
 800bbf8:	f7ff fbbc 	bl	800b374 <tcp_pcb_remove>
        tcp_free(pcb);
 800bbfc:	69f8      	ldr	r0, [r7, #28]
 800bbfe:	f7fe f9a7 	bl	8009f50 <tcp_free>
 800bc02:	e0da      	b.n	800bdba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bc08:	4b63      	ldr	r3, [pc, #396]	@ (800bd98 <tcp_input+0x734>)
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01d      	beq.n	800bc4c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bc10:	4b61      	ldr	r3, [pc, #388]	@ (800bd98 <tcp_input+0x734>)
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <tcp_input+0x5d2>
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc26:	69fa      	ldr	r2, [r7, #28]
 800bc28:	6910      	ldr	r0, [r2, #16]
 800bc2a:	89fa      	ldrh	r2, [r7, #14]
 800bc2c:	69f9      	ldr	r1, [r7, #28]
 800bc2e:	4798      	blx	r3
 800bc30:	4603      	mov	r3, r0
 800bc32:	74fb      	strb	r3, [r7, #19]
 800bc34:	e001      	b.n	800bc3a <tcp_input+0x5d6>
 800bc36:	2300      	movs	r3, #0
 800bc38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bc3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc3e:	f113 0f0d 	cmn.w	r3, #13
 800bc42:	f000 8098 	beq.w	800bd76 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bc46:	4b54      	ldr	r3, [pc, #336]	@ (800bd98 <tcp_input+0x734>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bc4c:	69f8      	ldr	r0, [r7, #28]
 800bc4e:	f000 f915 	bl	800be7c <tcp_input_delayed_close>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8090 	bne.w	800bd7a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bc5a:	4b4d      	ldr	r3, [pc, #308]	@ (800bd90 <tcp_input+0x72c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d041      	beq.n	800bce6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d006      	beq.n	800bc78 <tcp_input+0x614>
 800bc6a:	4b50      	ldr	r3, [pc, #320]	@ (800bdac <tcp_input+0x748>)
 800bc6c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800bc70:	494f      	ldr	r1, [pc, #316]	@ (800bdb0 <tcp_input+0x74c>)
 800bc72:	4850      	ldr	r0, [pc, #320]	@ (800bdb4 <tcp_input+0x750>)
 800bc74:	f006 fa9e 	bl	80121b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	8b5b      	ldrh	r3, [r3, #26]
 800bc7c:	f003 0310 	and.w	r3, r3, #16
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d008      	beq.n	800bc96 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bc84:	4b42      	ldr	r3, [pc, #264]	@ (800bd90 <tcp_input+0x72c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fd feb5 	bl	80099f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bc8e:	69f8      	ldr	r0, [r7, #28]
 800bc90:	f7fe fc46 	bl	800a520 <tcp_abort>
            goto aborted;
 800bc94:	e091      	b.n	800bdba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00c      	beq.n	800bcba <tcp_input+0x656>
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	6918      	ldr	r0, [r3, #16]
 800bcaa:	4b39      	ldr	r3, [pc, #228]	@ (800bd90 <tcp_input+0x72c>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	69f9      	ldr	r1, [r7, #28]
 800bcb2:	47a0      	blx	r4
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	74fb      	strb	r3, [r7, #19]
 800bcb8:	e008      	b.n	800bccc <tcp_input+0x668>
 800bcba:	4b35      	ldr	r3, [pc, #212]	@ (800bd90 <tcp_input+0x72c>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	69f9      	ldr	r1, [r7, #28]
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	f7ff f95e 	bl	800af84 <tcp_recv_null>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bccc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcd0:	f113 0f0d 	cmn.w	r3, #13
 800bcd4:	d053      	beq.n	800bd7e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bcd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bcde:	4b2c      	ldr	r3, [pc, #176]	@ (800bd90 <tcp_input+0x72c>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bce6:	4b2b      	ldr	r3, [pc, #172]	@ (800bd94 <tcp_input+0x730>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	f003 0320 	and.w	r3, r3, #32
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d030      	beq.n	800bd54 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d009      	beq.n	800bd0e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcfe:	7b5a      	ldrb	r2, [r3, #13]
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd04:	f042 0220 	orr.w	r2, r2, #32
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	735a      	strb	r2, [r3, #13]
 800bd0c:	e022      	b.n	800bd54 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd12:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bd16:	d005      	beq.n	800bd24 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <tcp_input+0x6e2>
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	6918      	ldr	r0, [r3, #16]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	69f9      	ldr	r1, [r7, #28]
 800bd3e:	47a0      	blx	r4
 800bd40:	4603      	mov	r3, r0
 800bd42:	74fb      	strb	r3, [r7, #19]
 800bd44:	e001      	b.n	800bd4a <tcp_input+0x6e6>
 800bd46:	2300      	movs	r3, #0
 800bd48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bd4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd4e:	f113 0f0d 	cmn.w	r3, #13
 800bd52:	d016      	beq.n	800bd82 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bd54:	4b13      	ldr	r3, [pc, #76]	@ (800bda4 <tcp_input+0x740>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bd5a:	69f8      	ldr	r0, [r7, #28]
 800bd5c:	f000 f88e 	bl	800be7c <tcp_input_delayed_close>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d128      	bne.n	800bdb8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bd66:	69f8      	ldr	r0, [r7, #28]
 800bd68:	f002 fac2 	bl	800e2f0 <tcp_output>
 800bd6c:	e025      	b.n	800bdba <tcp_input+0x756>
        goto aborted;
 800bd6e:	bf00      	nop
 800bd70:	e023      	b.n	800bdba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bd72:	bf00      	nop
 800bd74:	e021      	b.n	800bdba <tcp_input+0x756>
              goto aborted;
 800bd76:	bf00      	nop
 800bd78:	e01f      	b.n	800bdba <tcp_input+0x756>
          goto aborted;
 800bd7a:	bf00      	nop
 800bd7c:	e01d      	b.n	800bdba <tcp_input+0x756>
            goto aborted;
 800bd7e:	bf00      	nop
 800bd80:	e01b      	b.n	800bdba <tcp_input+0x756>
              goto aborted;
 800bd82:	bf00      	nop
 800bd84:	e019      	b.n	800bdba <tcp_input+0x756>
 800bd86:	bf00      	nop
 800bd88:	2000ef44 	.word	0x2000ef44
 800bd8c:	2000ef54 	.word	0x2000ef54
 800bd90:	2000ef74 	.word	0x2000ef74
 800bd94:	2000ef71 	.word	0x2000ef71
 800bd98:	2000ef6c 	.word	0x2000ef6c
 800bd9c:	2000ef70 	.word	0x2000ef70
 800bda0:	2000ef6e 	.word	0x2000ef6e
 800bda4:	2000ef78 	.word	0x2000ef78
 800bda8:	2000ef38 	.word	0x2000ef38
 800bdac:	08014350 	.word	0x08014350
 800bdb0:	08014504 	.word	0x08014504
 800bdb4:	0801439c 	.word	0x0801439c
          goto aborted;
 800bdb8:	bf00      	nop
    tcp_input_pcb = NULL;
 800bdba:	4b27      	ldr	r3, [pc, #156]	@ (800be58 <tcp_input+0x7f4>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bdc0:	4b26      	ldr	r3, [pc, #152]	@ (800be5c <tcp_input+0x7f8>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bdc6:	4b26      	ldr	r3, [pc, #152]	@ (800be60 <tcp_input+0x7fc>)
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d03f      	beq.n	800be4e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bdce:	4b24      	ldr	r3, [pc, #144]	@ (800be60 <tcp_input+0x7fc>)
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fd fe10 	bl	80099f8 <pbuf_free>
      inseg.p = NULL;
 800bdd8:	4b21      	ldr	r3, [pc, #132]	@ (800be60 <tcp_input+0x7fc>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bdde:	e036      	b.n	800be4e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bde0:	4b20      	ldr	r3, [pc, #128]	@ (800be64 <tcp_input+0x800>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fc fa49 	bl	8008280 <lwip_htons>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0304 	and.w	r3, r3, #4
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d118      	bne.n	800be2c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdfa:	4b1b      	ldr	r3, [pc, #108]	@ (800be68 <tcp_input+0x804>)
 800bdfc:	6819      	ldr	r1, [r3, #0]
 800bdfe:	4b1b      	ldr	r3, [pc, #108]	@ (800be6c <tcp_input+0x808>)
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	4b1a      	ldr	r3, [pc, #104]	@ (800be70 <tcp_input+0x80c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be0a:	4b16      	ldr	r3, [pc, #88]	@ (800be64 <tcp_input+0x800>)
 800be0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be0e:	885b      	ldrh	r3, [r3, #2]
 800be10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be12:	4a14      	ldr	r2, [pc, #80]	@ (800be64 <tcp_input+0x800>)
 800be14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be16:	8812      	ldrh	r2, [r2, #0]
 800be18:	b292      	uxth	r2, r2
 800be1a:	9202      	str	r2, [sp, #8]
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	4b15      	ldr	r3, [pc, #84]	@ (800be74 <tcp_input+0x810>)
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	4b15      	ldr	r3, [pc, #84]	@ (800be78 <tcp_input+0x814>)
 800be24:	4602      	mov	r2, r0
 800be26:	2000      	movs	r0, #0
 800be28:	f003 f816 	bl	800ee58 <tcp_rst>
    pbuf_free(p);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7fd fde3 	bl	80099f8 <pbuf_free>
  return;
 800be32:	e00c      	b.n	800be4e <tcp_input+0x7ea>
    goto dropped;
 800be34:	bf00      	nop
 800be36:	e006      	b.n	800be46 <tcp_input+0x7e2>
    goto dropped;
 800be38:	bf00      	nop
 800be3a:	e004      	b.n	800be46 <tcp_input+0x7e2>
    goto dropped;
 800be3c:	bf00      	nop
 800be3e:	e002      	b.n	800be46 <tcp_input+0x7e2>
      goto dropped;
 800be40:	bf00      	nop
 800be42:	e000      	b.n	800be46 <tcp_input+0x7e2>
      goto dropped;
 800be44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7fd fdd6 	bl	80099f8 <pbuf_free>
 800be4c:	e000      	b.n	800be50 <tcp_input+0x7ec>
  return;
 800be4e:	bf00      	nop
}
 800be50:	3724      	adds	r7, #36	@ 0x24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd90      	pop	{r4, r7, pc}
 800be56:	bf00      	nop
 800be58:	2000ef78 	.word	0x2000ef78
 800be5c:	2000ef74 	.word	0x2000ef74
 800be60:	2000ef44 	.word	0x2000ef44
 800be64:	2000ef54 	.word	0x2000ef54
 800be68:	2000ef68 	.word	0x2000ef68
 800be6c:	2000ef6e 	.word	0x2000ef6e
 800be70:	2000ef64 	.word	0x2000ef64
 800be74:	20007bc0 	.word	0x20007bc0
 800be78:	20007bc4 	.word	0x20007bc4

0800be7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <tcp_input_delayed_close+0x1c>
 800be8a:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <tcp_input_delayed_close+0x6c>)
 800be8c:	f240 225a 	movw	r2, #602	@ 0x25a
 800be90:	4916      	ldr	r1, [pc, #88]	@ (800beec <tcp_input_delayed_close+0x70>)
 800be92:	4817      	ldr	r0, [pc, #92]	@ (800bef0 <tcp_input_delayed_close+0x74>)
 800be94:	f006 f98e 	bl	80121b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800be98:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <tcp_input_delayed_close+0x78>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01c      	beq.n	800bede <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8b5b      	ldrh	r3, [r3, #26]
 800bea8:	f003 0310 	and.w	r3, r3, #16
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10d      	bne.n	800becc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d008      	beq.n	800becc <tcp_input_delayed_close+0x50>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	6912      	ldr	r2, [r2, #16]
 800bec4:	f06f 010e 	mvn.w	r1, #14
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800becc:	6879      	ldr	r1, [r7, #4]
 800bece:	480a      	ldr	r0, [pc, #40]	@ (800bef8 <tcp_input_delayed_close+0x7c>)
 800bed0:	f7ff fa50 	bl	800b374 <tcp_pcb_remove>
    tcp_free(pcb);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fe f83b 	bl	8009f50 <tcp_free>
    return 1;
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	08014350 	.word	0x08014350
 800beec:	08014520 	.word	0x08014520
 800bef0:	0801439c 	.word	0x0801439c
 800bef4:	2000ef71 	.word	0x2000ef71
 800bef8:	2000ef38 	.word	0x2000ef38

0800befc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800befc:	b590      	push	{r4, r7, lr}
 800befe:	b08b      	sub	sp, #44	@ 0x2c
 800bf00:	af04      	add	r7, sp, #16
 800bf02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bf04:	4b6f      	ldr	r3, [pc, #444]	@ (800c0c4 <tcp_listen_input+0x1c8>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f040 80d2 	bne.w	800c0b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d106      	bne.n	800bf26 <tcp_listen_input+0x2a>
 800bf18:	4b6b      	ldr	r3, [pc, #428]	@ (800c0c8 <tcp_listen_input+0x1cc>)
 800bf1a:	f240 2281 	movw	r2, #641	@ 0x281
 800bf1e:	496b      	ldr	r1, [pc, #428]	@ (800c0cc <tcp_listen_input+0x1d0>)
 800bf20:	486b      	ldr	r0, [pc, #428]	@ (800c0d0 <tcp_listen_input+0x1d4>)
 800bf22:	f006 f947 	bl	80121b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bf26:	4b67      	ldr	r3, [pc, #412]	@ (800c0c4 <tcp_listen_input+0x1c8>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	f003 0310 	and.w	r3, r3, #16
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d019      	beq.n	800bf66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf32:	4b68      	ldr	r3, [pc, #416]	@ (800c0d4 <tcp_listen_input+0x1d8>)
 800bf34:	6819      	ldr	r1, [r3, #0]
 800bf36:	4b68      	ldr	r3, [pc, #416]	@ (800c0d8 <tcp_listen_input+0x1dc>)
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4b67      	ldr	r3, [pc, #412]	@ (800c0dc <tcp_listen_input+0x1e0>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf42:	4b67      	ldr	r3, [pc, #412]	@ (800c0e0 <tcp_listen_input+0x1e4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf46:	885b      	ldrh	r3, [r3, #2]
 800bf48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf4a:	4a65      	ldr	r2, [pc, #404]	@ (800c0e0 <tcp_listen_input+0x1e4>)
 800bf4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf4e:	8812      	ldrh	r2, [r2, #0]
 800bf50:	b292      	uxth	r2, r2
 800bf52:	9202      	str	r2, [sp, #8]
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	4b63      	ldr	r3, [pc, #396]	@ (800c0e4 <tcp_listen_input+0x1e8>)
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4b63      	ldr	r3, [pc, #396]	@ (800c0e8 <tcp_listen_input+0x1ec>)
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f002 ff7a 	bl	800ee58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bf64:	e0a9      	b.n	800c0ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bf66:	4b57      	ldr	r3, [pc, #348]	@ (800c0c4 <tcp_listen_input+0x1c8>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 80a3 	beq.w	800c0ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7d5b      	ldrb	r3, [r3, #21]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff f927 	bl	800b1cc <tcp_alloc>
 800bf7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d111      	bne.n	800bfaa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00a      	beq.n	800bfa4 <tcp_listen_input+0xa8>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	6910      	ldr	r0, [r2, #16]
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4798      	blx	r3
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73bb      	strb	r3, [r7, #14]
      return;
 800bfa2:	e08b      	b.n	800c0bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bfa4:	23f0      	movs	r3, #240	@ 0xf0
 800bfa6:	73bb      	strb	r3, [r7, #14]
      return;
 800bfa8:	e088      	b.n	800c0bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bfaa:	4b50      	ldr	r3, [pc, #320]	@ (800c0ec <tcp_listen_input+0x1f0>)
 800bfac:	695a      	ldr	r2, [r3, #20]
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bfb2:	4b4e      	ldr	r3, [pc, #312]	@ (800c0ec <tcp_listen_input+0x1f0>)
 800bfb4:	691a      	ldr	r2, [r3, #16]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	8ada      	ldrh	r2, [r3, #22]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bfc2:	4b47      	ldr	r3, [pc, #284]	@ (800c0e0 <tcp_listen_input+0x1e4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2203      	movs	r2, #3
 800bfd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bfd4:	4b41      	ldr	r3, [pc, #260]	@ (800c0dc <tcp_listen_input+0x1e0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800bfe6:	6978      	ldr	r0, [r7, #20]
 800bfe8:	f7ff fa58 	bl	800b49c <tcp_next_iss>
 800bfec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c006:	4b35      	ldr	r3, [pc, #212]	@ (800c0dc <tcp_listen_input+0x1e0>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1e5a      	subs	r2, r3, #1
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	691a      	ldr	r2, [r3, #16]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7a5b      	ldrb	r3, [r3, #9]
 800c022:	f003 030c 	and.w	r3, r3, #12
 800c026:	b2da      	uxtb	r2, r3
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7a1a      	ldrb	r2, [r3, #8]
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c034:	4b2e      	ldr	r3, [pc, #184]	@ (800c0f0 <tcp_listen_input+0x1f4>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	60da      	str	r2, [r3, #12]
 800c03c:	4a2c      	ldr	r2, [pc, #176]	@ (800c0f0 <tcp_listen_input+0x1f4>)
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	f003 f8cb 	bl	800f1dc <tcp_timer_needed>
 800c046:	4b2b      	ldr	r3, [pc, #172]	@ (800c0f4 <tcp_listen_input+0x1f8>)
 800c048:	2201      	movs	r2, #1
 800c04a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c04c:	6978      	ldr	r0, [r7, #20]
 800c04e:	f001 fd8b 	bl	800db68 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c052:	4b23      	ldr	r3, [pc, #140]	@ (800c0e0 <tcp_listen_input+0x1e4>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	89db      	ldrh	r3, [r3, #14]
 800c058:	b29a      	uxth	r2, r3
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	3304      	adds	r3, #4
 800c074:	4618      	mov	r0, r3
 800c076:	f004 fcbf 	bl	80109f8 <ip4_route>
 800c07a:	4601      	mov	r1, r0
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	3304      	adds	r3, #4
 800c080:	461a      	mov	r2, r3
 800c082:	4620      	mov	r0, r4
 800c084:	f7ff fa30 	bl	800b4e8 <tcp_eff_send_mss_netif>
 800c088:	4603      	mov	r3, r0
 800c08a:	461a      	mov	r2, r3
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c090:	2112      	movs	r1, #18
 800c092:	6978      	ldr	r0, [r7, #20]
 800c094:	f002 f83e 	bl	800e114 <tcp_enqueue_flags>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6978      	ldr	r0, [r7, #20]
 800c0a8:	f7fe f97c 	bl	800a3a4 <tcp_abandon>
      return;
 800c0ac:	e006      	b.n	800c0bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c0ae:	6978      	ldr	r0, [r7, #20]
 800c0b0:	f002 f91e 	bl	800e2f0 <tcp_output>
  return;
 800c0b4:	e001      	b.n	800c0ba <tcp_listen_input+0x1be>
    return;
 800c0b6:	bf00      	nop
 800c0b8:	e000      	b.n	800c0bc <tcp_listen_input+0x1c0>
  return;
 800c0ba:	bf00      	nop
}
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd90      	pop	{r4, r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	2000ef70 	.word	0x2000ef70
 800c0c8:	08014350 	.word	0x08014350
 800c0cc:	08014548 	.word	0x08014548
 800c0d0:	0801439c 	.word	0x0801439c
 800c0d4:	2000ef68 	.word	0x2000ef68
 800c0d8:	2000ef6e 	.word	0x2000ef6e
 800c0dc:	2000ef64 	.word	0x2000ef64
 800c0e0:	2000ef54 	.word	0x2000ef54
 800c0e4:	20007bc0 	.word	0x20007bc0
 800c0e8:	20007bc4 	.word	0x20007bc4
 800c0ec:	20007bb0 	.word	0x20007bb0
 800c0f0:	2000ef38 	.word	0x2000ef38
 800c0f4:	2000ef40 	.word	0x2000ef40

0800c0f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af04      	add	r7, sp, #16
 800c0fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c100:	4b2f      	ldr	r3, [pc, #188]	@ (800c1c0 <tcp_timewait_input+0xc8>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d153      	bne.n	800c1b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <tcp_timewait_input+0x28>
 800c112:	4b2c      	ldr	r3, [pc, #176]	@ (800c1c4 <tcp_timewait_input+0xcc>)
 800c114:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c118:	492b      	ldr	r1, [pc, #172]	@ (800c1c8 <tcp_timewait_input+0xd0>)
 800c11a:	482c      	ldr	r0, [pc, #176]	@ (800c1cc <tcp_timewait_input+0xd4>)
 800c11c:	f006 f84a 	bl	80121b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c120:	4b27      	ldr	r3, [pc, #156]	@ (800c1c0 <tcp_timewait_input+0xc8>)
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d02a      	beq.n	800c182 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c12c:	4b28      	ldr	r3, [pc, #160]	@ (800c1d0 <tcp_timewait_input+0xd8>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	db2d      	blt.n	800c196 <tcp_timewait_input+0x9e>
 800c13a:	4b25      	ldr	r3, [pc, #148]	@ (800c1d0 <tcp_timewait_input+0xd8>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c146:	440b      	add	r3, r1
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dc23      	bgt.n	800c196 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c14e:	4b21      	ldr	r3, [pc, #132]	@ (800c1d4 <tcp_timewait_input+0xdc>)
 800c150:	6819      	ldr	r1, [r3, #0]
 800c152:	4b21      	ldr	r3, [pc, #132]	@ (800c1d8 <tcp_timewait_input+0xe0>)
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	4b1d      	ldr	r3, [pc, #116]	@ (800c1d0 <tcp_timewait_input+0xd8>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c15e:	4b1f      	ldr	r3, [pc, #124]	@ (800c1dc <tcp_timewait_input+0xe4>)
 800c160:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c162:	885b      	ldrh	r3, [r3, #2]
 800c164:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c166:	4a1d      	ldr	r2, [pc, #116]	@ (800c1dc <tcp_timewait_input+0xe4>)
 800c168:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c16a:	8812      	ldrh	r2, [r2, #0]
 800c16c:	b292      	uxth	r2, r2
 800c16e:	9202      	str	r2, [sp, #8]
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e0 <tcp_timewait_input+0xe8>)
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e4 <tcp_timewait_input+0xec>)
 800c178:	4602      	mov	r2, r0
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f002 fe6c 	bl	800ee58 <tcp_rst>
      return;
 800c180:	e01b      	b.n	800c1ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c182:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c0 <tcp_timewait_input+0xc8>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c18e:	4b16      	ldr	r3, [pc, #88]	@ (800c1e8 <tcp_timewait_input+0xf0>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c196:	4b10      	ldr	r3, [pc, #64]	@ (800c1d8 <tcp_timewait_input+0xe0>)
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00c      	beq.n	800c1b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	8b5b      	ldrh	r3, [r3, #26]
 800c1a2:	f043 0302 	orr.w	r3, r3, #2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f002 f89f 	bl	800e2f0 <tcp_output>
  }
  return;
 800c1b2:	e001      	b.n	800c1b8 <tcp_timewait_input+0xc0>
    return;
 800c1b4:	bf00      	nop
 800c1b6:	e000      	b.n	800c1ba <tcp_timewait_input+0xc2>
  return;
 800c1b8:	bf00      	nop
}
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	2000ef70 	.word	0x2000ef70
 800c1c4:	08014350 	.word	0x08014350
 800c1c8:	08014568 	.word	0x08014568
 800c1cc:	0801439c 	.word	0x0801439c
 800c1d0:	2000ef64 	.word	0x2000ef64
 800c1d4:	2000ef68 	.word	0x2000ef68
 800c1d8:	2000ef6e 	.word	0x2000ef6e
 800c1dc:	2000ef54 	.word	0x2000ef54
 800c1e0:	20007bc0 	.word	0x20007bc0
 800c1e4:	20007bc4 	.word	0x20007bc4
 800c1e8:	2000ef2c 	.word	0x2000ef2c

0800c1ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b08d      	sub	sp, #52	@ 0x34
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d106      	bne.n	800c210 <tcp_process+0x24>
 800c202:	4b9d      	ldr	r3, [pc, #628]	@ (800c478 <tcp_process+0x28c>)
 800c204:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c208:	499c      	ldr	r1, [pc, #624]	@ (800c47c <tcp_process+0x290>)
 800c20a:	489d      	ldr	r0, [pc, #628]	@ (800c480 <tcp_process+0x294>)
 800c20c:	f005 ffd2 	bl	80121b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c210:	4b9c      	ldr	r3, [pc, #624]	@ (800c484 <tcp_process+0x298>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d04e      	beq.n	800c2ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	7d1b      	ldrb	r3, [r3, #20]
 800c220:	2b02      	cmp	r3, #2
 800c222:	d108      	bne.n	800c236 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c228:	4b97      	ldr	r3, [pc, #604]	@ (800c488 <tcp_process+0x29c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d123      	bne.n	800c278 <tcp_process+0x8c>
        acceptable = 1;
 800c230:	2301      	movs	r3, #1
 800c232:	76fb      	strb	r3, [r7, #27]
 800c234:	e020      	b.n	800c278 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c23a:	4b94      	ldr	r3, [pc, #592]	@ (800c48c <tcp_process+0x2a0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d102      	bne.n	800c248 <tcp_process+0x5c>
        acceptable = 1;
 800c242:	2301      	movs	r3, #1
 800c244:	76fb      	strb	r3, [r7, #27]
 800c246:	e017      	b.n	800c278 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c248:	4b90      	ldr	r3, [pc, #576]	@ (800c48c <tcp_process+0x2a0>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	db10      	blt.n	800c278 <tcp_process+0x8c>
 800c256:	4b8d      	ldr	r3, [pc, #564]	@ (800c48c <tcp_process+0x2a0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c262:	440b      	add	r3, r1
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	dc06      	bgt.n	800c278 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8b5b      	ldrh	r3, [r3, #26]
 800c26e:	f043 0302 	orr.w	r3, r3, #2
 800c272:	b29a      	uxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c278:	7efb      	ldrb	r3, [r7, #27]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d01b      	beq.n	800c2b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	7d1b      	ldrb	r3, [r3, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <tcp_process+0xa8>
 800c286:	4b7c      	ldr	r3, [pc, #496]	@ (800c478 <tcp_process+0x28c>)
 800c288:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c28c:	4980      	ldr	r1, [pc, #512]	@ (800c490 <tcp_process+0x2a4>)
 800c28e:	487c      	ldr	r0, [pc, #496]	@ (800c480 <tcp_process+0x294>)
 800c290:	f005 ff90 	bl	80121b4 <iprintf>
      recv_flags |= TF_RESET;
 800c294:	4b7f      	ldr	r3, [pc, #508]	@ (800c494 <tcp_process+0x2a8>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f043 0308 	orr.w	r3, r3, #8
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	4b7d      	ldr	r3, [pc, #500]	@ (800c494 <tcp_process+0x2a8>)
 800c2a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	8b5b      	ldrh	r3, [r3, #26]
 800c2a6:	f023 0301 	bic.w	r3, r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c2b0:	f06f 030d 	mvn.w	r3, #13
 800c2b4:	e37a      	b.n	800c9ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e378      	b.n	800c9ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c2ba:	4b72      	ldr	r3, [pc, #456]	@ (800c484 <tcp_process+0x298>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d010      	beq.n	800c2e8 <tcp_process+0xfc>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7d1b      	ldrb	r3, [r3, #20]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d00c      	beq.n	800c2e8 <tcp_process+0xfc>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7d1b      	ldrb	r3, [r3, #20]
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d008      	beq.n	800c2e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8b5b      	ldrh	r3, [r3, #26]
 800c2da:	f043 0302 	orr.w	r3, r3, #2
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e361      	b.n	800c9ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8b5b      	ldrh	r3, [r3, #26]
 800c2ec:	f003 0310 	and.w	r3, r3, #16
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d103      	bne.n	800c2fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c2f4:	4b68      	ldr	r3, [pc, #416]	@ (800c498 <tcp_process+0x2ac>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 fc2b 	bl	800db68 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	7d1b      	ldrb	r3, [r3, #20]
 800c316:	3b02      	subs	r3, #2
 800c318:	2b07      	cmp	r3, #7
 800c31a:	f200 8337 	bhi.w	800c98c <tcp_process+0x7a0>
 800c31e:	a201      	add	r2, pc, #4	@ (adr r2, 800c324 <tcp_process+0x138>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c345 	.word	0x0800c345
 800c328:	0800c575 	.word	0x0800c575
 800c32c:	0800c6ed 	.word	0x0800c6ed
 800c330:	0800c717 	.word	0x0800c717
 800c334:	0800c83b 	.word	0x0800c83b
 800c338:	0800c6ed 	.word	0x0800c6ed
 800c33c:	0800c8c7 	.word	0x0800c8c7
 800c340:	0800c957 	.word	0x0800c957
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c344:	4b4f      	ldr	r3, [pc, #316]	@ (800c484 <tcp_process+0x298>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 0310 	and.w	r3, r3, #16
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 80e4 	beq.w	800c51a <tcp_process+0x32e>
 800c352:	4b4c      	ldr	r3, [pc, #304]	@ (800c484 <tcp_process+0x298>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 80dd 	beq.w	800c51a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	4b48      	ldr	r3, [pc, #288]	@ (800c488 <tcp_process+0x29c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	f040 80d5 	bne.w	800c51a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c370:	4b46      	ldr	r3, [pc, #280]	@ (800c48c <tcp_process+0x2a0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800c382:	4b41      	ldr	r3, [pc, #260]	@ (800c488 <tcp_process+0x29c>)
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c38a:	4b44      	ldr	r3, [pc, #272]	@ (800c49c <tcp_process+0x2b0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	89db      	ldrh	r3, [r3, #14]
 800c390:	b29a      	uxth	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c3a4:	4b39      	ldr	r3, [pc, #228]	@ (800c48c <tcp_process+0x2a0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2204      	movs	r2, #4
 800c3b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f004 fb1b 	bl	80109f8 <ip4_route>
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff f88c 	bl	800b4e8 <tcp_eff_send_mss_netif>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c3dc:	009a      	lsls	r2, r3, #2
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf38      	it	cc
 800c3ec:	460b      	movcc	r3, r1
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d204      	bcs.n	800c3fc <tcp_process+0x210>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	e00d      	b.n	800c418 <tcp_process+0x22c>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c406:	4293      	cmp	r3, r2
 800c408:	d904      	bls.n	800c414 <tcp_process+0x228>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	b29b      	uxth	r3, r3
 800c412:	e001      	b.n	800c418 <tcp_process+0x22c>
 800c414:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c424:	2b00      	cmp	r3, #0
 800c426:	d106      	bne.n	800c436 <tcp_process+0x24a>
 800c428:	4b13      	ldr	r3, [pc, #76]	@ (800c478 <tcp_process+0x28c>)
 800c42a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c42e:	491c      	ldr	r1, [pc, #112]	@ (800c4a0 <tcp_process+0x2b4>)
 800c430:	4813      	ldr	r0, [pc, #76]	@ (800c480 <tcp_process+0x294>)
 800c432:	f005 febf 	bl	80121b4 <iprintf>
        --pcb->snd_queuelen;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c43c:	3b01      	subs	r3, #1
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c44a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d12a      	bne.n	800c4a8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c456:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <tcp_process+0x280>
 800c45e:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <tcp_process+0x28c>)
 800c460:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c464:	490f      	ldr	r1, [pc, #60]	@ (800c4a4 <tcp_process+0x2b8>)
 800c466:	4806      	ldr	r0, [pc, #24]	@ (800c480 <tcp_process+0x294>)
 800c468:	f005 fea4 	bl	80121b4 <iprintf>
          pcb->unsent = rseg->next;
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c474:	e01c      	b.n	800c4b0 <tcp_process+0x2c4>
 800c476:	bf00      	nop
 800c478:	08014350 	.word	0x08014350
 800c47c:	08014588 	.word	0x08014588
 800c480:	0801439c 	.word	0x0801439c
 800c484:	2000ef70 	.word	0x2000ef70
 800c488:	2000ef68 	.word	0x2000ef68
 800c48c:	2000ef64 	.word	0x2000ef64
 800c490:	080145a4 	.word	0x080145a4
 800c494:	2000ef71 	.word	0x2000ef71
 800c498:	2000ef2c 	.word	0x2000ef2c
 800c49c:	2000ef54 	.word	0x2000ef54
 800c4a0:	080145c4 	.word	0x080145c4
 800c4a4:	080145dc 	.word	0x080145dc
        } else {
          pcb->unacked = rseg->next;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800c4b0:	69f8      	ldr	r0, [r7, #28]
 800c4b2:	f7fe fd22 	bl	800aefa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d104      	bne.n	800c4c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c4c4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c4c6:	e006      	b.n	800c4d6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00a      	beq.n	800c4f6 <tcp_process+0x30a>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6910      	ldr	r0, [r2, #16]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	6879      	ldr	r1, [r7, #4]
 800c4ee:	4798      	blx	r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	76bb      	strb	r3, [r7, #26]
 800c4f4:	e001      	b.n	800c4fa <tcp_process+0x30e>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c4fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c4fe:	f113 0f0d 	cmn.w	r3, #13
 800c502:	d102      	bne.n	800c50a <tcp_process+0x31e>
          return ERR_ABRT;
 800c504:	f06f 030c 	mvn.w	r3, #12
 800c508:	e250      	b.n	800c9ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	8b5b      	ldrh	r3, [r3, #26]
 800c50e:	f043 0302 	orr.w	r3, r3, #2
 800c512:	b29a      	uxth	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c518:	e23a      	b.n	800c990 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c51a:	4b98      	ldr	r3, [pc, #608]	@ (800c77c <tcp_process+0x590>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f003 0310 	and.w	r3, r3, #16
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 8234 	beq.w	800c990 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c528:	4b95      	ldr	r3, [pc, #596]	@ (800c780 <tcp_process+0x594>)
 800c52a:	6819      	ldr	r1, [r3, #0]
 800c52c:	4b95      	ldr	r3, [pc, #596]	@ (800c784 <tcp_process+0x598>)
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	4b95      	ldr	r3, [pc, #596]	@ (800c788 <tcp_process+0x59c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c538:	4b94      	ldr	r3, [pc, #592]	@ (800c78c <tcp_process+0x5a0>)
 800c53a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c53c:	885b      	ldrh	r3, [r3, #2]
 800c53e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c540:	4a92      	ldr	r2, [pc, #584]	@ (800c78c <tcp_process+0x5a0>)
 800c542:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c544:	8812      	ldrh	r2, [r2, #0]
 800c546:	b292      	uxth	r2, r2
 800c548:	9202      	str	r2, [sp, #8]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	4b90      	ldr	r3, [pc, #576]	@ (800c790 <tcp_process+0x5a4>)
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	4b90      	ldr	r3, [pc, #576]	@ (800c794 <tcp_process+0x5a8>)
 800c552:	4602      	mov	r2, r0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f002 fc7f 	bl	800ee58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c560:	2b05      	cmp	r3, #5
 800c562:	f200 8215 	bhi.w	800c990 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f002 fa4b 	bl	800ea08 <tcp_rexmit_rto>
      break;
 800c572:	e20d      	b.n	800c990 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c574:	4b81      	ldr	r3, [pc, #516]	@ (800c77c <tcp_process+0x590>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 80a1 	beq.w	800c6c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c582:	4b7f      	ldr	r3, [pc, #508]	@ (800c780 <tcp_process+0x594>)
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	3b01      	subs	r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	db7e      	blt.n	800c690 <tcp_process+0x4a4>
 800c592:	4b7b      	ldr	r3, [pc, #492]	@ (800c780 <tcp_process+0x594>)
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	dc77      	bgt.n	800c690 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c5ae:	23fa      	movs	r3, #250	@ 0xfa
 800c5b0:	76bb      	strb	r3, [r7, #26]
 800c5b2:	e01d      	b.n	800c5f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d106      	bne.n	800c5cc <tcp_process+0x3e0>
 800c5be:	4b76      	ldr	r3, [pc, #472]	@ (800c798 <tcp_process+0x5ac>)
 800c5c0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c5c4:	4975      	ldr	r1, [pc, #468]	@ (800c79c <tcp_process+0x5b0>)
 800c5c6:	4876      	ldr	r0, [pc, #472]	@ (800c7a0 <tcp_process+0x5b4>)
 800c5c8:	f005 fdf4 	bl	80121b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <tcp_process+0x400>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6910      	ldr	r0, [r2, #16]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	4798      	blx	r3
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	76bb      	strb	r3, [r7, #26]
 800c5ea:	e001      	b.n	800c5f0 <tcp_process+0x404>
 800c5ec:	23f0      	movs	r3, #240	@ 0xf0
 800c5ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c5f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c5f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c5fc:	f113 0f0d 	cmn.w	r3, #13
 800c600:	d002      	beq.n	800c608 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fd ff8c 	bl	800a520 <tcp_abort>
            }
            return ERR_ABRT;
 800c608:	f06f 030c 	mvn.w	r3, #12
 800c60c:	e1ce      	b.n	800c9ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fae0 	bl	800cbd4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c614:	4b63      	ldr	r3, [pc, #396]	@ (800c7a4 <tcp_process+0x5b8>)
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <tcp_process+0x43c>
            recv_acked--;
 800c61c:	4b61      	ldr	r3, [pc, #388]	@ (800c7a4 <tcp_process+0x5b8>)
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	3b01      	subs	r3, #1
 800c622:	b29a      	uxth	r2, r3
 800c624:	4b5f      	ldr	r3, [pc, #380]	@ (800c7a4 <tcp_process+0x5b8>)
 800c626:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c62c:	009a      	lsls	r2, r3, #2
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c638:	428b      	cmp	r3, r1
 800c63a:	bf38      	it	cc
 800c63c:	460b      	movcc	r3, r1
 800c63e:	429a      	cmp	r2, r3
 800c640:	d204      	bcs.n	800c64c <tcp_process+0x460>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	b29b      	uxth	r3, r3
 800c64a:	e00d      	b.n	800c668 <tcp_process+0x47c>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c656:	4293      	cmp	r3, r2
 800c658:	d904      	bls.n	800c664 <tcp_process+0x478>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	b29b      	uxth	r3, r3
 800c662:	e001      	b.n	800c668 <tcp_process+0x47c>
 800c664:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c66e:	4b4e      	ldr	r3, [pc, #312]	@ (800c7a8 <tcp_process+0x5bc>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	f003 0320 	and.w	r3, r3, #32
 800c676:	2b00      	cmp	r3, #0
 800c678:	d037      	beq.n	800c6ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	8b5b      	ldrh	r3, [r3, #26]
 800c67e:	f043 0302 	orr.w	r3, r3, #2
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2207      	movs	r2, #7
 800c68c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c68e:	e02c      	b.n	800c6ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c690:	4b3b      	ldr	r3, [pc, #236]	@ (800c780 <tcp_process+0x594>)
 800c692:	6819      	ldr	r1, [r3, #0]
 800c694:	4b3b      	ldr	r3, [pc, #236]	@ (800c784 <tcp_process+0x598>)
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	461a      	mov	r2, r3
 800c69a:	4b3b      	ldr	r3, [pc, #236]	@ (800c788 <tcp_process+0x59c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <tcp_process+0x5a0>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6a4:	885b      	ldrh	r3, [r3, #2]
 800c6a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6a8:	4a38      	ldr	r2, [pc, #224]	@ (800c78c <tcp_process+0x5a0>)
 800c6aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6ac:	8812      	ldrh	r2, [r2, #0]
 800c6ae:	b292      	uxth	r2, r2
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	4b36      	ldr	r3, [pc, #216]	@ (800c790 <tcp_process+0x5a4>)
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	4b36      	ldr	r3, [pc, #216]	@ (800c794 <tcp_process+0x5a8>)
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f002 fbcb 	bl	800ee58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c6c2:	e167      	b.n	800c994 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c6c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c77c <tcp_process+0x590>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	f003 0302 	and.w	r3, r3, #2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 8161 	beq.w	800c994 <tcp_process+0x7a8>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d6:	1e5a      	subs	r2, r3, #1
 800c6d8:	4b2b      	ldr	r3, [pc, #172]	@ (800c788 <tcp_process+0x59c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	f040 8159 	bne.w	800c994 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f002 f9b2 	bl	800ea4c <tcp_rexmit>
      break;
 800c6e8:	e154      	b.n	800c994 <tcp_process+0x7a8>
 800c6ea:	e153      	b.n	800c994 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fa71 	bl	800cbd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c6f2:	4b2d      	ldr	r3, [pc, #180]	@ (800c7a8 <tcp_process+0x5bc>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 814c 	beq.w	800c998 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	8b5b      	ldrh	r3, [r3, #26]
 800c704:	f043 0302 	orr.w	r3, r3, #2
 800c708:	b29a      	uxth	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2207      	movs	r2, #7
 800c712:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c714:	e140      	b.n	800c998 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa5c 	bl	800cbd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c71c:	4b22      	ldr	r3, [pc, #136]	@ (800c7a8 <tcp_process+0x5bc>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 0320 	and.w	r3, r3, #32
 800c724:	2b00      	cmp	r3, #0
 800c726:	d071      	beq.n	800c80c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c728:	4b14      	ldr	r3, [pc, #80]	@ (800c77c <tcp_process+0x590>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	f003 0310 	and.w	r3, r3, #16
 800c730:	2b00      	cmp	r3, #0
 800c732:	d060      	beq.n	800c7f6 <tcp_process+0x60a>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c738:	4b11      	ldr	r3, [pc, #68]	@ (800c780 <tcp_process+0x594>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d15a      	bne.n	800c7f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c744:	2b00      	cmp	r3, #0
 800c746:	d156      	bne.n	800c7f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	8b5b      	ldrh	r3, [r3, #26]
 800c74c:	f043 0302 	orr.w	r3, r3, #2
 800c750:	b29a      	uxth	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7fe fdbc 	bl	800b2d4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c75c:	4b13      	ldr	r3, [pc, #76]	@ (800c7ac <tcp_process+0x5c0>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d105      	bne.n	800c772 <tcp_process+0x586>
 800c766:	4b11      	ldr	r3, [pc, #68]	@ (800c7ac <tcp_process+0x5c0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	4a0f      	ldr	r2, [pc, #60]	@ (800c7ac <tcp_process+0x5c0>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	e02e      	b.n	800c7d0 <tcp_process+0x5e4>
 800c772:	4b0e      	ldr	r3, [pc, #56]	@ (800c7ac <tcp_process+0x5c0>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	e027      	b.n	800c7ca <tcp_process+0x5de>
 800c77a:	bf00      	nop
 800c77c:	2000ef70 	.word	0x2000ef70
 800c780:	2000ef68 	.word	0x2000ef68
 800c784:	2000ef6e 	.word	0x2000ef6e
 800c788:	2000ef64 	.word	0x2000ef64
 800c78c:	2000ef54 	.word	0x2000ef54
 800c790:	20007bc0 	.word	0x20007bc0
 800c794:	20007bc4 	.word	0x20007bc4
 800c798:	08014350 	.word	0x08014350
 800c79c:	080145f0 	.word	0x080145f0
 800c7a0:	0801439c 	.word	0x0801439c
 800c7a4:	2000ef6c 	.word	0x2000ef6c
 800c7a8:	2000ef71 	.word	0x2000ef71
 800c7ac:	2000ef38 	.word	0x2000ef38
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d104      	bne.n	800c7c4 <tcp_process+0x5d8>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	60da      	str	r2, [r3, #12]
 800c7c2:	e005      	b.n	800c7d0 <tcp_process+0x5e4>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1ef      	bne.n	800c7b0 <tcp_process+0x5c4>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	60da      	str	r2, [r3, #12]
 800c7d6:	4b77      	ldr	r3, [pc, #476]	@ (800c9b4 <tcp_process+0x7c8>)
 800c7d8:	2201      	movs	r2, #1
 800c7da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	220a      	movs	r2, #10
 800c7e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c7e2:	4b75      	ldr	r3, [pc, #468]	@ (800c9b8 <tcp_process+0x7cc>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	60da      	str	r2, [r3, #12]
 800c7ea:	4a73      	ldr	r2, [pc, #460]	@ (800c9b8 <tcp_process+0x7cc>)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	f002 fcf4 	bl	800f1dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c7f4:	e0d2      	b.n	800c99c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	8b5b      	ldrh	r3, [r3, #26]
 800c7fa:	f043 0302 	orr.w	r3, r3, #2
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2208      	movs	r2, #8
 800c808:	751a      	strb	r2, [r3, #20]
      break;
 800c80a:	e0c7      	b.n	800c99c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c80c:	4b6b      	ldr	r3, [pc, #428]	@ (800c9bc <tcp_process+0x7d0>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	f003 0310 	and.w	r3, r3, #16
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80c1 	beq.w	800c99c <tcp_process+0x7b0>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c81e:	4b68      	ldr	r3, [pc, #416]	@ (800c9c0 <tcp_process+0x7d4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	f040 80ba 	bne.w	800c99c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f040 80b5 	bne.w	800c99c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2206      	movs	r2, #6
 800c836:	751a      	strb	r2, [r3, #20]
      break;
 800c838:	e0b0      	b.n	800c99c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f9ca 	bl	800cbd4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c840:	4b60      	ldr	r3, [pc, #384]	@ (800c9c4 <tcp_process+0x7d8>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0320 	and.w	r3, r3, #32
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 80a9 	beq.w	800c9a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8b5b      	ldrh	r3, [r3, #26]
 800c852:	f043 0302 	orr.w	r3, r3, #2
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7fe fd39 	bl	800b2d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c862:	4b59      	ldr	r3, [pc, #356]	@ (800c9c8 <tcp_process+0x7dc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d105      	bne.n	800c878 <tcp_process+0x68c>
 800c86c:	4b56      	ldr	r3, [pc, #344]	@ (800c9c8 <tcp_process+0x7dc>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	4a55      	ldr	r2, [pc, #340]	@ (800c9c8 <tcp_process+0x7dc>)
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	e013      	b.n	800c8a0 <tcp_process+0x6b4>
 800c878:	4b53      	ldr	r3, [pc, #332]	@ (800c9c8 <tcp_process+0x7dc>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	613b      	str	r3, [r7, #16]
 800c87e:	e00c      	b.n	800c89a <tcp_process+0x6ae>
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	429a      	cmp	r2, r3
 800c888:	d104      	bne.n	800c894 <tcp_process+0x6a8>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68da      	ldr	r2, [r3, #12]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	60da      	str	r2, [r3, #12]
 800c892:	e005      	b.n	800c8a0 <tcp_process+0x6b4>
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	613b      	str	r3, [r7, #16]
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1ef      	bne.n	800c880 <tcp_process+0x694>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	60da      	str	r2, [r3, #12]
 800c8a6:	4b43      	ldr	r3, [pc, #268]	@ (800c9b4 <tcp_process+0x7c8>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	220a      	movs	r2, #10
 800c8b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c8b2:	4b41      	ldr	r3, [pc, #260]	@ (800c9b8 <tcp_process+0x7cc>)
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	60da      	str	r2, [r3, #12]
 800c8ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c9b8 <tcp_process+0x7cc>)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	f002 fc8c 	bl	800f1dc <tcp_timer_needed>
      }
      break;
 800c8c4:	e06c      	b.n	800c9a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f984 	bl	800cbd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c8cc:	4b3b      	ldr	r3, [pc, #236]	@ (800c9bc <tcp_process+0x7d0>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	f003 0310 	and.w	r3, r3, #16
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d065      	beq.n	800c9a4 <tcp_process+0x7b8>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8dc:	4b38      	ldr	r3, [pc, #224]	@ (800c9c0 <tcp_process+0x7d4>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d15f      	bne.n	800c9a4 <tcp_process+0x7b8>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d15b      	bne.n	800c9a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fe fcf1 	bl	800b2d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c8f2:	4b35      	ldr	r3, [pc, #212]	@ (800c9c8 <tcp_process+0x7dc>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d105      	bne.n	800c908 <tcp_process+0x71c>
 800c8fc:	4b32      	ldr	r3, [pc, #200]	@ (800c9c8 <tcp_process+0x7dc>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	4a31      	ldr	r2, [pc, #196]	@ (800c9c8 <tcp_process+0x7dc>)
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	e013      	b.n	800c930 <tcp_process+0x744>
 800c908:	4b2f      	ldr	r3, [pc, #188]	@ (800c9c8 <tcp_process+0x7dc>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e00c      	b.n	800c92a <tcp_process+0x73e>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	429a      	cmp	r2, r3
 800c918:	d104      	bne.n	800c924 <tcp_process+0x738>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	60da      	str	r2, [r3, #12]
 800c922:	e005      	b.n	800c930 <tcp_process+0x744>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1ef      	bne.n	800c910 <tcp_process+0x724>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	60da      	str	r2, [r3, #12]
 800c936:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b4 <tcp_process+0x7c8>)
 800c938:	2201      	movs	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	220a      	movs	r2, #10
 800c940:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c942:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b8 <tcp_process+0x7cc>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60da      	str	r2, [r3, #12]
 800c94a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9b8 <tcp_process+0x7cc>)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	f002 fc44 	bl	800f1dc <tcp_timer_needed>
      }
      break;
 800c954:	e026      	b.n	800c9a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f93c 	bl	800cbd4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c95c:	4b17      	ldr	r3, [pc, #92]	@ (800c9bc <tcp_process+0x7d0>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	f003 0310 	and.w	r3, r3, #16
 800c964:	2b00      	cmp	r3, #0
 800c966:	d01f      	beq.n	800c9a8 <tcp_process+0x7bc>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c96c:	4b14      	ldr	r3, [pc, #80]	@ (800c9c0 <tcp_process+0x7d4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	d119      	bne.n	800c9a8 <tcp_process+0x7bc>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d115      	bne.n	800c9a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c97c:	4b11      	ldr	r3, [pc, #68]	@ (800c9c4 <tcp_process+0x7d8>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	f043 0310 	orr.w	r3, r3, #16
 800c984:	b2da      	uxtb	r2, r3
 800c986:	4b0f      	ldr	r3, [pc, #60]	@ (800c9c4 <tcp_process+0x7d8>)
 800c988:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c98a:	e00d      	b.n	800c9a8 <tcp_process+0x7bc>
    default:
      break;
 800c98c:	bf00      	nop
 800c98e:	e00c      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c990:	bf00      	nop
 800c992:	e00a      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c994:	bf00      	nop
 800c996:	e008      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c998:	bf00      	nop
 800c99a:	e006      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c99c:	bf00      	nop
 800c99e:	e004      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c9a0:	bf00      	nop
 800c9a2:	e002      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c9a4:	bf00      	nop
 800c9a6:	e000      	b.n	800c9aa <tcp_process+0x7be>
      break;
 800c9a8:	bf00      	nop
  }
  return ERR_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3724      	adds	r7, #36	@ 0x24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd90      	pop	{r4, r7, pc}
 800c9b4:	2000ef40 	.word	0x2000ef40
 800c9b8:	2000ef3c 	.word	0x2000ef3c
 800c9bc:	2000ef70 	.word	0x2000ef70
 800c9c0:	2000ef68 	.word	0x2000ef68
 800c9c4:	2000ef71 	.word	0x2000ef71
 800c9c8:	2000ef38 	.word	0x2000ef38

0800c9cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c9cc:	b590      	push	{r4, r7, lr}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <tcp_oos_insert_segment+0x1e>
 800c9dc:	4b3b      	ldr	r3, [pc, #236]	@ (800cacc <tcp_oos_insert_segment+0x100>)
 800c9de:	f240 421f 	movw	r2, #1055	@ 0x41f
 800c9e2:	493b      	ldr	r1, [pc, #236]	@ (800cad0 <tcp_oos_insert_segment+0x104>)
 800c9e4:	483b      	ldr	r0, [pc, #236]	@ (800cad4 <tcp_oos_insert_segment+0x108>)
 800c9e6:	f005 fbe5 	bl	80121b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	899b      	ldrh	r3, [r3, #12]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fb fc44 	bl	8008280 <lwip_htons>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0301 	and.w	r3, r3, #1
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d028      	beq.n	800ca56 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ca04:	6838      	ldr	r0, [r7, #0]
 800ca06:	f7fe fa63 	bl	800aed0 <tcp_segs_free>
    next = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	603b      	str	r3, [r7, #0]
 800ca0e:	e056      	b.n	800cabe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	899b      	ldrh	r3, [r3, #12]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fb fc31 	bl	8008280 <lwip_htons>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	899b      	ldrh	r3, [r3, #12]
 800ca30:	b29c      	uxth	r4, r3
 800ca32:	2001      	movs	r0, #1
 800ca34:	f7fb fc24 	bl	8008280 <lwip_htons>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	4322      	orrs	r2, r4
 800ca42:	b292      	uxth	r2, r2
 800ca44:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7fe fa52 	bl	800aefa <tcp_seg_free>
    while (next &&
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00e      	beq.n	800ca7a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	461a      	mov	r2, r3
 800ca62:	4b1d      	ldr	r3, [pc, #116]	@ (800cad8 <tcp_oos_insert_segment+0x10c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	441a      	add	r2, r3
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	8909      	ldrh	r1, [r1, #8]
 800ca72:	440b      	add	r3, r1
 800ca74:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	daca      	bge.n	800ca10 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d01e      	beq.n	800cabe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	891b      	ldrh	r3, [r3, #8]
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b14      	ldr	r3, [pc, #80]	@ (800cad8 <tcp_oos_insert_segment+0x10c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	441a      	add	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dd12      	ble.n	800cabe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <tcp_oos_insert_segment+0x10c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	891b      	ldrh	r3, [r3, #8]
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7fc fe17 	bl	80096ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	601a      	str	r2, [r3, #0]
}
 800cac4:	bf00      	nop
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd90      	pop	{r4, r7, pc}
 800cacc:	08014350 	.word	0x08014350
 800cad0:	08014610 	.word	0x08014610
 800cad4:	0801439c 	.word	0x0801439c
 800cad8:	2000ef64 	.word	0x2000ef64

0800cadc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cadc:	b5b0      	push	{r4, r5, r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800caea:	e03e      	b.n	800cb6a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fd f80a 	bl	8009b14 <pbuf_clen>
 800cb00:	4603      	mov	r3, r0
 800cb02:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb0a:	8a7a      	ldrh	r2, [r7, #18]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d906      	bls.n	800cb1e <tcp_free_acked_segments+0x42>
 800cb10:	4b2a      	ldr	r3, [pc, #168]	@ (800cbbc <tcp_free_acked_segments+0xe0>)
 800cb12:	f240 4257 	movw	r2, #1111	@ 0x457
 800cb16:	492a      	ldr	r1, [pc, #168]	@ (800cbc0 <tcp_free_acked_segments+0xe4>)
 800cb18:	482a      	ldr	r0, [pc, #168]	@ (800cbc4 <tcp_free_acked_segments+0xe8>)
 800cb1a:	f005 fb4b 	bl	80121b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800cb24:	8a7b      	ldrh	r3, [r7, #18]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	891a      	ldrh	r2, [r3, #8]
 800cb34:	4b24      	ldr	r3, [pc, #144]	@ (800cbc8 <tcp_free_acked_segments+0xec>)
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	4413      	add	r3, r2
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	4b22      	ldr	r3, [pc, #136]	@ (800cbc8 <tcp_free_acked_segments+0xec>)
 800cb3e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cb40:	6978      	ldr	r0, [r7, #20]
 800cb42:	f7fe f9da 	bl	800aefa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00c      	beq.n	800cb6a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d109      	bne.n	800cb6a <tcp_free_acked_segments+0x8e>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d106      	bne.n	800cb6a <tcp_free_acked_segments+0x8e>
 800cb5c:	4b17      	ldr	r3, [pc, #92]	@ (800cbbc <tcp_free_acked_segments+0xe0>)
 800cb5e:	f240 4261 	movw	r2, #1121	@ 0x461
 800cb62:	491a      	ldr	r1, [pc, #104]	@ (800cbcc <tcp_free_acked_segments+0xf0>)
 800cb64:	4817      	ldr	r0, [pc, #92]	@ (800cbc4 <tcp_free_acked_segments+0xe8>)
 800cb66:	f005 fb25 	bl	80121b4 <iprintf>
  while (seg_list != NULL &&
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d020      	beq.n	800cbb2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fb fb97 	bl	80082aa <lwip_htonl>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	891b      	ldrh	r3, [r3, #8]
 800cb82:	461d      	mov	r5, r3
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	899b      	ldrh	r3, [r3, #12]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fb fb77 	bl	8008280 <lwip_htons>
 800cb92:	4603      	mov	r3, r0
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 0303 	and.w	r3, r3, #3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <tcp_free_acked_segments+0xc6>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <tcp_free_acked_segments+0xc8>
 800cba2:	2300      	movs	r3, #0
 800cba4:	442b      	add	r3, r5
 800cba6:	18e2      	adds	r2, r4, r3
 800cba8:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <tcp_free_acked_segments+0xf4>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dd9c      	ble.n	800caec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bdb0      	pop	{r4, r5, r7, pc}
 800cbbc:	08014350 	.word	0x08014350
 800cbc0:	08014638 	.word	0x08014638
 800cbc4:	0801439c 	.word	0x0801439c
 800cbc8:	2000ef6c 	.word	0x2000ef6c
 800cbcc:	08014660 	.word	0x08014660
 800cbd0:	2000ef68 	.word	0x2000ef68

0800cbd4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b094      	sub	sp, #80	@ 0x50
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <tcp_receive+0x20>
 800cbe6:	4b91      	ldr	r3, [pc, #580]	@ (800ce2c <tcp_receive+0x258>)
 800cbe8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800cbec:	4990      	ldr	r1, [pc, #576]	@ (800ce30 <tcp_receive+0x25c>)
 800cbee:	4891      	ldr	r0, [pc, #580]	@ (800ce34 <tcp_receive+0x260>)
 800cbf0:	f005 fae0 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7d1b      	ldrb	r3, [r3, #20]
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d806      	bhi.n	800cc0a <tcp_receive+0x36>
 800cbfc:	4b8b      	ldr	r3, [pc, #556]	@ (800ce2c <tcp_receive+0x258>)
 800cbfe:	f240 427c 	movw	r2, #1148	@ 0x47c
 800cc02:	498d      	ldr	r1, [pc, #564]	@ (800ce38 <tcp_receive+0x264>)
 800cc04:	488b      	ldr	r0, [pc, #556]	@ (800ce34 <tcp_receive+0x260>)
 800cc06:	f005 fad5 	bl	80121b4 <iprintf>

  if (flags & TCP_ACK) {
 800cc0a:	4b8c      	ldr	r3, [pc, #560]	@ (800ce3c <tcp_receive+0x268>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	f003 0310 	and.w	r3, r3, #16
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 8264 	beq.w	800d0e0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc1e:	461a      	mov	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc24:	4413      	add	r3, r2
 800cc26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc2c:	4b84      	ldr	r3, [pc, #528]	@ (800ce40 <tcp_receive+0x26c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	db1b      	blt.n	800cc6e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc3a:	4b81      	ldr	r3, [pc, #516]	@ (800ce40 <tcp_receive+0x26c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d106      	bne.n	800cc50 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cc46:	4b7f      	ldr	r3, [pc, #508]	@ (800ce44 <tcp_receive+0x270>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	db0e      	blt.n	800cc6e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cc54:	4b7b      	ldr	r3, [pc, #492]	@ (800ce44 <tcp_receive+0x270>)
 800cc56:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d125      	bne.n	800cca8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cc5c:	4b7a      	ldr	r3, [pc, #488]	@ (800ce48 <tcp_receive+0x274>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	89db      	ldrh	r3, [r3, #14]
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d91c      	bls.n	800cca8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cc6e:	4b76      	ldr	r3, [pc, #472]	@ (800ce48 <tcp_receive+0x274>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	89db      	ldrh	r3, [r3, #14]
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d205      	bcs.n	800cc98 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800cc98:	4b69      	ldr	r3, [pc, #420]	@ (800ce40 <tcp_receive+0x26c>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800cca0:	4b68      	ldr	r3, [pc, #416]	@ (800ce44 <tcp_receive+0x270>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cca8:	4b66      	ldr	r3, [pc, #408]	@ (800ce44 <tcp_receive+0x270>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dc58      	bgt.n	800cd68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ccb6:	4b65      	ldr	r3, [pc, #404]	@ (800ce4c <tcp_receive+0x278>)
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d14b      	bne.n	800cd56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ccc8:	4413      	add	r3, r2
 800ccca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d142      	bne.n	800cd56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	db3d      	blt.n	800cd56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccde:	4b59      	ldr	r3, [pc, #356]	@ (800ce44 <tcp_receive+0x270>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d137      	bne.n	800cd56 <tcp_receive+0x182>
              found_dupack = 1;
 800cce6:	2301      	movs	r3, #1
 800cce8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ccf0:	2bff      	cmp	r3, #255	@ 0xff
 800ccf2:	d007      	beq.n	800cd04 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d91b      	bls.n	800cd46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd18:	4413      	add	r3, r2
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d30a      	bcc.n	800cd3c <tcp_receive+0x168>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd30:	4413      	add	r3, r2
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cd3a:	e004      	b.n	800cd46 <tcp_receive+0x172>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d902      	bls.n	800cd56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 fee7 	bl	800eb24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cd56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f040 8161 	bne.w	800d020 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cd66:	e15b      	b.n	800d020 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd68:	4b36      	ldr	r3, [pc, #216]	@ (800ce44 <tcp_receive+0x270>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	3b01      	subs	r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f2c0 814e 	blt.w	800d016 <tcp_receive+0x442>
 800cd7a:	4b32      	ldr	r3, [pc, #200]	@ (800ce44 <tcp_receive+0x270>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f300 8146 	bgt.w	800d016 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	8b5b      	ldrh	r3, [r3, #26]
 800cd8e:	f003 0304 	and.w	r3, r3, #4
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d010      	beq.n	800cdb8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	8b5b      	ldrh	r3, [r3, #26]
 800cd9a:	f023 0304 	bic.w	r3, r3, #4
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cdc6:	10db      	asrs	r3, r3, #3
 800cdc8:	b21b      	sxth	r3, r3
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	b21a      	sxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cde0:	4b18      	ldr	r3, [pc, #96]	@ (800ce44 <tcp_receive+0x270>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800cdf8:	4b12      	ldr	r3, [pc, #72]	@ (800ce44 <tcp_receive+0x270>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7d1b      	ldrb	r3, [r3, #20]
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	f240 8097 	bls.w	800cf38 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d245      	bcs.n	800cea6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	8b5b      	ldrh	r3, [r3, #26]
 800ce1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d014      	beq.n	800ce50 <tcp_receive+0x27c>
 800ce26:	2301      	movs	r3, #1
 800ce28:	e013      	b.n	800ce52 <tcp_receive+0x27e>
 800ce2a:	bf00      	nop
 800ce2c:	08014350 	.word	0x08014350
 800ce30:	08014680 	.word	0x08014680
 800ce34:	0801439c 	.word	0x0801439c
 800ce38:	0801469c 	.word	0x0801469c
 800ce3c:	2000ef70 	.word	0x2000ef70
 800ce40:	2000ef64 	.word	0x2000ef64
 800ce44:	2000ef68 	.word	0x2000ef68
 800ce48:	2000ef54 	.word	0x2000ef54
 800ce4c:	2000ef6e 	.word	0x2000ef6e
 800ce50:	2302      	movs	r3, #2
 800ce52:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ce56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce60:	fb12 f303 	smulbb	r3, r2, r3
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	bf28      	it	cs
 800ce6c:	4613      	movcs	r3, r2
 800ce6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce78:	4413      	add	r3, r2
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d309      	bcc.n	800ce9a <tcp_receive+0x2c6>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce8e:	4413      	add	r3, r2
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ce98:	e04e      	b.n	800cf38 <tcp_receive+0x364>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cea0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cea4:	e048      	b.n	800cf38 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ceac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ceae:	4413      	add	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d309      	bcc.n	800ced0 <tcp_receive+0x2fc>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cec2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cec4:	4413      	add	r3, r2
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cece:	e004      	b.n	800ceda <tcp_receive+0x306>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ced6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d326      	bcc.n	800cf38 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf0a:	4413      	add	r3, r2
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d30a      	bcc.n	800cf2e <tcp_receive+0x35a>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf22:	4413      	add	r3, r2
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cf2c:	e004      	b.n	800cf38 <tcp_receive+0x364>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf40:	4a98      	ldr	r2, [pc, #608]	@ (800d1a4 <tcp_receive+0x5d0>)
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff fdca 	bl	800cadc <tcp_free_acked_segments>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf56:	4a94      	ldr	r2, [pc, #592]	@ (800d1a8 <tcp_receive+0x5d4>)
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff fdbf 	bl	800cadc <tcp_free_acked_segments>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d104      	bne.n	800cf76 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf72:	861a      	strh	r2, [r3, #48]	@ 0x30
 800cf74:	e002      	b.n	800cf7c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d103      	bne.n	800cf92 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800cf98:	4b84      	ldr	r3, [pc, #528]	@ (800d1ac <tcp_receive+0x5d8>)
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	8b5b      	ldrh	r3, [r3, #26]
 800cfaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d035      	beq.n	800d01e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d118      	bne.n	800cfec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00c      	beq.n	800cfdc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fb f96b 	bl	80082aa <lwip_htonl>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dc20      	bgt.n	800d01e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	8b5b      	ldrh	r3, [r3, #26]
 800cfe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cfea:	e018      	b.n	800d01e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fb f956 	bl	80082aa <lwip_htonl>
 800cffe:	4603      	mov	r3, r0
 800d000:	1ae3      	subs	r3, r4, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	dc0b      	bgt.n	800d01e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	8b5b      	ldrh	r3, [r3, #26]
 800d00a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d014:	e003      	b.n	800d01e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f001 ff70 	bl	800eefc <tcp_send_empty_ack>
 800d01c:	e000      	b.n	800d020 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d01e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d024:	2b00      	cmp	r3, #0
 800d026:	d05b      	beq.n	800d0e0 <tcp_receive+0x50c>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d02c:	4b60      	ldr	r3, [pc, #384]	@ (800d1b0 <tcp_receive+0x5dc>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	da54      	bge.n	800d0e0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d036:	4b5f      	ldr	r3, [pc, #380]	@ (800d1b4 <tcp_receive+0x5e0>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d040:	b29b      	uxth	r3, r3
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	b29b      	uxth	r3, r3
 800d046:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d04a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d054:	10db      	asrs	r3, r3, #3
 800d056:	b21b      	sxth	r3, r3
 800d058:	b29b      	uxth	r3, r3
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d068:	b29a      	uxth	r2, r3
 800d06a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d06e:	4413      	add	r3, r2
 800d070:	b29b      	uxth	r3, r3
 800d072:	b21a      	sxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d078:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	da05      	bge.n	800d08c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d080:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d084:	425b      	negs	r3, r3
 800d086:	b29b      	uxth	r3, r3
 800d088:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d08c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d096:	109b      	asrs	r3, r3, #2
 800d098:	b21b      	sxth	r3, r3
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d0b0:	4413      	add	r3, r2
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	b21a      	sxth	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d0c0:	10db      	asrs	r3, r3, #3
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	4413      	add	r3, r2
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	b21a      	sxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d0e0:	4b35      	ldr	r3, [pc, #212]	@ (800d1b8 <tcp_receive+0x5e4>)
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f000 84df 	beq.w	800daa8 <tcp_receive+0xed4>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7d1b      	ldrb	r3, [r3, #20]
 800d0ee:	2b06      	cmp	r3, #6
 800d0f0:	f200 84da 	bhi.w	800daa8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0f8:	4b30      	ldr	r3, [pc, #192]	@ (800d1bc <tcp_receive+0x5e8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	3b01      	subs	r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	f2c0 808f 	blt.w	800d224 <tcp_receive+0x650>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d10a:	4b2b      	ldr	r3, [pc, #172]	@ (800d1b8 <tcp_receive+0x5e4>)
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	4619      	mov	r1, r3
 800d110:	4b2a      	ldr	r3, [pc, #168]	@ (800d1bc <tcp_receive+0x5e8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	440b      	add	r3, r1
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	3301      	adds	r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f300 8082 	bgt.w	800d224 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d120:	4b27      	ldr	r3, [pc, #156]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d12a:	4b24      	ldr	r3, [pc, #144]	@ (800d1bc <tcp_receive+0x5e8>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d132:	4b23      	ldr	r3, [pc, #140]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d106      	bne.n	800d148 <tcp_receive+0x574>
 800d13a:	4b22      	ldr	r3, [pc, #136]	@ (800d1c4 <tcp_receive+0x5f0>)
 800d13c:	f240 5294 	movw	r2, #1428	@ 0x594
 800d140:	4921      	ldr	r1, [pc, #132]	@ (800d1c8 <tcp_receive+0x5f4>)
 800d142:	4822      	ldr	r0, [pc, #136]	@ (800d1cc <tcp_receive+0x5f8>)
 800d144:	f005 f836 	bl	80121b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d14e:	4293      	cmp	r3, r2
 800d150:	d906      	bls.n	800d160 <tcp_receive+0x58c>
 800d152:	4b1c      	ldr	r3, [pc, #112]	@ (800d1c4 <tcp_receive+0x5f0>)
 800d154:	f240 5295 	movw	r2, #1429	@ 0x595
 800d158:	491d      	ldr	r1, [pc, #116]	@ (800d1d0 <tcp_receive+0x5fc>)
 800d15a:	481c      	ldr	r0, [pc, #112]	@ (800d1cc <tcp_receive+0x5f8>)
 800d15c:	f005 f82a 	bl	80121b4 <iprintf>
      off = (u16_t)off32;
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d166:	4b16      	ldr	r3, [pc, #88]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	891b      	ldrh	r3, [r3, #8]
 800d16c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d170:	429a      	cmp	r2, r3
 800d172:	d906      	bls.n	800d182 <tcp_receive+0x5ae>
 800d174:	4b13      	ldr	r3, [pc, #76]	@ (800d1c4 <tcp_receive+0x5f0>)
 800d176:	f240 5297 	movw	r2, #1431	@ 0x597
 800d17a:	4916      	ldr	r1, [pc, #88]	@ (800d1d4 <tcp_receive+0x600>)
 800d17c:	4813      	ldr	r0, [pc, #76]	@ (800d1cc <tcp_receive+0x5f8>)
 800d17e:	f005 f819 	bl	80121b4 <iprintf>
      inseg.len -= off;
 800d182:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d184:	891a      	ldrh	r2, [r3, #8]
 800d186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d190:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d192:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <tcp_receive+0x5ec>)
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	891a      	ldrh	r2, [r3, #8]
 800d198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d1a0:	e02a      	b.n	800d1f8 <tcp_receive+0x624>
 800d1a2:	bf00      	nop
 800d1a4:	080146b8 	.word	0x080146b8
 800d1a8:	080146c0 	.word	0x080146c0
 800d1ac:	2000ef6c 	.word	0x2000ef6c
 800d1b0:	2000ef68 	.word	0x2000ef68
 800d1b4:	2000ef2c 	.word	0x2000ef2c
 800d1b8:	2000ef6e 	.word	0x2000ef6e
 800d1bc:	2000ef64 	.word	0x2000ef64
 800d1c0:	2000ef44 	.word	0x2000ef44
 800d1c4:	08014350 	.word	0x08014350
 800d1c8:	080146c8 	.word	0x080146c8
 800d1cc:	0801439c 	.word	0x0801439c
 800d1d0:	080146d8 	.word	0x080146d8
 800d1d4:	080146e8 	.word	0x080146e8
        off -= p->len;
 800d1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1da:	895b      	ldrh	r3, [r3, #10]
 800d1dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1e8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d1ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1fa:	895b      	ldrh	r3, [r3, #10]
 800d1fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d200:	429a      	cmp	r2, r3
 800d202:	d8e9      	bhi.n	800d1d8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d204:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d208:	4619      	mov	r1, r3
 800d20a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d20c:	f7fc fb6e 	bl	80098ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d214:	4a90      	ldr	r2, [pc, #576]	@ (800d458 <tcp_receive+0x884>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	4b90      	ldr	r3, [pc, #576]	@ (800d45c <tcp_receive+0x888>)
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	4a8e      	ldr	r2, [pc, #568]	@ (800d458 <tcp_receive+0x884>)
 800d21e:	6812      	ldr	r2, [r2, #0]
 800d220:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d222:	e00d      	b.n	800d240 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d224:	4b8c      	ldr	r3, [pc, #560]	@ (800d458 <tcp_receive+0x884>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	da06      	bge.n	800d240 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8b5b      	ldrh	r3, [r3, #26]
 800d236:	f043 0302 	orr.w	r3, r3, #2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d240:	4b85      	ldr	r3, [pc, #532]	@ (800d458 <tcp_receive+0x884>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f2c0 8427 	blt.w	800da9e <tcp_receive+0xeca>
 800d250:	4b81      	ldr	r3, [pc, #516]	@ (800d458 <tcp_receive+0x884>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d25c:	440b      	add	r3, r1
 800d25e:	1ad3      	subs	r3, r2, r3
 800d260:	3301      	adds	r3, #1
 800d262:	2b00      	cmp	r3, #0
 800d264:	f300 841b 	bgt.w	800da9e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d26c:	4b7a      	ldr	r3, [pc, #488]	@ (800d458 <tcp_receive+0x884>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	f040 8298 	bne.w	800d7a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d276:	4b79      	ldr	r3, [pc, #484]	@ (800d45c <tcp_receive+0x888>)
 800d278:	891c      	ldrh	r4, [r3, #8]
 800d27a:	4b78      	ldr	r3, [pc, #480]	@ (800d45c <tcp_receive+0x888>)
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	899b      	ldrh	r3, [r3, #12]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4618      	mov	r0, r3
 800d284:	f7fa fffc 	bl	8008280 <lwip_htons>
 800d288:	4603      	mov	r3, r0
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <tcp_receive+0x6c4>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <tcp_receive+0x6c6>
 800d298:	2300      	movs	r3, #0
 800d29a:	4423      	add	r3, r4
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	4b70      	ldr	r3, [pc, #448]	@ (800d460 <tcp_receive+0x88c>)
 800d2a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d2a6:	4b6e      	ldr	r3, [pc, #440]	@ (800d460 <tcp_receive+0x88c>)
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d274      	bcs.n	800d398 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d2ae:	4b6b      	ldr	r3, [pc, #428]	@ (800d45c <tcp_receive+0x888>)
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	899b      	ldrh	r3, [r3, #12]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fa ffe2 	bl	8008280 <lwip_htons>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01e      	beq.n	800d306 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d2c8:	4b64      	ldr	r3, [pc, #400]	@ (800d45c <tcp_receive+0x888>)
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	899b      	ldrh	r3, [r3, #12]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	b21b      	sxth	r3, r3
 800d2d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d2d6:	b21c      	sxth	r4, r3
 800d2d8:	4b60      	ldr	r3, [pc, #384]	@ (800d45c <tcp_receive+0x888>)
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	899b      	ldrh	r3, [r3, #12]
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fa ffcd 	bl	8008280 <lwip_htons>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fa ffc5 	bl	8008280 <lwip_htons>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	4323      	orrs	r3, r4
 800d2fc:	b21a      	sxth	r2, r3
 800d2fe:	4b57      	ldr	r3, [pc, #348]	@ (800d45c <tcp_receive+0x888>)
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	b292      	uxth	r2, r2
 800d304:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d30a:	4b54      	ldr	r3, [pc, #336]	@ (800d45c <tcp_receive+0x888>)
 800d30c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d30e:	4b53      	ldr	r3, [pc, #332]	@ (800d45c <tcp_receive+0x888>)
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	899b      	ldrh	r3, [r3, #12]
 800d314:	b29b      	uxth	r3, r3
 800d316:	4618      	mov	r0, r3
 800d318:	f7fa ffb2 	bl	8008280 <lwip_htons>
 800d31c:	4603      	mov	r3, r0
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <tcp_receive+0x760>
            inseg.len -= 1;
 800d328:	4b4c      	ldr	r3, [pc, #304]	@ (800d45c <tcp_receive+0x888>)
 800d32a:	891b      	ldrh	r3, [r3, #8]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	b29a      	uxth	r2, r3
 800d330:	4b4a      	ldr	r3, [pc, #296]	@ (800d45c <tcp_receive+0x888>)
 800d332:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d334:	4b49      	ldr	r3, [pc, #292]	@ (800d45c <tcp_receive+0x888>)
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4a48      	ldr	r2, [pc, #288]	@ (800d45c <tcp_receive+0x888>)
 800d33a:	8912      	ldrh	r2, [r2, #8]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fc f9d4 	bl	80096ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d344:	4b45      	ldr	r3, [pc, #276]	@ (800d45c <tcp_receive+0x888>)
 800d346:	891c      	ldrh	r4, [r3, #8]
 800d348:	4b44      	ldr	r3, [pc, #272]	@ (800d45c <tcp_receive+0x888>)
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	899b      	ldrh	r3, [r3, #12]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4618      	mov	r0, r3
 800d352:	f7fa ff95 	bl	8008280 <lwip_htons>
 800d356:	4603      	mov	r3, r0
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <tcp_receive+0x792>
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <tcp_receive+0x794>
 800d366:	2300      	movs	r3, #0
 800d368:	4423      	add	r3, r4
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	4b3c      	ldr	r3, [pc, #240]	@ (800d460 <tcp_receive+0x88c>)
 800d36e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d370:	4b3b      	ldr	r3, [pc, #236]	@ (800d460 <tcp_receive+0x88c>)
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	4b38      	ldr	r3, [pc, #224]	@ (800d458 <tcp_receive+0x884>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	441a      	add	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d380:	6879      	ldr	r1, [r7, #4]
 800d382:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d384:	440b      	add	r3, r1
 800d386:	429a      	cmp	r2, r3
 800d388:	d006      	beq.n	800d398 <tcp_receive+0x7c4>
 800d38a:	4b36      	ldr	r3, [pc, #216]	@ (800d464 <tcp_receive+0x890>)
 800d38c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800d390:	4935      	ldr	r1, [pc, #212]	@ (800d468 <tcp_receive+0x894>)
 800d392:	4836      	ldr	r0, [pc, #216]	@ (800d46c <tcp_receive+0x898>)
 800d394:	f004 ff0e 	bl	80121b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 80e6 	beq.w	800d56e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d3a2:	4b2e      	ldr	r3, [pc, #184]	@ (800d45c <tcp_receive+0x888>)
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	899b      	ldrh	r3, [r3, #12]
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fa ff68 	bl	8008280 <lwip_htons>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d010      	beq.n	800d3de <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d3bc:	e00a      	b.n	800d3d4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3c2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7fd fd93 	bl	800aefa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1f0      	bne.n	800d3be <tcp_receive+0x7ea>
 800d3dc:	e0c7      	b.n	800d56e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d3e4:	e051      	b.n	800d48a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	899b      	ldrh	r3, [r3, #12]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fa ff46 	bl	8008280 <lwip_htons>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d03c      	beq.n	800d47a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d400:	4b16      	ldr	r3, [pc, #88]	@ (800d45c <tcp_receive+0x888>)
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	899b      	ldrh	r3, [r3, #12]
 800d406:	b29b      	uxth	r3, r3
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fa ff39 	bl	8008280 <lwip_htons>
 800d40e:	4603      	mov	r3, r0
 800d410:	b2db      	uxtb	r3, r3
 800d412:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d416:	2b00      	cmp	r3, #0
 800d418:	d12f      	bne.n	800d47a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d41a:	4b10      	ldr	r3, [pc, #64]	@ (800d45c <tcp_receive+0x888>)
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	899b      	ldrh	r3, [r3, #12]
 800d420:	b29c      	uxth	r4, r3
 800d422:	2001      	movs	r0, #1
 800d424:	f7fa ff2c 	bl	8008280 <lwip_htons>
 800d428:	4603      	mov	r3, r0
 800d42a:	461a      	mov	r2, r3
 800d42c:	4b0b      	ldr	r3, [pc, #44]	@ (800d45c <tcp_receive+0x888>)
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	4322      	orrs	r2, r4
 800d432:	b292      	uxth	r2, r2
 800d434:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d436:	4b09      	ldr	r3, [pc, #36]	@ (800d45c <tcp_receive+0x888>)
 800d438:	891c      	ldrh	r4, [r3, #8]
 800d43a:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <tcp_receive+0x888>)
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	899b      	ldrh	r3, [r3, #12]
 800d440:	b29b      	uxth	r3, r3
 800d442:	4618      	mov	r0, r3
 800d444:	f7fa ff1c 	bl	8008280 <lwip_htons>
 800d448:	4603      	mov	r3, r0
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	f003 0303 	and.w	r3, r3, #3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00d      	beq.n	800d470 <tcp_receive+0x89c>
 800d454:	2301      	movs	r3, #1
 800d456:	e00c      	b.n	800d472 <tcp_receive+0x89e>
 800d458:	2000ef64 	.word	0x2000ef64
 800d45c:	2000ef44 	.word	0x2000ef44
 800d460:	2000ef6e 	.word	0x2000ef6e
 800d464:	08014350 	.word	0x08014350
 800d468:	080146f8 	.word	0x080146f8
 800d46c:	0801439c 	.word	0x0801439c
 800d470:	2300      	movs	r3, #0
 800d472:	4423      	add	r3, r4
 800d474:	b29a      	uxth	r2, r3
 800d476:	4b98      	ldr	r3, [pc, #608]	@ (800d6d8 <tcp_receive+0xb04>)
 800d478:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800d484:	6938      	ldr	r0, [r7, #16]
 800d486:	f7fd fd38 	bl	800aefa <tcp_seg_free>
            while (next &&
 800d48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d490:	4b91      	ldr	r3, [pc, #580]	@ (800d6d8 <tcp_receive+0xb04>)
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	4b91      	ldr	r3, [pc, #580]	@ (800d6dc <tcp_receive+0xb08>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	441a      	add	r2, r3
 800d49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4a4:	8909      	ldrh	r1, [r1, #8]
 800d4a6:	440b      	add	r3, r1
 800d4a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	da9b      	bge.n	800d3e6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d059      	beq.n	800d568 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d4b4:	4b88      	ldr	r3, [pc, #544]	@ (800d6d8 <tcp_receive+0xb04>)
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b88      	ldr	r3, [pc, #544]	@ (800d6dc <tcp_receive+0xb08>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	441a      	add	r2, r3
 800d4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	dd4d      	ble.n	800d568 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	4b81      	ldr	r3, [pc, #516]	@ (800d6dc <tcp_receive+0xb08>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	4b80      	ldr	r3, [pc, #512]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d4e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d4e2:	4b7f      	ldr	r3, [pc, #508]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	899b      	ldrh	r3, [r3, #12]
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fa fec8 	bl	8008280 <lwip_htons>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f003 0302 	and.w	r3, r3, #2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <tcp_receive+0x934>
                inseg.len -= 1;
 800d4fc:	4b78      	ldr	r3, [pc, #480]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d4fe:	891b      	ldrh	r3, [r3, #8]
 800d500:	3b01      	subs	r3, #1
 800d502:	b29a      	uxth	r2, r3
 800d504:	4b76      	ldr	r3, [pc, #472]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d506:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d508:	4b75      	ldr	r3, [pc, #468]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	4a74      	ldr	r2, [pc, #464]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d50e:	8912      	ldrh	r2, [r2, #8]
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7fc f8ea 	bl	80096ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d518:	4b71      	ldr	r3, [pc, #452]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d51a:	891c      	ldrh	r4, [r3, #8]
 800d51c:	4b70      	ldr	r3, [pc, #448]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	899b      	ldrh	r3, [r3, #12]
 800d522:	b29b      	uxth	r3, r3
 800d524:	4618      	mov	r0, r3
 800d526:	f7fa feab 	bl	8008280 <lwip_htons>
 800d52a:	4603      	mov	r3, r0
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f003 0303 	and.w	r3, r3, #3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <tcp_receive+0x966>
 800d536:	2301      	movs	r3, #1
 800d538:	e000      	b.n	800d53c <tcp_receive+0x968>
 800d53a:	2300      	movs	r3, #0
 800d53c:	4423      	add	r3, r4
 800d53e:	b29a      	uxth	r2, r3
 800d540:	4b65      	ldr	r3, [pc, #404]	@ (800d6d8 <tcp_receive+0xb04>)
 800d542:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d544:	4b64      	ldr	r3, [pc, #400]	@ (800d6d8 <tcp_receive+0xb04>)
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	4b64      	ldr	r3, [pc, #400]	@ (800d6dc <tcp_receive+0xb08>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	441a      	add	r2, r3
 800d550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d006      	beq.n	800d568 <tcp_receive+0x994>
 800d55a:	4b62      	ldr	r3, [pc, #392]	@ (800d6e4 <tcp_receive+0xb10>)
 800d55c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800d560:	4961      	ldr	r1, [pc, #388]	@ (800d6e8 <tcp_receive+0xb14>)
 800d562:	4862      	ldr	r0, [pc, #392]	@ (800d6ec <tcp_receive+0xb18>)
 800d564:	f004 fe26 	bl	80121b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d56c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d56e:	4b5a      	ldr	r3, [pc, #360]	@ (800d6d8 <tcp_receive+0xb04>)
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	461a      	mov	r2, r3
 800d574:	4b59      	ldr	r3, [pc, #356]	@ (800d6dc <tcp_receive+0xb08>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	441a      	add	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d582:	4b55      	ldr	r3, [pc, #340]	@ (800d6d8 <tcp_receive+0xb04>)
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d206      	bcs.n	800d598 <tcp_receive+0x9c4>
 800d58a:	4b56      	ldr	r3, [pc, #344]	@ (800d6e4 <tcp_receive+0xb10>)
 800d58c:	f240 6207 	movw	r2, #1543	@ 0x607
 800d590:	4957      	ldr	r1, [pc, #348]	@ (800d6f0 <tcp_receive+0xb1c>)
 800d592:	4856      	ldr	r0, [pc, #344]	@ (800d6ec <tcp_receive+0xb18>)
 800d594:	f004 fe0e 	bl	80121b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d59c:	4b4e      	ldr	r3, [pc, #312]	@ (800d6d8 <tcp_receive+0xb04>)
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7fc ffc5 	bl	800a538 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d5ae:	4b4c      	ldr	r3, [pc, #304]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d006      	beq.n	800d5c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d5b8:	4b49      	ldr	r3, [pc, #292]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	4a4d      	ldr	r2, [pc, #308]	@ (800d6f4 <tcp_receive+0xb20>)
 800d5be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d5c0:	4b47      	ldr	r3, [pc, #284]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d5c6:	4b46      	ldr	r3, [pc, #280]	@ (800d6e0 <tcp_receive+0xb0c>)
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	899b      	ldrh	r3, [r3, #12]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fa fe56 	bl	8008280 <lwip_htons>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80b8 	beq.w	800d752 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d5e2:	4b45      	ldr	r3, [pc, #276]	@ (800d6f8 <tcp_receive+0xb24>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f043 0320 	orr.w	r3, r3, #32
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	4b42      	ldr	r3, [pc, #264]	@ (800d6f8 <tcp_receive+0xb24>)
 800d5ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d5f0:	e0af      	b.n	800d752 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	4a36      	ldr	r2, [pc, #216]	@ (800d6dc <tcp_receive+0xb08>)
 800d602:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	891b      	ldrh	r3, [r3, #8]
 800d608:	461c      	mov	r4, r3
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	899b      	ldrh	r3, [r3, #12]
 800d610:	b29b      	uxth	r3, r3
 800d612:	4618      	mov	r0, r3
 800d614:	f7fa fe34 	bl	8008280 <lwip_htons>
 800d618:	4603      	mov	r3, r0
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	f003 0303 	and.w	r3, r3, #3
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <tcp_receive+0xa54>
 800d624:	2301      	movs	r3, #1
 800d626:	e000      	b.n	800d62a <tcp_receive+0xa56>
 800d628:	2300      	movs	r3, #0
 800d62a:	191a      	adds	r2, r3, r4
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d630:	441a      	add	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d63a:	461c      	mov	r4, r3
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	891b      	ldrh	r3, [r3, #8]
 800d640:	461d      	mov	r5, r3
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	899b      	ldrh	r3, [r3, #12]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fa fe18 	bl	8008280 <lwip_htons>
 800d650:	4603      	mov	r3, r0
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <tcp_receive+0xa8c>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e000      	b.n	800d662 <tcp_receive+0xa8e>
 800d660:	2300      	movs	r3, #0
 800d662:	442b      	add	r3, r5
 800d664:	429c      	cmp	r4, r3
 800d666:	d206      	bcs.n	800d676 <tcp_receive+0xaa2>
 800d668:	4b1e      	ldr	r3, [pc, #120]	@ (800d6e4 <tcp_receive+0xb10>)
 800d66a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d66e:	4923      	ldr	r1, [pc, #140]	@ (800d6fc <tcp_receive+0xb28>)
 800d670:	481e      	ldr	r0, [pc, #120]	@ (800d6ec <tcp_receive+0xb18>)
 800d672:	f004 fd9f 	bl	80121b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	891b      	ldrh	r3, [r3, #8]
 800d67a:	461c      	mov	r4, r3
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	899b      	ldrh	r3, [r3, #12]
 800d682:	b29b      	uxth	r3, r3
 800d684:	4618      	mov	r0, r3
 800d686:	f7fa fdfb 	bl	8008280 <lwip_htons>
 800d68a:	4603      	mov	r3, r0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0303 	and.w	r3, r3, #3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d001      	beq.n	800d69a <tcp_receive+0xac6>
 800d696:	2301      	movs	r3, #1
 800d698:	e000      	b.n	800d69c <tcp_receive+0xac8>
 800d69a:	2300      	movs	r3, #0
 800d69c:	1919      	adds	r1, r3, r4
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d6a2:	b28b      	uxth	r3, r1
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7fc ff43 	bl	800a538 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	891b      	ldrh	r3, [r3, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d028      	beq.n	800d70e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f4 <tcp_receive+0xb20>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d01d      	beq.n	800d700 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d6f4 <tcp_receive+0xb20>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f7fc fa60 	bl	8009b94 <pbuf_cat>
 800d6d4:	e018      	b.n	800d708 <tcp_receive+0xb34>
 800d6d6:	bf00      	nop
 800d6d8:	2000ef6e 	.word	0x2000ef6e
 800d6dc:	2000ef64 	.word	0x2000ef64
 800d6e0:	2000ef44 	.word	0x2000ef44
 800d6e4:	08014350 	.word	0x08014350
 800d6e8:	08014730 	.word	0x08014730
 800d6ec:	0801439c 	.word	0x0801439c
 800d6f0:	0801476c 	.word	0x0801476c
 800d6f4:	2000ef74 	.word	0x2000ef74
 800d6f8:	2000ef71 	.word	0x2000ef71
 800d6fc:	0801478c 	.word	0x0801478c
            } else {
              recv_data = cseg->p;
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	4a70      	ldr	r2, [pc, #448]	@ (800d8c8 <tcp_receive+0xcf4>)
 800d706:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	899b      	ldrh	r3, [r3, #12]
 800d714:	b29b      	uxth	r3, r3
 800d716:	4618      	mov	r0, r3
 800d718:	f7fa fdb2 	bl	8008280 <lwip_htons>
 800d71c:	4603      	mov	r3, r0
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00d      	beq.n	800d744 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d728:	4b68      	ldr	r3, [pc, #416]	@ (800d8cc <tcp_receive+0xcf8>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f043 0320 	orr.w	r3, r3, #32
 800d730:	b2da      	uxtb	r2, r3
 800d732:	4b66      	ldr	r3, [pc, #408]	@ (800d8cc <tcp_receive+0xcf8>)
 800d734:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7d1b      	ldrb	r3, [r3, #20]
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d102      	bne.n	800d744 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2207      	movs	r2, #7
 800d742:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d74c:	68b8      	ldr	r0, [r7, #8]
 800d74e:	f7fd fbd4 	bl	800aefa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800d766:	429a      	cmp	r2, r3
 800d768:	f43f af43 	beq.w	800d5f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	8b5b      	ldrh	r3, [r3, #26]
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00e      	beq.n	800d796 <tcp_receive+0xbc2>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	8b5b      	ldrh	r3, [r3, #26]
 800d77c:	f023 0301 	bic.w	r3, r3, #1
 800d780:	b29a      	uxth	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	835a      	strh	r2, [r3, #26]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	8b5b      	ldrh	r3, [r3, #26]
 800d78a:	f043 0302 	orr.w	r3, r3, #2
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d794:	e187      	b.n	800daa6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	8b5b      	ldrh	r3, [r3, #26]
 800d79a:	f043 0301 	orr.w	r3, r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d7a4:	e17f      	b.n	800daa6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d7ae:	4848      	ldr	r0, [pc, #288]	@ (800d8d0 <tcp_receive+0xcfc>)
 800d7b0:	f7fd fbbc 	bl	800af2c <tcp_seg_copy>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800d7ba:	e16c      	b.n	800da96 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7c6:	e156      	b.n	800da76 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	4b41      	ldr	r3, [pc, #260]	@ (800d8d4 <tcp_receive+0xd00>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d11d      	bne.n	800d812 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d7d6:	4b3e      	ldr	r3, [pc, #248]	@ (800d8d0 <tcp_receive+0xcfc>)
 800d7d8:	891a      	ldrh	r2, [r3, #8]
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	891b      	ldrh	r3, [r3, #8]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	f240 814e 	bls.w	800da80 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d7e4:	483a      	ldr	r0, [pc, #232]	@ (800d8d0 <tcp_receive+0xcfc>)
 800d7e6:	f7fd fba1 	bl	800af2c <tcp_seg_copy>
 800d7ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 8148 	beq.w	800da84 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	e002      	b.n	800d808 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d808:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d80a:	6978      	ldr	r0, [r7, #20]
 800d80c:	f7ff f8de 	bl	800c9cc <tcp_oos_insert_segment>
                }
                break;
 800d810:	e138      	b.n	800da84 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d814:	2b00      	cmp	r3, #0
 800d816:	d117      	bne.n	800d848 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d818:	4b2e      	ldr	r3, [pc, #184]	@ (800d8d4 <tcp_receive+0xd00>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	da57      	bge.n	800d8d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d828:	4829      	ldr	r0, [pc, #164]	@ (800d8d0 <tcp_receive+0xcfc>)
 800d82a:	f7fd fb7f 	bl	800af2c <tcp_seg_copy>
 800d82e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 8128 	beq.w	800da88 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d83e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d840:	69b8      	ldr	r0, [r7, #24]
 800d842:	f7ff f8c3 	bl	800c9cc <tcp_oos_insert_segment>
                  }
                  break;
 800d846:	e11f      	b.n	800da88 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d848:	4b22      	ldr	r3, [pc, #136]	@ (800d8d4 <tcp_receive+0xd00>)
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	3b01      	subs	r3, #1
 800d856:	2b00      	cmp	r3, #0
 800d858:	db3e      	blt.n	800d8d8 <tcp_receive+0xd04>
 800d85a:	4b1e      	ldr	r3, [pc, #120]	@ (800d8d4 <tcp_receive+0xd00>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	3301      	adds	r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dc35      	bgt.n	800d8d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d86c:	4818      	ldr	r0, [pc, #96]	@ (800d8d0 <tcp_receive+0xcfc>)
 800d86e:	f7fd fb5d 	bl	800af2c <tcp_seg_copy>
 800d872:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 8108 	beq.w	800da8c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d884:	8912      	ldrh	r2, [r2, #8]
 800d886:	441a      	add	r2, r3
 800d888:	4b12      	ldr	r3, [pc, #72]	@ (800d8d4 <tcp_receive+0xd00>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd12      	ble.n	800d8b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d892:	4b10      	ldr	r3, [pc, #64]	@ (800d8d4 <tcp_receive+0xd00>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	b29a      	uxth	r2, r3
 800d898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ae:	891b      	ldrh	r3, [r3, #8]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4610      	mov	r0, r2
 800d8b4:	f7fb ff1a 	bl	80096ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ba:	69fa      	ldr	r2, [r7, #28]
 800d8bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d8be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d8c0:	69f8      	ldr	r0, [r7, #28]
 800d8c2:	f7ff f883 	bl	800c9cc <tcp_oos_insert_segment>
                  }
                  break;
 800d8c6:	e0e1      	b.n	800da8c <tcp_receive+0xeb8>
 800d8c8:	2000ef74 	.word	0x2000ef74
 800d8cc:	2000ef71 	.word	0x2000ef71
 800d8d0:	2000ef44 	.word	0x2000ef44
 800d8d4:	2000ef64 	.word	0x2000ef64
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f040 80c5 	bne.w	800da70 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d8e6:	4b7f      	ldr	r3, [pc, #508]	@ (800dae4 <tcp_receive+0xf10>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f340 80bc 	ble.w	800da70 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	899b      	ldrh	r3, [r3, #12]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	f7fa fcbd 	bl	8008280 <lwip_htons>
 800d906:	4603      	mov	r3, r0
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f040 80be 	bne.w	800da90 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d914:	4874      	ldr	r0, [pc, #464]	@ (800dae8 <tcp_receive+0xf14>)
 800d916:	f7fd fb09 	bl	800af2c <tcp_seg_copy>
 800d91a:	4602      	mov	r2, r0
 800d91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 80b5 	beq.w	800da94 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d932:	8912      	ldrh	r2, [r2, #8]
 800d934:	441a      	add	r2, r3
 800d936:	4b6b      	ldr	r3, [pc, #428]	@ (800dae4 <tcp_receive+0xf10>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	1ad3      	subs	r3, r2, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	dd12      	ble.n	800d966 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d940:	4b68      	ldr	r3, [pc, #416]	@ (800dae4 <tcp_receive+0xf10>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	b29a      	uxth	r2, r3
 800d946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	b29a      	uxth	r2, r3
 800d952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d954:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d958:	685a      	ldr	r2, [r3, #4]
 800d95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95c:	891b      	ldrh	r3, [r3, #8]
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f7fb fec3 	bl	80096ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d966:	4b61      	ldr	r3, [pc, #388]	@ (800daec <tcp_receive+0xf18>)
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	461a      	mov	r2, r3
 800d96c:	4b5d      	ldr	r3, [pc, #372]	@ (800dae4 <tcp_receive+0xf10>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	441a      	add	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d97a:	440b      	add	r3, r1
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f340 8088 	ble.w	800da94 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	899b      	ldrh	r3, [r3, #12]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fa fc76 	bl	8008280 <lwip_htons>
 800d994:	4603      	mov	r3, r0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d021      	beq.n	800d9e4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	899b      	ldrh	r3, [r3, #12]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	b21b      	sxth	r3, r3
 800d9ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d9b0:	b21c      	sxth	r4, r3
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	899b      	ldrh	r3, [r3, #12]
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fa fc5f 	bl	8008280 <lwip_htons>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fa fc57 	bl	8008280 <lwip_htons>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	b21b      	sxth	r3, r3
 800d9d6:	4323      	orrs	r3, r4
 800d9d8:	b21a      	sxth	r2, r3
 800d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	b292      	uxth	r2, r2
 800d9e2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9ee:	4413      	add	r3, r2
 800d9f0:	b299      	uxth	r1, r3
 800d9f2:	4b3c      	ldr	r3, [pc, #240]	@ (800dae4 <tcp_receive+0xf10>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	1a8a      	subs	r2, r1, r2
 800d9fe:	b292      	uxth	r2, r2
 800da00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800da02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	891b      	ldrh	r3, [r3, #8]
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7fb fe6b 	bl	80096ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	891c      	ldrh	r4, [r3, #8]
 800da1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	899b      	ldrh	r3, [r3, #12]
 800da24:	b29b      	uxth	r3, r3
 800da26:	4618      	mov	r0, r3
 800da28:	f7fa fc2a 	bl	8008280 <lwip_htons>
 800da2c:	4603      	mov	r3, r0
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 0303 	and.w	r3, r3, #3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <tcp_receive+0xe68>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <tcp_receive+0xe6a>
 800da3c:	2300      	movs	r3, #0
 800da3e:	4423      	add	r3, r4
 800da40:	b29a      	uxth	r2, r3
 800da42:	4b2a      	ldr	r3, [pc, #168]	@ (800daec <tcp_receive+0xf18>)
 800da44:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da46:	4b29      	ldr	r3, [pc, #164]	@ (800daec <tcp_receive+0xf18>)
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	4b25      	ldr	r3, [pc, #148]	@ (800dae4 <tcp_receive+0xf10>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	441a      	add	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800da5a:	440b      	add	r3, r1
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d019      	beq.n	800da94 <tcp_receive+0xec0>
 800da60:	4b23      	ldr	r3, [pc, #140]	@ (800daf0 <tcp_receive+0xf1c>)
 800da62:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800da66:	4923      	ldr	r1, [pc, #140]	@ (800daf4 <tcp_receive+0xf20>)
 800da68:	4823      	ldr	r0, [pc, #140]	@ (800daf8 <tcp_receive+0xf24>)
 800da6a:	f004 fba3 	bl	80121b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800da6e:	e011      	b.n	800da94 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f47f aea5 	bne.w	800d7c8 <tcp_receive+0xbf4>
 800da7e:	e00a      	b.n	800da96 <tcp_receive+0xec2>
                break;
 800da80:	bf00      	nop
 800da82:	e008      	b.n	800da96 <tcp_receive+0xec2>
                break;
 800da84:	bf00      	nop
 800da86:	e006      	b.n	800da96 <tcp_receive+0xec2>
                  break;
 800da88:	bf00      	nop
 800da8a:	e004      	b.n	800da96 <tcp_receive+0xec2>
                  break;
 800da8c:	bf00      	nop
 800da8e:	e002      	b.n	800da96 <tcp_receive+0xec2>
                  break;
 800da90:	bf00      	nop
 800da92:	e000      	b.n	800da96 <tcp_receive+0xec2>
                break;
 800da94:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f001 fa30 	bl	800eefc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800da9c:	e003      	b.n	800daa6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f001 fa2c 	bl	800eefc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800daa4:	e01a      	b.n	800dadc <tcp_receive+0xf08>
 800daa6:	e019      	b.n	800dadc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800daa8:	4b0e      	ldr	r3, [pc, #56]	@ (800dae4 <tcp_receive+0xf10>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	db0a      	blt.n	800dacc <tcp_receive+0xef8>
 800dab6:	4b0b      	ldr	r3, [pc, #44]	@ (800dae4 <tcp_receive+0xf10>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dabe:	6879      	ldr	r1, [r7, #4]
 800dac0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dac2:	440b      	add	r3, r1
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	3301      	adds	r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dd07      	ble.n	800dadc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	8b5b      	ldrh	r3, [r3, #26]
 800dad0:	f043 0302 	orr.w	r3, r3, #2
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dada:	e7ff      	b.n	800dadc <tcp_receive+0xf08>
 800dadc:	bf00      	nop
 800dade:	3750      	adds	r7, #80	@ 0x50
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bdb0      	pop	{r4, r5, r7, pc}
 800dae4:	2000ef64 	.word	0x2000ef64
 800dae8:	2000ef44 	.word	0x2000ef44
 800daec:	2000ef6e 	.word	0x2000ef6e
 800daf0:	08014350 	.word	0x08014350
 800daf4:	080146f8 	.word	0x080146f8
 800daf8:	0801439c 	.word	0x0801439c

0800dafc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800db02:	4b15      	ldr	r3, [pc, #84]	@ (800db58 <tcp_get_next_optbyte+0x5c>)
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	b291      	uxth	r1, r2
 800db0a:	4a13      	ldr	r2, [pc, #76]	@ (800db58 <tcp_get_next_optbyte+0x5c>)
 800db0c:	8011      	strh	r1, [r2, #0]
 800db0e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800db10:	4b12      	ldr	r3, [pc, #72]	@ (800db5c <tcp_get_next_optbyte+0x60>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d004      	beq.n	800db22 <tcp_get_next_optbyte+0x26>
 800db18:	4b11      	ldr	r3, [pc, #68]	@ (800db60 <tcp_get_next_optbyte+0x64>)
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	88fa      	ldrh	r2, [r7, #6]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d208      	bcs.n	800db34 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800db22:	4b10      	ldr	r3, [pc, #64]	@ (800db64 <tcp_get_next_optbyte+0x68>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3314      	adds	r3, #20
 800db28:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	4413      	add	r3, r2
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	e00b      	b.n	800db4c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800db34:	88fb      	ldrh	r3, [r7, #6]
 800db36:	b2da      	uxtb	r2, r3
 800db38:	4b09      	ldr	r3, [pc, #36]	@ (800db60 <tcp_get_next_optbyte+0x64>)
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800db42:	4b06      	ldr	r3, [pc, #24]	@ (800db5c <tcp_get_next_optbyte+0x60>)
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	797b      	ldrb	r3, [r7, #5]
 800db48:	4413      	add	r3, r2
 800db4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	2000ef60 	.word	0x2000ef60
 800db5c:	2000ef5c 	.word	0x2000ef5c
 800db60:	2000ef5a 	.word	0x2000ef5a
 800db64:	2000ef54 	.word	0x2000ef54

0800db68 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <tcp_parseopt+0x1c>
 800db76:	4b32      	ldr	r3, [pc, #200]	@ (800dc40 <tcp_parseopt+0xd8>)
 800db78:	f240 727d 	movw	r2, #1917	@ 0x77d
 800db7c:	4931      	ldr	r1, [pc, #196]	@ (800dc44 <tcp_parseopt+0xdc>)
 800db7e:	4832      	ldr	r0, [pc, #200]	@ (800dc48 <tcp_parseopt+0xe0>)
 800db80:	f004 fb18 	bl	80121b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800db84:	4b31      	ldr	r3, [pc, #196]	@ (800dc4c <tcp_parseopt+0xe4>)
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d056      	beq.n	800dc3a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800db8c:	4b30      	ldr	r3, [pc, #192]	@ (800dc50 <tcp_parseopt+0xe8>)
 800db8e:	2200      	movs	r2, #0
 800db90:	801a      	strh	r2, [r3, #0]
 800db92:	e046      	b.n	800dc22 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800db94:	f7ff ffb2 	bl	800dafc <tcp_get_next_optbyte>
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d006      	beq.n	800dbb0 <tcp_parseopt+0x48>
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	dc2a      	bgt.n	800dbfc <tcp_parseopt+0x94>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d042      	beq.n	800dc30 <tcp_parseopt+0xc8>
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d038      	beq.n	800dc20 <tcp_parseopt+0xb8>
 800dbae:	e025      	b.n	800dbfc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dbb0:	f7ff ffa4 	bl	800dafc <tcp_get_next_optbyte>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b04      	cmp	r3, #4
 800dbb8:	d13c      	bne.n	800dc34 <tcp_parseopt+0xcc>
 800dbba:	4b25      	ldr	r3, [pc, #148]	@ (800dc50 <tcp_parseopt+0xe8>)
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	4a22      	ldr	r2, [pc, #136]	@ (800dc4c <tcp_parseopt+0xe4>)
 800dbc2:	8812      	ldrh	r2, [r2, #0]
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	da35      	bge.n	800dc34 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dbc8:	f7ff ff98 	bl	800dafc <tcp_get_next_optbyte>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dbd2:	f7ff ff93 	bl	800dafc <tcp_get_next_optbyte>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	89bb      	ldrh	r3, [r7, #12]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dbe0:	89bb      	ldrh	r3, [r7, #12]
 800dbe2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dbe6:	d804      	bhi.n	800dbf2 <tcp_parseopt+0x8a>
 800dbe8:	89bb      	ldrh	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <tcp_parseopt+0x8a>
 800dbee:	89ba      	ldrh	r2, [r7, #12]
 800dbf0:	e001      	b.n	800dbf6 <tcp_parseopt+0x8e>
 800dbf2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dbfa:	e012      	b.n	800dc22 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dbfc:	f7ff ff7e 	bl	800dafc <tcp_get_next_optbyte>
 800dc00:	4603      	mov	r3, r0
 800dc02:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dc04:	7afb      	ldrb	r3, [r7, #11]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d916      	bls.n	800dc38 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dc0a:	7afb      	ldrb	r3, [r7, #11]
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	4b10      	ldr	r3, [pc, #64]	@ (800dc50 <tcp_parseopt+0xe8>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	4413      	add	r3, r2
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	3b02      	subs	r3, #2
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	4b0d      	ldr	r3, [pc, #52]	@ (800dc50 <tcp_parseopt+0xe8>)
 800dc1c:	801a      	strh	r2, [r3, #0]
 800dc1e:	e000      	b.n	800dc22 <tcp_parseopt+0xba>
          break;
 800dc20:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc22:	4b0b      	ldr	r3, [pc, #44]	@ (800dc50 <tcp_parseopt+0xe8>)
 800dc24:	881a      	ldrh	r2, [r3, #0]
 800dc26:	4b09      	ldr	r3, [pc, #36]	@ (800dc4c <tcp_parseopt+0xe4>)
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d3b2      	bcc.n	800db94 <tcp_parseopt+0x2c>
 800dc2e:	e004      	b.n	800dc3a <tcp_parseopt+0xd2>
          return;
 800dc30:	bf00      	nop
 800dc32:	e002      	b.n	800dc3a <tcp_parseopt+0xd2>
            return;
 800dc34:	bf00      	nop
 800dc36:	e000      	b.n	800dc3a <tcp_parseopt+0xd2>
            return;
 800dc38:	bf00      	nop
      }
    }
  }
}
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	08014350 	.word	0x08014350
 800dc44:	080147b4 	.word	0x080147b4
 800dc48:	0801439c 	.word	0x0801439c
 800dc4c:	2000ef58 	.word	0x2000ef58
 800dc50:	2000ef60 	.word	0x2000ef60

0800dc54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dc54:	b480      	push	{r7}
 800dc56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dc58:	4b05      	ldr	r3, [pc, #20]	@ (800dc70 <tcp_trigger_input_pcb_close+0x1c>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f043 0310 	orr.w	r3, r3, #16
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	4b03      	ldr	r3, [pc, #12]	@ (800dc70 <tcp_trigger_input_pcb_close+0x1c>)
 800dc64:	701a      	strb	r2, [r3, #0]
}
 800dc66:	bf00      	nop
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	2000ef71 	.word	0x2000ef71

0800dc74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00a      	beq.n	800dc9c <tcp_route+0x28>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	7a1b      	ldrb	r3, [r3, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	7a1b      	ldrb	r3, [r3, #8]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fb fb22 	bl	80092dc <netif_get_by_index>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	e003      	b.n	800dca4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f002 feab 	bl	80109f8 <ip4_route>
 800dca2:	4603      	mov	r3, r0
  }
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	603b      	str	r3, [r7, #0]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d105      	bne.n	800dcce <tcp_create_segment+0x22>
 800dcc2:	4b43      	ldr	r3, [pc, #268]	@ (800ddd0 <tcp_create_segment+0x124>)
 800dcc4:	22a3      	movs	r2, #163	@ 0xa3
 800dcc6:	4943      	ldr	r1, [pc, #268]	@ (800ddd4 <tcp_create_segment+0x128>)
 800dcc8:	4843      	ldr	r0, [pc, #268]	@ (800ddd8 <tcp_create_segment+0x12c>)
 800dcca:	f004 fa73 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d105      	bne.n	800dce0 <tcp_create_segment+0x34>
 800dcd4:	4b3e      	ldr	r3, [pc, #248]	@ (800ddd0 <tcp_create_segment+0x124>)
 800dcd6:	22a4      	movs	r2, #164	@ 0xa4
 800dcd8:	4940      	ldr	r1, [pc, #256]	@ (800dddc <tcp_create_segment+0x130>)
 800dcda:	483f      	ldr	r0, [pc, #252]	@ (800ddd8 <tcp_create_segment+0x12c>)
 800dcdc:	f004 fa6a 	bl	80121b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dce0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dcee:	2003      	movs	r0, #3
 800dcf0:	f7fa ff8c 	bl	8008c0c <memp_malloc>
 800dcf4:	6138      	str	r0, [r7, #16]
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dcfc:	68b8      	ldr	r0, [r7, #8]
 800dcfe:	f7fb fe7b 	bl	80099f8 <pbuf_free>
    return NULL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e060      	b.n	800ddc8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800dd0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	891a      	ldrh	r2, [r3, #8]
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d205      	bcs.n	800dd32 <tcp_create_segment+0x86>
 800dd26:	4b2a      	ldr	r3, [pc, #168]	@ (800ddd0 <tcp_create_segment+0x124>)
 800dd28:	22b0      	movs	r2, #176	@ 0xb0
 800dd2a:	492d      	ldr	r1, [pc, #180]	@ (800dde0 <tcp_create_segment+0x134>)
 800dd2c:	482a      	ldr	r0, [pc, #168]	@ (800ddd8 <tcp_create_segment+0x12c>)
 800dd2e:	f004 fa41 	bl	80121b4 <iprintf>
  seg->len = p->tot_len - optlen;
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	891a      	ldrh	r2, [r3, #8]
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dd42:	2114      	movs	r1, #20
 800dd44:	68b8      	ldr	r0, [r7, #8]
 800dd46:	f7fb fdc1 	bl	80098cc <pbuf_add_header>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dd50:	6938      	ldr	r0, [r7, #16]
 800dd52:	f7fd f8d2 	bl	800aefa <tcp_seg_free>
    return NULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	e036      	b.n	800ddc8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	8ada      	ldrh	r2, [r3, #22]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	68dc      	ldr	r4, [r3, #12]
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7fa fa87 	bl	8008280 <lwip_htons>
 800dd72:	4603      	mov	r3, r0
 800dd74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	8b1a      	ldrh	r2, [r3, #24]
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	68dc      	ldr	r4, [r3, #12]
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f7fa fa7e 	bl	8008280 <lwip_htons>
 800dd84:	4603      	mov	r3, r0
 800dd86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	68dc      	ldr	r4, [r3, #12]
 800dd8c:	6838      	ldr	r0, [r7, #0]
 800dd8e:	f7fa fa8c 	bl	80082aa <lwip_htonl>
 800dd92:	4603      	mov	r3, r0
 800dd94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	089b      	lsrs	r3, r3, #2
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	3305      	adds	r3, #5
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	031b      	lsls	r3, r3, #12
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	68dc      	ldr	r4, [r3, #12]
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	f7fa fa65 	bl	8008280 <lwip_htons>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	749a      	strb	r2, [r3, #18]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	74da      	strb	r2, [r3, #19]
  return seg;
 800ddc6:	693b      	ldr	r3, [r7, #16]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	371c      	adds	r7, #28
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd90      	pop	{r4, r7, pc}
 800ddd0:	080147d0 	.word	0x080147d0
 800ddd4:	08014804 	.word	0x08014804
 800ddd8:	08014824 	.word	0x08014824
 800dddc:	0801484c 	.word	0x0801484c
 800dde0:	08014870 	.word	0x08014870

0800dde4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dde4:	b590      	push	{r4, r7, lr}
 800dde6:	b08b      	sub	sp, #44	@ 0x2c
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <tcp_split_unsent_seg+0x2c>
 800de02:	4b95      	ldr	r3, [pc, #596]	@ (800e058 <tcp_split_unsent_seg+0x274>)
 800de04:	f240 324b 	movw	r2, #843	@ 0x34b
 800de08:	4994      	ldr	r1, [pc, #592]	@ (800e05c <tcp_split_unsent_seg+0x278>)
 800de0a:	4895      	ldr	r0, [pc, #596]	@ (800e060 <tcp_split_unsent_seg+0x27c>)
 800de0c:	f004 f9d2 	bl	80121b4 <iprintf>

  useg = pcb->unsent;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800de1c:	f04f 33ff 	mov.w	r3, #4294967295
 800de20:	e116      	b.n	800e050 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800de22:	887b      	ldrh	r3, [r7, #2]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d109      	bne.n	800de3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800de28:	4b8b      	ldr	r3, [pc, #556]	@ (800e058 <tcp_split_unsent_seg+0x274>)
 800de2a:	f240 3253 	movw	r2, #851	@ 0x353
 800de2e:	498d      	ldr	r1, [pc, #564]	@ (800e064 <tcp_split_unsent_seg+0x280>)
 800de30:	488b      	ldr	r0, [pc, #556]	@ (800e060 <tcp_split_unsent_seg+0x27c>)
 800de32:	f004 f9bf 	bl	80121b4 <iprintf>
    return ERR_VAL;
 800de36:	f06f 0305 	mvn.w	r3, #5
 800de3a:	e109      	b.n	800e050 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	891b      	ldrh	r3, [r3, #8]
 800de40:	887a      	ldrh	r2, [r7, #2]
 800de42:	429a      	cmp	r2, r3
 800de44:	d301      	bcc.n	800de4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	e102      	b.n	800e050 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de4e:	887a      	ldrh	r2, [r7, #2]
 800de50:	429a      	cmp	r2, r3
 800de52:	d906      	bls.n	800de62 <tcp_split_unsent_seg+0x7e>
 800de54:	4b80      	ldr	r3, [pc, #512]	@ (800e058 <tcp_split_unsent_seg+0x274>)
 800de56:	f240 325b 	movw	r2, #859	@ 0x35b
 800de5a:	4983      	ldr	r1, [pc, #524]	@ (800e068 <tcp_split_unsent_seg+0x284>)
 800de5c:	4880      	ldr	r0, [pc, #512]	@ (800e060 <tcp_split_unsent_seg+0x27c>)
 800de5e:	f004 f9a9 	bl	80121b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	891b      	ldrh	r3, [r3, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <tcp_split_unsent_seg+0x94>
 800de6a:	4b7b      	ldr	r3, [pc, #492]	@ (800e058 <tcp_split_unsent_seg+0x274>)
 800de6c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800de70:	497e      	ldr	r1, [pc, #504]	@ (800e06c <tcp_split_unsent_seg+0x288>)
 800de72:	487b      	ldr	r0, [pc, #492]	@ (800e060 <tcp_split_unsent_seg+0x27c>)
 800de74:	f004 f99e 	bl	80121b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	7a9b      	ldrb	r3, [r3, #10]
 800de7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 0304 	and.w	r3, r3, #4
 800de88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	891a      	ldrh	r2, [r3, #8]
 800de8e:	887b      	ldrh	r3, [r7, #2]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	b29a      	uxth	r2, r3
 800de98:	89bb      	ldrh	r3, [r7, #12]
 800de9a:	4413      	add	r3, r2
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dea2:	4619      	mov	r1, r3
 800dea4:	2036      	movs	r0, #54	@ 0x36
 800dea6:	f7fb fac3 	bl	8009430 <pbuf_alloc>
 800deaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f000 80b7 	beq.w	800e022 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	891a      	ldrh	r2, [r3, #8]
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	891b      	ldrh	r3, [r3, #8]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	887b      	ldrh	r3, [r7, #2]
 800dec4:	4413      	add	r3, r2
 800dec6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	6858      	ldr	r0, [r3, #4]
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	18d1      	adds	r1, r2, r3
 800ded4:	897b      	ldrh	r3, [r7, #10]
 800ded6:	89ba      	ldrh	r2, [r7, #12]
 800ded8:	f7fb ff84 	bl	8009de4 <pbuf_copy_partial>
 800dedc:	4603      	mov	r3, r0
 800dede:	461a      	mov	r2, r3
 800dee0:	89bb      	ldrh	r3, [r7, #12]
 800dee2:	4293      	cmp	r3, r2
 800dee4:	f040 809f 	bne.w	800e026 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	899b      	ldrh	r3, [r3, #12]
 800deee:	b29b      	uxth	r3, r3
 800def0:	4618      	mov	r0, r3
 800def2:	f7fa f9c5 	bl	8008280 <lwip_htons>
 800def6:	4603      	mov	r3, r0
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800defe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800df00:	2300      	movs	r3, #0
 800df02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800df04:	7efb      	ldrb	r3, [r7, #27]
 800df06:	f003 0308 	and.w	r3, r3, #8
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d007      	beq.n	800df1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800df0e:	7efb      	ldrb	r3, [r7, #27]
 800df10:	f023 0308 	bic.w	r3, r3, #8
 800df14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800df16:	7ebb      	ldrb	r3, [r7, #26]
 800df18:	f043 0308 	orr.w	r3, r3, #8
 800df1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800df1e:	7efb      	ldrb	r3, [r7, #27]
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	d007      	beq.n	800df38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800df28:	7efb      	ldrb	r3, [r7, #27]
 800df2a:	f023 0301 	bic.w	r3, r3, #1
 800df2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800df30:	7ebb      	ldrb	r3, [r7, #26]
 800df32:	f043 0301 	orr.w	r3, r3, #1
 800df36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fa f9b3 	bl	80082aa <lwip_htonl>
 800df44:	4602      	mov	r2, r0
 800df46:	887b      	ldrh	r3, [r7, #2]
 800df48:	18d1      	adds	r1, r2, r3
 800df4a:	7eba      	ldrb	r2, [r7, #26]
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	460b      	mov	r3, r1
 800df52:	6939      	ldr	r1, [r7, #16]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff fea9 	bl	800dcac <tcp_create_segment>
 800df5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d063      	beq.n	800e02a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f7fb fdd4 	bl	8009b14 <pbuf_clen>
 800df6c:	4603      	mov	r3, r0
 800df6e:	461a      	mov	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df76:	1a9b      	subs	r3, r3, r2
 800df78:	b29a      	uxth	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	6858      	ldr	r0, [r3, #4]
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	891a      	ldrh	r2, [r3, #8]
 800df8a:	89bb      	ldrh	r3, [r7, #12]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	b29b      	uxth	r3, r3
 800df90:	4619      	mov	r1, r3
 800df92:	f7fb fbab 	bl	80096ec <pbuf_realloc>
  useg->len -= remainder;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	891a      	ldrh	r2, [r3, #8]
 800df9a:	89bb      	ldrh	r3, [r7, #12]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	899b      	ldrh	r3, [r3, #12]
 800dfaa:	b29c      	uxth	r4, r3
 800dfac:	7efb      	ldrb	r3, [r7, #27]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fa f965 	bl	8008280 <lwip_htons>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	461a      	mov	r2, r3
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	4322      	orrs	r2, r4
 800dfc0:	b292      	uxth	r2, r2
 800dfc2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fb fda3 	bl	8009b14 <pbuf_clen>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dfd8:	4413      	add	r3, r2
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fb fd94 	bl	8009b14 <pbuf_clen>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dff6:	4413      	add	r3, r2
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	69fa      	ldr	r2, [r7, #28]
 800e00c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d103      	bne.n	800e01e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	e016      	b.n	800e050 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e022:	bf00      	nop
 800e024:	e002      	b.n	800e02c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e026:	bf00      	nop
 800e028:	e000      	b.n	800e02c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e02a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <tcp_split_unsent_seg+0x25c>
 800e032:	4b09      	ldr	r3, [pc, #36]	@ (800e058 <tcp_split_unsent_seg+0x274>)
 800e034:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e038:	490d      	ldr	r1, [pc, #52]	@ (800e070 <tcp_split_unsent_seg+0x28c>)
 800e03a:	4809      	ldr	r0, [pc, #36]	@ (800e060 <tcp_split_unsent_seg+0x27c>)
 800e03c:	f004 f8ba 	bl	80121b4 <iprintf>
  if (p != NULL) {
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e046:	6938      	ldr	r0, [r7, #16]
 800e048:	f7fb fcd6 	bl	80099f8 <pbuf_free>
  }

  return ERR_MEM;
 800e04c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e050:	4618      	mov	r0, r3
 800e052:	3724      	adds	r7, #36	@ 0x24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd90      	pop	{r4, r7, pc}
 800e058:	080147d0 	.word	0x080147d0
 800e05c:	08014b64 	.word	0x08014b64
 800e060:	08014824 	.word	0x08014824
 800e064:	08014b88 	.word	0x08014b88
 800e068:	08014bac 	.word	0x08014bac
 800e06c:	08014bbc 	.word	0x08014bbc
 800e070:	08014bcc 	.word	0x08014bcc

0800e074 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <tcp_send_fin+0x1c>
 800e082:	4b21      	ldr	r3, [pc, #132]	@ (800e108 <tcp_send_fin+0x94>)
 800e084:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e088:	4920      	ldr	r1, [pc, #128]	@ (800e10c <tcp_send_fin+0x98>)
 800e08a:	4821      	ldr	r0, [pc, #132]	@ (800e110 <tcp_send_fin+0x9c>)
 800e08c:	f004 f892 	bl	80121b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e094:	2b00      	cmp	r3, #0
 800e096:	d02e      	beq.n	800e0f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	e002      	b.n	800e0a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1f8      	bne.n	800e0a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	899b      	ldrh	r3, [r3, #12]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fa f8e2 	bl	8008280 <lwip_htons>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f003 0307 	and.w	r3, r3, #7
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d116      	bne.n	800e0f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	899b      	ldrh	r3, [r3, #12]
 800e0ce:	b29c      	uxth	r4, r3
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	f7fa f8d5 	bl	8008280 <lwip_htons>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	461a      	mov	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	4322      	orrs	r2, r4
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8b5b      	ldrh	r3, [r3, #26]
 800e0e8:	f043 0320 	orr.w	r3, r3, #32
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e004      	b.n	800e100 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e0f6:	2101      	movs	r1, #1
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f80b 	bl	800e114 <tcp_enqueue_flags>
 800e0fe:	4603      	mov	r3, r0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	bd90      	pop	{r4, r7, pc}
 800e108:	080147d0 	.word	0x080147d0
 800e10c:	08014bd8 	.word	0x08014bd8
 800e110:	08014824 	.word	0x08014824

0800e114 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	@ 0x28
 800e118:	af02      	add	r7, sp, #8
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e124:	2300      	movs	r3, #0
 800e126:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e128:	78fb      	ldrb	r3, [r7, #3]
 800e12a:	f003 0303 	and.w	r3, r3, #3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <tcp_enqueue_flags+0x2c>
 800e132:	4b67      	ldr	r3, [pc, #412]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e134:	f240 4211 	movw	r2, #1041	@ 0x411
 800e138:	4966      	ldr	r1, [pc, #408]	@ (800e2d4 <tcp_enqueue_flags+0x1c0>)
 800e13a:	4867      	ldr	r0, [pc, #412]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e13c:	f004 f83a 	bl	80121b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <tcp_enqueue_flags+0x40>
 800e146:	4b62      	ldr	r3, [pc, #392]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e148:	f240 4213 	movw	r2, #1043	@ 0x413
 800e14c:	4963      	ldr	r1, [pc, #396]	@ (800e2dc <tcp_enqueue_flags+0x1c8>)
 800e14e:	4862      	ldr	r0, [pc, #392]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e150:	f004 f830 	bl	80121b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e154:	78fb      	ldrb	r3, [r7, #3]
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e15e:	2301      	movs	r3, #1
 800e160:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e162:	7ffb      	ldrb	r3, [r7, #31]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 0304 	and.w	r3, r3, #4
 800e16c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e16e:	7dfb      	ldrb	r3, [r7, #23]
 800e170:	b29b      	uxth	r3, r3
 800e172:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e176:	4619      	mov	r1, r3
 800e178:	2036      	movs	r0, #54	@ 0x36
 800e17a:	f7fb f959 	bl	8009430 <pbuf_alloc>
 800e17e:	6138      	str	r0, [r7, #16]
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d109      	bne.n	800e19a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8b5b      	ldrh	r3, [r3, #26]
 800e18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e194:	f04f 33ff 	mov.w	r3, #4294967295
 800e198:	e095      	b.n	800e2c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	895a      	ldrh	r2, [r3, #10]
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d206      	bcs.n	800e1b4 <tcp_enqueue_flags+0xa0>
 800e1a6:	4b4a      	ldr	r3, [pc, #296]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e1a8:	f240 4239 	movw	r2, #1081	@ 0x439
 800e1ac:	494c      	ldr	r1, [pc, #304]	@ (800e2e0 <tcp_enqueue_flags+0x1cc>)
 800e1ae:	484a      	ldr	r0, [pc, #296]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e1b0:	f004 f800 	bl	80121b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	7ffb      	ldrb	r3, [r7, #31]
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	460b      	mov	r3, r1
 800e1c0:	6939      	ldr	r1, [r7, #16]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff fd72 	bl	800dcac <tcp_create_segment>
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d109      	bne.n	800e1e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	8b5b      	ldrh	r3, [r3, #26]
 800e1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e1de:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e2:	e070      	b.n	800e2c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	f003 0303 	and.w	r3, r3, #3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d006      	beq.n	800e1fe <tcp_enqueue_flags+0xea>
 800e1f0:	4b37      	ldr	r3, [pc, #220]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e1f2:	f240 4242 	movw	r2, #1090	@ 0x442
 800e1f6:	493b      	ldr	r1, [pc, #236]	@ (800e2e4 <tcp_enqueue_flags+0x1d0>)
 800e1f8:	4837      	ldr	r0, [pc, #220]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e1fa:	f003 ffdb 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	891b      	ldrh	r3, [r3, #8]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d006      	beq.n	800e214 <tcp_enqueue_flags+0x100>
 800e206:	4b32      	ldr	r3, [pc, #200]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e208:	f240 4243 	movw	r2, #1091	@ 0x443
 800e20c:	4936      	ldr	r1, [pc, #216]	@ (800e2e8 <tcp_enqueue_flags+0x1d4>)
 800e20e:	4832      	ldr	r0, [pc, #200]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e210:	f003 ffd0 	bl	80121b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d103      	bne.n	800e224 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e222:	e00d      	b.n	800e240 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e228:	61bb      	str	r3, [r7, #24]
 800e22a:	e002      	b.n	800e232 <tcp_enqueue_flags+0x11e>
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1f8      	bne.n	800e22c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e248:	78fb      	ldrb	r3, [r7, #3]
 800e24a:	f003 0302 	and.w	r3, r3, #2
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d104      	bne.n	800e25c <tcp_enqueue_flags+0x148>
 800e252:	78fb      	ldrb	r3, [r7, #3]
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d004      	beq.n	800e266 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e266:	78fb      	ldrb	r3, [r7, #3]
 800e268:	f003 0301 	and.w	r3, r3, #1
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d006      	beq.n	800e27e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	8b5b      	ldrh	r3, [r3, #26]
 800e274:	f043 0320 	orr.w	r3, r3, #32
 800e278:	b29a      	uxth	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	4618      	mov	r0, r3
 800e284:	f7fb fc46 	bl	8009b14 <pbuf_clen>
 800e288:	4603      	mov	r3, r0
 800e28a:	461a      	mov	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e292:	4413      	add	r3, r2
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00e      	beq.n	800e2c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <tcp_enqueue_flags+0x1b0>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <tcp_enqueue_flags+0x1b0>
 800e2b6:	4b06      	ldr	r3, [pc, #24]	@ (800e2d0 <tcp_enqueue_flags+0x1bc>)
 800e2b8:	f240 4265 	movw	r2, #1125	@ 0x465
 800e2bc:	490b      	ldr	r1, [pc, #44]	@ (800e2ec <tcp_enqueue_flags+0x1d8>)
 800e2be:	4806      	ldr	r0, [pc, #24]	@ (800e2d8 <tcp_enqueue_flags+0x1c4>)
 800e2c0:	f003 ff78 	bl	80121b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	080147d0 	.word	0x080147d0
 800e2d4:	08014bf4 	.word	0x08014bf4
 800e2d8:	08014824 	.word	0x08014824
 800e2dc:	08014c4c 	.word	0x08014c4c
 800e2e0:	08014c6c 	.word	0x08014c6c
 800e2e4:	08014ca8 	.word	0x08014ca8
 800e2e8:	08014cc0 	.word	0x08014cc0
 800e2ec:	08014cec 	.word	0x08014cec

0800e2f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e2f0:	b5b0      	push	{r4, r5, r7, lr}
 800e2f2:	b08a      	sub	sp, #40	@ 0x28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <tcp_output+0x1c>
 800e2fe:	4b8a      	ldr	r3, [pc, #552]	@ (800e528 <tcp_output+0x238>)
 800e300:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e304:	4989      	ldr	r1, [pc, #548]	@ (800e52c <tcp_output+0x23c>)
 800e306:	488a      	ldr	r0, [pc, #552]	@ (800e530 <tcp_output+0x240>)
 800e308:	f003 ff54 	bl	80121b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	7d1b      	ldrb	r3, [r3, #20]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d106      	bne.n	800e322 <tcp_output+0x32>
 800e314:	4b84      	ldr	r3, [pc, #528]	@ (800e528 <tcp_output+0x238>)
 800e316:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e31a:	4986      	ldr	r1, [pc, #536]	@ (800e534 <tcp_output+0x244>)
 800e31c:	4884      	ldr	r0, [pc, #528]	@ (800e530 <tcp_output+0x240>)
 800e31e:	f003 ff49 	bl	80121b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e322:	4b85      	ldr	r3, [pc, #532]	@ (800e538 <tcp_output+0x248>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d101      	bne.n	800e330 <tcp_output+0x40>
    return ERR_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	e1ce      	b.n	800e6ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e33c:	4293      	cmp	r3, r2
 800e33e:	bf28      	it	cs
 800e340:	4613      	movcs	r3, r2
 800e342:	b29b      	uxth	r3, r3
 800e344:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10b      	bne.n	800e36a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	8b5b      	ldrh	r3, [r3, #26]
 800e356:	f003 0302 	and.w	r3, r3, #2
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f000 81aa 	beq.w	800e6b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fdcb 	bl	800eefc <tcp_send_empty_ack>
 800e366:	4603      	mov	r3, r0
 800e368:	e1b1      	b.n	800e6ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3304      	adds	r3, #4
 800e370:	461a      	mov	r2, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff fc7e 	bl	800dc74 <tcp_route>
 800e378:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <tcp_output+0x96>
    return ERR_RTE;
 800e380:	f06f 0303 	mvn.w	r3, #3
 800e384:	e1a3      	b.n	800e6ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <tcp_output+0xa4>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d111      	bne.n	800e3b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <tcp_output+0xb0>
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	3304      	adds	r3, #4
 800e39e:	e000      	b.n	800e3a2 <tcp_output+0xb2>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d102      	bne.n	800e3b0 <tcp_output+0xc0>
      return ERR_RTE;
 800e3aa:	f06f 0303 	mvn.w	r3, #3
 800e3ae:	e18e      	b.n	800e6ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7f9 ff73 	bl	80082aa <lwip_htonl>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ce:	8912      	ldrh	r2, [r2, #8]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d227      	bcs.n	800e428 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3de:	461a      	mov	r2, r3
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d114      	bne.n	800e410 <tcp_output+0x120>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d110      	bne.n	800e410 <tcp_output+0x120>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10b      	bne.n	800e410 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	8b5b      	ldrh	r3, [r3, #26]
 800e414:	f003 0302 	and.w	r3, r3, #2
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 814d 	beq.w	800e6b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fd6c 	bl	800eefc <tcp_send_empty_ack>
 800e424:	4603      	mov	r3, r0
 800e426:	e152      	b.n	800e6ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e434:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f000 811c 	beq.w	800e676 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e43e:	e002      	b.n	800e446 <tcp_output+0x156>
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	623b      	str	r3, [r7, #32]
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1f8      	bne.n	800e440 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e44e:	e112      	b.n	800e676 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	899b      	ldrh	r3, [r3, #12]
 800e456:	b29b      	uxth	r3, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	f7f9 ff11 	bl	8008280 <lwip_htons>
 800e45e:	4603      	mov	r3, r0
 800e460:	b2db      	uxtb	r3, r3
 800e462:	f003 0304 	and.w	r3, r3, #4
 800e466:	2b00      	cmp	r3, #0
 800e468:	d006      	beq.n	800e478 <tcp_output+0x188>
 800e46a:	4b2f      	ldr	r3, [pc, #188]	@ (800e528 <tcp_output+0x238>)
 800e46c:	f240 5236 	movw	r2, #1334	@ 0x536
 800e470:	4932      	ldr	r1, [pc, #200]	@ (800e53c <tcp_output+0x24c>)
 800e472:	482f      	ldr	r0, [pc, #188]	@ (800e530 <tcp_output+0x240>)
 800e474:	f003 fe9e 	bl	80121b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d01f      	beq.n	800e4c0 <tcp_output+0x1d0>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	8b5b      	ldrh	r3, [r3, #26]
 800e484:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d119      	bne.n	800e4c0 <tcp_output+0x1d0>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00b      	beq.n	800e4ac <tcp_output+0x1bc>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d110      	bne.n	800e4c0 <tcp_output+0x1d0>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a2:	891a      	ldrh	r2, [r3, #8]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d209      	bcs.n	800e4c0 <tcp_output+0x1d0>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d004      	beq.n	800e4c0 <tcp_output+0x1d0>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e4bc:	2b08      	cmp	r3, #8
 800e4be:	d901      	bls.n	800e4c4 <tcp_output+0x1d4>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e000      	b.n	800e4c6 <tcp_output+0x1d6>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d106      	bne.n	800e4d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8b5b      	ldrh	r3, [r3, #26]
 800e4ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 80e4 	beq.w	800e6a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	7d1b      	ldrb	r3, [r3, #20]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d00d      	beq.n	800e4fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	899b      	ldrh	r3, [r3, #12]
 800e4e6:	b29c      	uxth	r4, r3
 800e4e8:	2010      	movs	r0, #16
 800e4ea:	f7f9 fec9 	bl	8008280 <lwip_htons>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	4322      	orrs	r2, r4
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	6879      	ldr	r1, [r7, #4]
 800e500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e502:	f000 f909 	bl	800e718 <tcp_output_segment>
 800e506:	4603      	mov	r3, r0
 800e508:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d016      	beq.n	800e540 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	8b5b      	ldrh	r3, [r3, #26]
 800e516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	835a      	strh	r2, [r3, #26]
      return err;
 800e520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e524:	e0d3      	b.n	800e6ce <tcp_output+0x3de>
 800e526:	bf00      	nop
 800e528:	080147d0 	.word	0x080147d0
 800e52c:	08014d14 	.word	0x08014d14
 800e530:	08014824 	.word	0x08014824
 800e534:	08014d2c 	.word	0x08014d2c
 800e538:	2000ef78 	.word	0x2000ef78
 800e53c:	08014d54 	.word	0x08014d54
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7d1b      	ldrb	r3, [r3, #20]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d006      	beq.n	800e55e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	8b5b      	ldrh	r3, [r3, #26]
 800e554:	f023 0303 	bic.w	r3, r3, #3
 800e558:	b29a      	uxth	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f7f9 fea0 	bl	80082aa <lwip_htonl>
 800e56a:	4604      	mov	r4, r0
 800e56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56e:	891b      	ldrh	r3, [r3, #8]
 800e570:	461d      	mov	r5, r3
 800e572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f9 fe80 	bl	8008280 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	f003 0303 	and.w	r3, r3, #3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <tcp_output+0x2a0>
 800e58c:	2301      	movs	r3, #1
 800e58e:	e000      	b.n	800e592 <tcp_output+0x2a2>
 800e590:	2300      	movs	r3, #0
 800e592:	442b      	add	r3, r5
 800e594:	4423      	add	r3, r4
 800e596:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	da02      	bge.n	800e5aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ac:	891b      	ldrh	r3, [r3, #8]
 800e5ae:	461c      	mov	r4, r3
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	899b      	ldrh	r3, [r3, #12]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7f9 fe61 	bl	8008280 <lwip_htons>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	f003 0303 	and.w	r3, r3, #3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <tcp_output+0x2de>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <tcp_output+0x2e0>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	4423      	add	r3, r4
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d049      	beq.n	800e66a <tcp_output+0x37a>
      seg->next = NULL;
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d105      	bne.n	800e5f0 <tcp_output+0x300>
        pcb->unacked = seg;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5e8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ec:	623b      	str	r3, [r7, #32]
 800e5ee:	e03f      	b.n	800e670 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7f9 fe57 	bl	80082aa <lwip_htonl>
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	4618      	mov	r0, r3
 800e606:	f7f9 fe50 	bl	80082aa <lwip_htonl>
 800e60a:	4603      	mov	r3, r0
 800e60c:	1ae3      	subs	r3, r4, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	da24      	bge.n	800e65c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3370      	adds	r3, #112	@ 0x70
 800e616:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e618:	e002      	b.n	800e620 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d011      	beq.n	800e64c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	4618      	mov	r0, r3
 800e632:	f7f9 fe3a 	bl	80082aa <lwip_htonl>
 800e636:	4604      	mov	r4, r0
 800e638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7f9 fe33 	bl	80082aa <lwip_htonl>
 800e644:	4603      	mov	r3, r0
 800e646:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dbe6      	blt.n	800e61a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e652:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	e009      	b.n	800e670 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e660:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	623b      	str	r3, [r7, #32]
 800e668:	e002      	b.n	800e670 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e66a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e66c:	f7fc fc45 	bl	800aefa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d012      	beq.n	800e6a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	f7f9 fe11 	bl	80082aa <lwip_htonl>
 800e688:	4602      	mov	r2, r0
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e692:	8912      	ldrh	r2, [r2, #8]
 800e694:	4413      	add	r3, r2
  while (seg != NULL &&
 800e696:	69ba      	ldr	r2, [r7, #24]
 800e698:	429a      	cmp	r2, r3
 800e69a:	f4bf aed9 	bcs.w	800e450 <tcp_output+0x160>
 800e69e:	e000      	b.n	800e6a2 <tcp_output+0x3b2>
      break;
 800e6a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d108      	bne.n	800e6bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e6b2:	e004      	b.n	800e6be <tcp_output+0x3ce>
    goto output_done;
 800e6b4:	bf00      	nop
 800e6b6:	e002      	b.n	800e6be <tcp_output+0x3ce>
    goto output_done;
 800e6b8:	bf00      	nop
 800e6ba:	e000      	b.n	800e6be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e6bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	8b5b      	ldrh	r3, [r3, #26]
 800e6c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3728      	adds	r7, #40	@ 0x28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e6d6:	bf00      	nop

0800e6d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d106      	bne.n	800e6f4 <tcp_output_segment_busy+0x1c>
 800e6e6:	4b09      	ldr	r3, [pc, #36]	@ (800e70c <tcp_output_segment_busy+0x34>)
 800e6e8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e6ec:	4908      	ldr	r1, [pc, #32]	@ (800e710 <tcp_output_segment_busy+0x38>)
 800e6ee:	4809      	ldr	r0, [pc, #36]	@ (800e714 <tcp_output_segment_busy+0x3c>)
 800e6f0:	f003 fd60 	bl	80121b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	7b9b      	ldrb	r3, [r3, #14]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d001      	beq.n	800e702 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	080147d0 	.word	0x080147d0
 800e710:	08014d6c 	.word	0x08014d6c
 800e714:	08014824 	.word	0x08014824

0800e718 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e718:	b5b0      	push	{r4, r5, r7, lr}
 800e71a:	b08c      	sub	sp, #48	@ 0x30
 800e71c:	af04      	add	r7, sp, #16
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_output_segment+0x20>
 800e72a:	4b64      	ldr	r3, [pc, #400]	@ (800e8bc <tcp_output_segment+0x1a4>)
 800e72c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e730:	4963      	ldr	r1, [pc, #396]	@ (800e8c0 <tcp_output_segment+0x1a8>)
 800e732:	4864      	ldr	r0, [pc, #400]	@ (800e8c4 <tcp_output_segment+0x1ac>)
 800e734:	f003 fd3e 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d106      	bne.n	800e74c <tcp_output_segment+0x34>
 800e73e:	4b5f      	ldr	r3, [pc, #380]	@ (800e8bc <tcp_output_segment+0x1a4>)
 800e740:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e744:	4960      	ldr	r1, [pc, #384]	@ (800e8c8 <tcp_output_segment+0x1b0>)
 800e746:	485f      	ldr	r0, [pc, #380]	@ (800e8c4 <tcp_output_segment+0x1ac>)
 800e748:	f003 fd34 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <tcp_output_segment+0x48>
 800e752:	4b5a      	ldr	r3, [pc, #360]	@ (800e8bc <tcp_output_segment+0x1a4>)
 800e754:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e758:	495c      	ldr	r1, [pc, #368]	@ (800e8cc <tcp_output_segment+0x1b4>)
 800e75a:	485a      	ldr	r0, [pc, #360]	@ (800e8c4 <tcp_output_segment+0x1ac>)
 800e75c:	f003 fd2a 	bl	80121b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f7ff ffb9 	bl	800e6d8 <tcp_output_segment_busy>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	e0a1      	b.n	800e8b4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68dc      	ldr	r4, [r3, #12]
 800e778:	4610      	mov	r0, r2
 800e77a:	f7f9 fd96 	bl	80082aa <lwip_htonl>
 800e77e:	4603      	mov	r3, r0
 800e780:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	68dc      	ldr	r4, [r3, #12]
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7f9 fd78 	bl	8008280 <lwip_htons>
 800e790:	4603      	mov	r3, r0
 800e792:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e79c:	441a      	add	r2, r3
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	3314      	adds	r3, #20
 800e7a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	7a9b      	ldrb	r3, [r3, #10]
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d015      	beq.n	800e7e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	6879      	ldr	r1, [r7, #4]
 800e7be:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e7c2:	f7fc fe91 	bl	800b4e8 <tcp_eff_send_mss_netif>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e7ca:	8b7b      	ldrh	r3, [r7, #26]
 800e7cc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 fd6a 	bl	80082aa <lwip_htonl>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	da02      	bge.n	800e7f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10c      	bne.n	800e814 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e7fa:	4b35      	ldr	r3, [pc, #212]	@ (800e8d0 <tcp_output_segment+0x1b8>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	4618      	mov	r0, r3
 800e80a:	f7f9 fd4e 	bl	80082aa <lwip_htonl>
 800e80e:	4602      	mov	r2, r0
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	8959      	ldrh	r1, [r3, #10]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	8b3a      	ldrh	r2, [r7, #24]
 800e82e:	1a8a      	subs	r2, r1, r2
 800e830:	b292      	uxth	r2, r2
 800e832:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	8919      	ldrh	r1, [r3, #8]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	8b3a      	ldrh	r2, [r7, #24]
 800e840:	1a8a      	subs	r2, r1, r2
 800e842:	b292      	uxth	r2, r2
 800e844:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	68d2      	ldr	r2, [r2, #12]
 800e84e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	741a      	strb	r2, [r3, #16]
 800e858:	2200      	movs	r2, #0
 800e85a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	68da      	ldr	r2, [r3, #12]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	7a9b      	ldrb	r3, [r3, #10]
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <tcp_output_segment+0x158>
 800e86c:	2318      	movs	r3, #24
 800e86e:	e000      	b.n	800e872 <tcp_output_segment+0x15a>
 800e870:	2314      	movs	r3, #20
 800e872:	4413      	add	r3, r2
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	429a      	cmp	r2, r3
 800e878:	d006      	beq.n	800e888 <tcp_output_segment+0x170>
 800e87a:	4b10      	ldr	r3, [pc, #64]	@ (800e8bc <tcp_output_segment+0x1a4>)
 800e87c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e880:	4914      	ldr	r1, [pc, #80]	@ (800e8d4 <tcp_output_segment+0x1bc>)
 800e882:	4810      	ldr	r0, [pc, #64]	@ (800e8c4 <tcp_output_segment+0x1ac>)
 800e884:	f003 fc96 	bl	80121b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6858      	ldr	r0, [r3, #4]
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	1d1c      	adds	r4, r3, #4
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	7add      	ldrb	r5, [r3, #11]
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	7a9b      	ldrb	r3, [r3, #10]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	9202      	str	r2, [sp, #8]
 800e89e:	2206      	movs	r2, #6
 800e8a0:	9201      	str	r2, [sp, #4]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	f002 fa64 	bl	8010d74 <ip4_output_if>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e8b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3720      	adds	r7, #32
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e8bc:	080147d0 	.word	0x080147d0
 800e8c0:	08014d94 	.word	0x08014d94
 800e8c4:	08014824 	.word	0x08014824
 800e8c8:	08014db4 	.word	0x08014db4
 800e8cc:	08014dd4 	.word	0x08014dd4
 800e8d0:	2000ef2c 	.word	0x2000ef2c
 800e8d4:	08014df8 	.word	0x08014df8

0800e8d8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e8d8:	b5b0      	push	{r4, r5, r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <tcp_rexmit_rto_prepare+0x1c>
 800e8e6:	4b31      	ldr	r3, [pc, #196]	@ (800e9ac <tcp_rexmit_rto_prepare+0xd4>)
 800e8e8:	f240 6263 	movw	r2, #1635	@ 0x663
 800e8ec:	4930      	ldr	r1, [pc, #192]	@ (800e9b0 <tcp_rexmit_rto_prepare+0xd8>)
 800e8ee:	4831      	ldr	r0, [pc, #196]	@ (800e9b4 <tcp_rexmit_rto_prepare+0xdc>)
 800e8f0:	f003 fc60 	bl	80121b4 <iprintf>

  if (pcb->unacked == NULL) {
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d102      	bne.n	800e902 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e8fc:	f06f 0305 	mvn.w	r3, #5
 800e900:	e050      	b.n	800e9a4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e906:	60fb      	str	r3, [r7, #12]
 800e908:	e00b      	b.n	800e922 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f7ff fee4 	bl	800e6d8 <tcp_output_segment_busy>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e916:	f06f 0305 	mvn.w	r3, #5
 800e91a:	e043      	b.n	800e9a4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	60fb      	str	r3, [r7, #12]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d1ef      	bne.n	800e90a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7ff fed4 	bl	800e6d8 <tcp_output_segment_busy>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e936:	f06f 0305 	mvn.w	r3, #5
 800e93a:	e033      	b.n	800e9a4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	8b5b      	ldrh	r3, [r3, #26]
 800e956:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	4618      	mov	r0, r3
 800e968:	f7f9 fc9f 	bl	80082aa <lwip_htonl>
 800e96c:	4604      	mov	r4, r0
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	891b      	ldrh	r3, [r3, #8]
 800e972:	461d      	mov	r5, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	899b      	ldrh	r3, [r3, #12]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7f9 fc7f 	bl	8008280 <lwip_htons>
 800e982:	4603      	mov	r3, r0
 800e984:	b2db      	uxtb	r3, r3
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <tcp_rexmit_rto_prepare+0xba>
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <tcp_rexmit_rto_prepare+0xbc>
 800e992:	2300      	movs	r3, #0
 800e994:	442b      	add	r3, r5
 800e996:	18e2      	adds	r2, r4, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800e9ac:	080147d0 	.word	0x080147d0
 800e9b0:	08014e0c 	.word	0x08014e0c
 800e9b4:	08014824 	.word	0x08014824

0800e9b8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d106      	bne.n	800e9d4 <tcp_rexmit_rto_commit+0x1c>
 800e9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9fc <tcp_rexmit_rto_commit+0x44>)
 800e9c8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e9cc:	490c      	ldr	r1, [pc, #48]	@ (800ea00 <tcp_rexmit_rto_commit+0x48>)
 800e9ce:	480d      	ldr	r0, [pc, #52]	@ (800ea04 <tcp_rexmit_rto_commit+0x4c>)
 800e9d0:	f003 fbf0 	bl	80121b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e9da:	2bff      	cmp	r3, #255	@ 0xff
 800e9dc:	d007      	beq.n	800e9ee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff fc7e 	bl	800e2f0 <tcp_output>
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	080147d0 	.word	0x080147d0
 800ea00:	08014e30 	.word	0x08014e30
 800ea04:	08014824 	.word	0x08014824

0800ea08 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <tcp_rexmit_rto+0x1c>
 800ea16:	4b0a      	ldr	r3, [pc, #40]	@ (800ea40 <tcp_rexmit_rto+0x38>)
 800ea18:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ea1c:	4909      	ldr	r1, [pc, #36]	@ (800ea44 <tcp_rexmit_rto+0x3c>)
 800ea1e:	480a      	ldr	r0, [pc, #40]	@ (800ea48 <tcp_rexmit_rto+0x40>)
 800ea20:	f003 fbc8 	bl	80121b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ff57 	bl	800e8d8 <tcp_rexmit_rto_prepare>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d102      	bne.n	800ea36 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ffc1 	bl	800e9b8 <tcp_rexmit_rto_commit>
  }
}
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	080147d0 	.word	0x080147d0
 800ea44:	08014e54 	.word	0x08014e54
 800ea48:	08014824 	.word	0x08014824

0800ea4c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ea4c:	b590      	push	{r4, r7, lr}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <tcp_rexmit+0x1c>
 800ea5a:	4b2f      	ldr	r3, [pc, #188]	@ (800eb18 <tcp_rexmit+0xcc>)
 800ea5c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ea60:	492e      	ldr	r1, [pc, #184]	@ (800eb1c <tcp_rexmit+0xd0>)
 800ea62:	482f      	ldr	r0, [pc, #188]	@ (800eb20 <tcp_rexmit+0xd4>)
 800ea64:	f003 fba6 	bl	80121b4 <iprintf>

  if (pcb->unacked == NULL) {
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d102      	bne.n	800ea76 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ea70:	f06f 0305 	mvn.w	r3, #5
 800ea74:	e04c      	b.n	800eb10 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea7a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ea7c:	68b8      	ldr	r0, [r7, #8]
 800ea7e:	f7ff fe2b 	bl	800e6d8 <tcp_output_segment_busy>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ea88:	f06f 0305 	mvn.w	r3, #5
 800ea8c:	e040      	b.n	800eb10 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	336c      	adds	r3, #108	@ 0x6c
 800ea9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ea9c:	e002      	b.n	800eaa4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d011      	beq.n	800ead0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f9 fbf8 	bl	80082aa <lwip_htonl>
 800eaba:	4604      	mov	r4, r0
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f9 fbf1 	bl	80082aa <lwip_htonl>
 800eac8:	4603      	mov	r3, r0
 800eaca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dbe6      	blt.n	800ea9e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d103      	bne.n	800eaee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eaf4:	2bff      	cmp	r3, #255	@ 0xff
 800eaf6:	d007      	beq.n	800eb08 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eafe:	3301      	adds	r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3714      	adds	r7, #20
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd90      	pop	{r4, r7, pc}
 800eb18:	080147d0 	.word	0x080147d0
 800eb1c:	08014e70 	.word	0x08014e70
 800eb20:	08014824 	.word	0x08014824

0800eb24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <tcp_rexmit_fast+0x1c>
 800eb32:	4b2a      	ldr	r3, [pc, #168]	@ (800ebdc <tcp_rexmit_fast+0xb8>)
 800eb34:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800eb38:	4929      	ldr	r1, [pc, #164]	@ (800ebe0 <tcp_rexmit_fast+0xbc>)
 800eb3a:	482a      	ldr	r0, [pc, #168]	@ (800ebe4 <tcp_rexmit_fast+0xc0>)
 800eb3c:	f003 fb3a 	bl	80121b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d045      	beq.n	800ebd4 <tcp_rexmit_fast+0xb0>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	8b5b      	ldrh	r3, [r3, #26]
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d13f      	bne.n	800ebd4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff79 	bl	800ea4c <tcp_rexmit>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d139      	bne.n	800ebd4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	bf28      	it	cs
 800eb70:	4613      	movcs	r3, r2
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	da00      	bge.n	800eb7a <tcp_rexmit_fast+0x56>
 800eb78:	3301      	adds	r3, #1
 800eb7a:	105b      	asrs	r3, r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d206      	bcs.n	800eba4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ebae:	4619      	mov	r1, r3
 800ebb0:	0049      	lsls	r1, r1, #1
 800ebb2:	440b      	add	r3, r1
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	4413      	add	r3, r2
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	8b5b      	ldrh	r3, [r3, #26]
 800ebc4:	f043 0304 	orr.w	r3, r3, #4
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	080147d0 	.word	0x080147d0
 800ebe0:	08014e88 	.word	0x08014e88
 800ebe4:	08014824 	.word	0x08014824

0800ebe8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	607b      	str	r3, [r7, #4]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	817b      	strh	r3, [r7, #10]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ebfa:	897a      	ldrh	r2, [r7, #10]
 800ebfc:	893b      	ldrh	r3, [r7, #8]
 800ebfe:	4413      	add	r3, r2
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	3314      	adds	r3, #20
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	2022      	movs	r0, #34	@ 0x22
 800ec0e:	f7fa fc0f 	bl	8009430 <pbuf_alloc>
 800ec12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d04d      	beq.n	800ecb6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ec1a:	897b      	ldrh	r3, [r7, #10]
 800ec1c:	3313      	adds	r3, #19
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	8952      	ldrh	r2, [r2, #10]
 800ec22:	4293      	cmp	r3, r2
 800ec24:	db06      	blt.n	800ec34 <tcp_output_alloc_header_common+0x4c>
 800ec26:	4b26      	ldr	r3, [pc, #152]	@ (800ecc0 <tcp_output_alloc_header_common+0xd8>)
 800ec28:	f240 7223 	movw	r2, #1827	@ 0x723
 800ec2c:	4925      	ldr	r1, [pc, #148]	@ (800ecc4 <tcp_output_alloc_header_common+0xdc>)
 800ec2e:	4826      	ldr	r0, [pc, #152]	@ (800ecc8 <tcp_output_alloc_header_common+0xe0>)
 800ec30:	f003 fac0 	bl	80121b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ec3a:	8c3b      	ldrh	r3, [r7, #32]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f9 fb1f 	bl	8008280 <lwip_htons>
 800ec42:	4603      	mov	r3, r0
 800ec44:	461a      	mov	r2, r3
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ec4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f9 fb17 	bl	8008280 <lwip_htons>
 800ec52:	4603      	mov	r3, r0
 800ec54:	461a      	mov	r2, r3
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f7f9 fb22 	bl	80082aa <lwip_htonl>
 800ec66:	4602      	mov	r2, r0
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ec6c:	897b      	ldrh	r3, [r7, #10]
 800ec6e:	089b      	lsrs	r3, r3, #2
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3305      	adds	r3, #5
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	031b      	lsls	r3, r3, #12
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4313      	orrs	r3, r2
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7f9 fafb 	bl	8008280 <lwip_htons>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ec92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f9 faf3 	bl	8008280 <lwip_htons>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2200      	movs	r2, #0
 800eca6:	741a      	strb	r2, [r3, #16]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	749a      	strb	r2, [r3, #18]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ecb6:	697b      	ldr	r3, [r7, #20]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	080147d0 	.word	0x080147d0
 800ecc4:	08014ea8 	.word	0x08014ea8
 800ecc8:	08014824 	.word	0x08014824

0800eccc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800eccc:	b5b0      	push	{r4, r5, r7, lr}
 800ecce:	b08a      	sub	sp, #40	@ 0x28
 800ecd0:	af04      	add	r7, sp, #16
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	607b      	str	r3, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	817b      	strh	r3, [r7, #10]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <tcp_output_alloc_header+0x26>
 800ece4:	4b15      	ldr	r3, [pc, #84]	@ (800ed3c <tcp_output_alloc_header+0x70>)
 800ece6:	f240 7242 	movw	r2, #1858	@ 0x742
 800ecea:	4915      	ldr	r1, [pc, #84]	@ (800ed40 <tcp_output_alloc_header+0x74>)
 800ecec:	4815      	ldr	r0, [pc, #84]	@ (800ed44 <tcp_output_alloc_header+0x78>)
 800ecee:	f003 fa61 	bl	80121b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	8adb      	ldrh	r3, [r3, #22]
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	8b12      	ldrh	r2, [r2, #24]
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ed02:	893d      	ldrh	r5, [r7, #8]
 800ed04:	897c      	ldrh	r4, [r7, #10]
 800ed06:	9103      	str	r1, [sp, #12]
 800ed08:	2110      	movs	r1, #16
 800ed0a:	9102      	str	r1, [sp, #8]
 800ed0c:	9201      	str	r2, [sp, #4]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	462a      	mov	r2, r5
 800ed14:	4621      	mov	r1, r4
 800ed16:	f7ff ff67 	bl	800ebe8 <tcp_output_alloc_header_common>
 800ed1a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d006      	beq.n	800ed30 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ed2a:	441a      	add	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ed30:	697b      	ldr	r3, [r7, #20]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bdb0      	pop	{r4, r5, r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	080147d0 	.word	0x080147d0
 800ed40:	08014ed8 	.word	0x08014ed8
 800ed44:	08014824 	.word	0x08014824

0800ed48 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	4611      	mov	r1, r2
 800ed54:	461a      	mov	r2, r3
 800ed56:	460b      	mov	r3, r1
 800ed58:	71fb      	strb	r3, [r7, #7]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <tcp_output_fill_options+0x2e>
 800ed68:	4b12      	ldr	r3, [pc, #72]	@ (800edb4 <tcp_output_fill_options+0x6c>)
 800ed6a:	f240 7256 	movw	r2, #1878	@ 0x756
 800ed6e:	4912      	ldr	r1, [pc, #72]	@ (800edb8 <tcp_output_fill_options+0x70>)
 800ed70:	4812      	ldr	r0, [pc, #72]	@ (800edbc <tcp_output_fill_options+0x74>)
 800ed72:	f003 fa1f 	bl	80121b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	3314      	adds	r3, #20
 800ed80:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ed82:	8bfb      	ldrh	r3, [r7, #30]
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	461a      	mov	r2, r3
 800ed88:	79fb      	ldrb	r3, [r7, #7]
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	4413      	add	r3, r2
 800ed92:	3314      	adds	r3, #20
 800ed94:	69ba      	ldr	r2, [r7, #24]
 800ed96:	4413      	add	r3, r2
 800ed98:	697a      	ldr	r2, [r7, #20]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d006      	beq.n	800edac <tcp_output_fill_options+0x64>
 800ed9e:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <tcp_output_fill_options+0x6c>)
 800eda0:	f240 7275 	movw	r2, #1909	@ 0x775
 800eda4:	4906      	ldr	r1, [pc, #24]	@ (800edc0 <tcp_output_fill_options+0x78>)
 800eda6:	4805      	ldr	r0, [pc, #20]	@ (800edbc <tcp_output_fill_options+0x74>)
 800eda8:	f003 fa04 	bl	80121b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800edac:	bf00      	nop
 800edae:	3720      	adds	r7, #32
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	080147d0 	.word	0x080147d0
 800edb8:	08014f00 	.word	0x08014f00
 800edbc:	08014824 	.word	0x08014824
 800edc0:	08014df8 	.word	0x08014df8

0800edc4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b08a      	sub	sp, #40	@ 0x28
 800edc8:	af04      	add	r7, sp, #16
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d106      	bne.n	800ede6 <tcp_output_control_segment+0x22>
 800edd8:	4b1c      	ldr	r3, [pc, #112]	@ (800ee4c <tcp_output_control_segment+0x88>)
 800edda:	f240 7287 	movw	r2, #1927	@ 0x787
 800edde:	491c      	ldr	r1, [pc, #112]	@ (800ee50 <tcp_output_control_segment+0x8c>)
 800ede0:	481c      	ldr	r0, [pc, #112]	@ (800ee54 <tcp_output_control_segment+0x90>)
 800ede2:	f003 f9e7 	bl	80121b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	6879      	ldr	r1, [r7, #4]
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	f7fe ff42 	bl	800dc74 <tcp_route>
 800edf0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d102      	bne.n	800edfe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800edf8:	23fc      	movs	r3, #252	@ 0xfc
 800edfa:	75fb      	strb	r3, [r7, #23]
 800edfc:	e01c      	b.n	800ee38 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d006      	beq.n	800ee12 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	7adb      	ldrb	r3, [r3, #11]
 800ee08:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	7a9b      	ldrb	r3, [r3, #10]
 800ee0e:	757b      	strb	r3, [r7, #21]
 800ee10:	e003      	b.n	800ee1a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ee12:	23ff      	movs	r3, #255	@ 0xff
 800ee14:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ee1a:	7dba      	ldrb	r2, [r7, #22]
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	9302      	str	r3, [sp, #8]
 800ee20:	2306      	movs	r3, #6
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	7d7b      	ldrb	r3, [r7, #21]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	6879      	ldr	r1, [r7, #4]
 800ee2e:	68b8      	ldr	r0, [r7, #8]
 800ee30:	f001 ffa0 	bl	8010d74 <ip4_output_if>
 800ee34:	4603      	mov	r3, r0
 800ee36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ee38:	68b8      	ldr	r0, [r7, #8]
 800ee3a:	f7fa fddd 	bl	80099f8 <pbuf_free>
  return err;
 800ee3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	080147d0 	.word	0x080147d0
 800ee50:	08014f28 	.word	0x08014f28
 800ee54:	08014824 	.word	0x08014824

0800ee58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ee58:	b590      	push	{r4, r7, lr}
 800ee5a:	b08b      	sub	sp, #44	@ 0x2c
 800ee5c:	af04      	add	r7, sp, #16
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d106      	bne.n	800ee7a <tcp_rst+0x22>
 800ee6c:	4b1f      	ldr	r3, [pc, #124]	@ (800eeec <tcp_rst+0x94>)
 800ee6e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ee72:	491f      	ldr	r1, [pc, #124]	@ (800eef0 <tcp_rst+0x98>)
 800ee74:	481f      	ldr	r0, [pc, #124]	@ (800eef4 <tcp_rst+0x9c>)
 800ee76:	f003 f99d 	bl	80121b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ee7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <tcp_rst+0x36>
 800ee80:	4b1a      	ldr	r3, [pc, #104]	@ (800eeec <tcp_rst+0x94>)
 800ee82:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ee86:	491c      	ldr	r1, [pc, #112]	@ (800eef8 <tcp_rst+0xa0>)
 800ee88:	481a      	ldr	r0, [pc, #104]	@ (800eef4 <tcp_rst+0x9c>)
 800ee8a:	f003 f993 	bl	80121b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ee8e:	2300      	movs	r3, #0
 800ee90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ee92:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ee96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
 800ee9a:	b29c      	uxth	r4, r3
 800ee9c:	68b8      	ldr	r0, [r7, #8]
 800ee9e:	f7f9 fa04 	bl	80082aa <lwip_htonl>
 800eea2:	4602      	mov	r2, r0
 800eea4:	8abb      	ldrh	r3, [r7, #20]
 800eea6:	9303      	str	r3, [sp, #12]
 800eea8:	2314      	movs	r3, #20
 800eeaa:	9302      	str	r3, [sp, #8]
 800eeac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800eeae:	9301      	str	r3, [sp, #4]
 800eeb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4621      	mov	r1, r4
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff fe94 	bl	800ebe8 <tcp_output_alloc_header_common>
 800eec0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00c      	beq.n	800eee2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
 800eeca:	2200      	movs	r2, #0
 800eecc:	6939      	ldr	r1, [r7, #16]
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f7ff ff3a 	bl	800ed48 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	6939      	ldr	r1, [r7, #16]
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f7ff ff72 	bl	800edc4 <tcp_output_control_segment>
 800eee0:	e000      	b.n	800eee4 <tcp_rst+0x8c>
    return;
 800eee2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eee4:	371c      	adds	r7, #28
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd90      	pop	{r4, r7, pc}
 800eeea:	bf00      	nop
 800eeec:	080147d0 	.word	0x080147d0
 800eef0:	08014f54 	.word	0x08014f54
 800eef4:	08014824 	.word	0x08014824
 800eef8:	08014f70 	.word	0x08014f70

0800eefc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800eefc:	b590      	push	{r4, r7, lr}
 800eefe:	b087      	sub	sp, #28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <tcp_send_empty_ack+0x24>
 800ef12:	4b28      	ldr	r3, [pc, #160]	@ (800efb4 <tcp_send_empty_ack+0xb8>)
 800ef14:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ef18:	4927      	ldr	r1, [pc, #156]	@ (800efb8 <tcp_send_empty_ack+0xbc>)
 800ef1a:	4828      	ldr	r0, [pc, #160]	@ (800efbc <tcp_send_empty_ack+0xc0>)
 800ef1c:	f003 f94a 	bl	80121b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	f003 0304 	and.w	r3, r3, #4
 800ef2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ef2c:	7d7b      	ldrb	r3, [r7, #21]
 800ef2e:	b29c      	uxth	r4, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f9 f9b8 	bl	80082aa <lwip_htonl>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	4621      	mov	r1, r4
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f7ff fec3 	bl	800eccc <tcp_output_alloc_header>
 800ef46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d109      	bne.n	800ef62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8b5b      	ldrh	r3, [r3, #26]
 800ef52:	f043 0303 	orr.w	r3, r3, #3
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ef5c:	f06f 0301 	mvn.w	r3, #1
 800ef60:	e023      	b.n	800efaa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ef62:	7dbb      	ldrb	r3, [r7, #22]
 800ef64:	7dfa      	ldrb	r2, [r7, #23]
 800ef66:	6939      	ldr	r1, [r7, #16]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff feed 	bl	800ed48 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	3304      	adds	r3, #4
 800ef74:	6939      	ldr	r1, [r7, #16]
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff ff24 	bl	800edc4 <tcp_output_control_segment>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ef80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d007      	beq.n	800ef98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8b5b      	ldrh	r3, [r3, #26]
 800ef8c:	f043 0303 	orr.w	r3, r3, #3
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	835a      	strh	r2, [r3, #26]
 800ef96:	e006      	b.n	800efa6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	8b5b      	ldrh	r3, [r3, #26]
 800ef9c:	f023 0303 	bic.w	r3, r3, #3
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800efa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	371c      	adds	r7, #28
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd90      	pop	{r4, r7, pc}
 800efb2:	bf00      	nop
 800efb4:	080147d0 	.word	0x080147d0
 800efb8:	08014f8c 	.word	0x08014f8c
 800efbc:	08014824 	.word	0x08014824

0800efc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800efc0:	b590      	push	{r4, r7, lr}
 800efc2:	b087      	sub	sp, #28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800efc8:	2300      	movs	r3, #0
 800efca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <tcp_keepalive+0x20>
 800efd2:	4b18      	ldr	r3, [pc, #96]	@ (800f034 <tcp_keepalive+0x74>)
 800efd4:	f640 0224 	movw	r2, #2084	@ 0x824
 800efd8:	4917      	ldr	r1, [pc, #92]	@ (800f038 <tcp_keepalive+0x78>)
 800efda:	4818      	ldr	r0, [pc, #96]	@ (800f03c <tcp_keepalive+0x7c>)
 800efdc:	f003 f8ea 	bl	80121b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800efe0:	7dfb      	ldrb	r3, [r7, #23]
 800efe2:	b29c      	uxth	r4, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efe8:	3b01      	subs	r3, #1
 800efea:	4618      	mov	r0, r3
 800efec:	f7f9 f95d 	bl	80082aa <lwip_htonl>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2200      	movs	r2, #0
 800eff4:	4621      	mov	r1, r4
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff fe68 	bl	800eccc <tcp_output_alloc_header>
 800effc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d102      	bne.n	800f00a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	e010      	b.n	800f02c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	2200      	movs	r2, #0
 800f00e:	6939      	ldr	r1, [r7, #16]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff fe99 	bl	800ed48 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	3304      	adds	r3, #4
 800f01c:	6939      	ldr	r1, [r7, #16]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7ff fed0 	bl	800edc4 <tcp_output_control_segment>
 800f024:	4603      	mov	r3, r0
 800f026:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	371c      	adds	r7, #28
 800f030:	46bd      	mov	sp, r7
 800f032:	bd90      	pop	{r4, r7, pc}
 800f034:	080147d0 	.word	0x080147d0
 800f038:	08014fac 	.word	0x08014fac
 800f03c:	08014824 	.word	0x08014824

0800f040 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f040:	b590      	push	{r4, r7, lr}
 800f042:	b08b      	sub	sp, #44	@ 0x2c
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d106      	bne.n	800f062 <tcp_zero_window_probe+0x22>
 800f054:	4b4c      	ldr	r3, [pc, #304]	@ (800f188 <tcp_zero_window_probe+0x148>)
 800f056:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f05a:	494c      	ldr	r1, [pc, #304]	@ (800f18c <tcp_zero_window_probe+0x14c>)
 800f05c:	484c      	ldr	r0, [pc, #304]	@ (800f190 <tcp_zero_window_probe+0x150>)
 800f05e:	f003 f8a9 	bl	80121b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f066:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f068:	6a3b      	ldr	r3, [r7, #32]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f06e:	2300      	movs	r3, #0
 800f070:	e086      	b.n	800f180 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f078:	2bff      	cmp	r3, #255	@ 0xff
 800f07a:	d007      	beq.n	800f08c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f082:	3301      	adds	r3, #1
 800f084:	b2da      	uxtb	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f08c:	6a3b      	ldr	r3, [r7, #32]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	899b      	ldrh	r3, [r3, #12]
 800f092:	b29b      	uxth	r3, r3
 800f094:	4618      	mov	r0, r3
 800f096:	f7f9 f8f3 	bl	8008280 <lwip_htons>
 800f09a:	4603      	mov	r3, r0
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d005      	beq.n	800f0b2 <tcp_zero_window_probe+0x72>
 800f0a6:	6a3b      	ldr	r3, [r7, #32]
 800f0a8:	891b      	ldrh	r3, [r3, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d101      	bne.n	800f0b2 <tcp_zero_window_probe+0x72>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <tcp_zero_window_probe+0x74>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f0b6:	7ffb      	ldrb	r3, [r7, #31]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf0c      	ite	eq
 800f0bc:	2301      	moveq	r3, #1
 800f0be:	2300      	movne	r3, #0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0c8:	b299      	uxth	r1, r3
 800f0ca:	6a3b      	ldr	r3, [r7, #32]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	8bba      	ldrh	r2, [r7, #28]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff fdfa 	bl	800eccc <tcp_output_alloc_header>
 800f0d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e4:	e04c      	b.n	800f180 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f0ec:	7ffb      	ldrb	r3, [r7, #31]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d011      	beq.n	800f116 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	899b      	ldrh	r3, [r3, #12]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	b21b      	sxth	r3, r3
 800f0fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f0fe:	b21c      	sxth	r4, r3
 800f100:	2011      	movs	r0, #17
 800f102:	f7f9 f8bd 	bl	8008280 <lwip_htons>
 800f106:	4603      	mov	r3, r0
 800f108:	b21b      	sxth	r3, r3
 800f10a:	4323      	orrs	r3, r4
 800f10c:	b21b      	sxth	r3, r3
 800f10e:	b29a      	uxth	r2, r3
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	819a      	strh	r2, [r3, #12]
 800f114:	e010      	b.n	800f138 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	3314      	adds	r3, #20
 800f11c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f11e:	6a3b      	ldr	r3, [r7, #32]
 800f120:	6858      	ldr	r0, [r3, #4]
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	891a      	ldrh	r2, [r3, #8]
 800f128:	6a3b      	ldr	r3, [r7, #32]
 800f12a:	891b      	ldrh	r3, [r3, #8]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2201      	movs	r2, #1
 800f132:	6939      	ldr	r1, [r7, #16]
 800f134:	f7fa fe56 	bl	8009de4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f138:	6a3b      	ldr	r3, [r7, #32]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f9 f8b3 	bl	80082aa <lwip_htonl>
 800f144:	4603      	mov	r3, r0
 800f146:	3301      	adds	r3, #1
 800f148:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	da02      	bge.n	800f15c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f15c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f160:	2200      	movs	r2, #0
 800f162:	69b9      	ldr	r1, [r7, #24]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7ff fdef 	bl	800ed48 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	69b9      	ldr	r1, [r7, #24]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff fe26 	bl	800edc4 <tcp_output_control_segment>
 800f178:	4603      	mov	r3, r0
 800f17a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f17c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f180:	4618      	mov	r0, r3
 800f182:	372c      	adds	r7, #44	@ 0x2c
 800f184:	46bd      	mov	sp, r7
 800f186:	bd90      	pop	{r4, r7, pc}
 800f188:	080147d0 	.word	0x080147d0
 800f18c:	08014fc8 	.word	0x08014fc8
 800f190:	08014824 	.word	0x08014824

0800f194 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f19c:	f7fa ff10 	bl	8009fc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f1cc <tcpip_tcp_timer+0x38>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d103      	bne.n	800f1b0 <tcpip_tcp_timer+0x1c>
 800f1a8:	4b09      	ldr	r3, [pc, #36]	@ (800f1d0 <tcpip_tcp_timer+0x3c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d005      	beq.n	800f1bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	4908      	ldr	r1, [pc, #32]	@ (800f1d4 <tcpip_tcp_timer+0x40>)
 800f1b4:	20fa      	movs	r0, #250	@ 0xfa
 800f1b6:	f000 f8f3 	bl	800f3a0 <sys_timeout>
 800f1ba:	e003      	b.n	800f1c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f1bc:	4b06      	ldr	r3, [pc, #24]	@ (800f1d8 <tcpip_tcp_timer+0x44>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	601a      	str	r2, [r3, #0]
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	2000ef38 	.word	0x2000ef38
 800f1d0:	2000ef3c 	.word	0x2000ef3c
 800f1d4:	0800f195 	.word	0x0800f195
 800f1d8:	2000ef84 	.word	0x2000ef84

0800f1dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f20c <tcp_timer_needed+0x30>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10f      	bne.n	800f208 <tcp_timer_needed+0x2c>
 800f1e8:	4b09      	ldr	r3, [pc, #36]	@ (800f210 <tcp_timer_needed+0x34>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d103      	bne.n	800f1f8 <tcp_timer_needed+0x1c>
 800f1f0:	4b08      	ldr	r3, [pc, #32]	@ (800f214 <tcp_timer_needed+0x38>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d007      	beq.n	800f208 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f1f8:	4b04      	ldr	r3, [pc, #16]	@ (800f20c <tcp_timer_needed+0x30>)
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f1fe:	2200      	movs	r2, #0
 800f200:	4905      	ldr	r1, [pc, #20]	@ (800f218 <tcp_timer_needed+0x3c>)
 800f202:	20fa      	movs	r0, #250	@ 0xfa
 800f204:	f000 f8cc 	bl	800f3a0 <sys_timeout>
  }
}
 800f208:	bf00      	nop
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	2000ef84 	.word	0x2000ef84
 800f210:	2000ef38 	.word	0x2000ef38
 800f214:	2000ef3c 	.word	0x2000ef3c
 800f218:	0800f195 	.word	0x0800f195

0800f21c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f228:	200a      	movs	r0, #10
 800f22a:	f7f9 fcef 	bl	8008c0c <memp_malloc>
 800f22e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d109      	bne.n	800f24a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d151      	bne.n	800f2e0 <sys_timeout_abs+0xc4>
 800f23c:	4b2a      	ldr	r3, [pc, #168]	@ (800f2e8 <sys_timeout_abs+0xcc>)
 800f23e:	22be      	movs	r2, #190	@ 0xbe
 800f240:	492a      	ldr	r1, [pc, #168]	@ (800f2ec <sys_timeout_abs+0xd0>)
 800f242:	482b      	ldr	r0, [pc, #172]	@ (800f2f0 <sys_timeout_abs+0xd4>)
 800f244:	f002 ffb6 	bl	80121b4 <iprintf>
    return;
 800f248:	e04a      	b.n	800f2e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2200      	movs	r2, #0
 800f24e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f262:	4b24      	ldr	r3, [pc, #144]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d103      	bne.n	800f272 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f26a:	4a22      	ldr	r2, [pc, #136]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	6013      	str	r3, [r2, #0]
    return;
 800f270:	e037      	b.n	800f2e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	4b1f      	ldr	r3, [pc, #124]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	0fdb      	lsrs	r3, r3, #31
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d007      	beq.n	800f29a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f28a:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f292:	4a18      	ldr	r2, [pc, #96]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	e023      	b.n	800f2e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f29a:	4b16      	ldr	r3, [pc, #88]	@ (800f2f4 <sys_timeout_abs+0xd8>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	e01a      	b.n	800f2d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <sys_timeout_abs+0xa6>
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	685a      	ldr	r2, [r3, #4]
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	0fdb      	lsrs	r3, r3, #31
 800f2b8:	f003 0301 	and.w	r3, r3, #1
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d007      	beq.n	800f2d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	601a      	str	r2, [r3, #0]
        break;
 800f2d0:	e007      	b.n	800f2e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	617b      	str	r3, [r7, #20]
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e1      	bne.n	800f2a2 <sys_timeout_abs+0x86>
 800f2de:	e000      	b.n	800f2e2 <sys_timeout_abs+0xc6>
    return;
 800f2e0:	bf00      	nop
      }
    }
  }
}
 800f2e2:	3718      	adds	r7, #24
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	08014fec 	.word	0x08014fec
 800f2ec:	08015020 	.word	0x08015020
 800f2f0:	08015060 	.word	0x08015060
 800f2f4:	2000ef7c 	.word	0x2000ef7c

0800f2f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b086      	sub	sp, #24
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	4798      	blx	r3

  now = sys_now();
 800f30a:	f7f4 fdd1 	bl	8003eb0 <sys_now>
 800f30e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	4b0f      	ldr	r3, [pc, #60]	@ (800f354 <lwip_cyclic_timer+0x5c>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4413      	add	r3, r2
 800f31a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	1ad3      	subs	r3, r2, r3
 800f322:	0fdb      	lsrs	r3, r3, #31
 800f324:	f003 0301 	and.w	r3, r3, #1
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d009      	beq.n	800f342 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	4413      	add	r3, r2
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	4907      	ldr	r1, [pc, #28]	@ (800f358 <lwip_cyclic_timer+0x60>)
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7ff ff6e 	bl	800f21c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f340:	e004      	b.n	800f34c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	4904      	ldr	r1, [pc, #16]	@ (800f358 <lwip_cyclic_timer+0x60>)
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff ff68 	bl	800f21c <sys_timeout_abs>
}
 800f34c:	bf00      	nop
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	2000ef80 	.word	0x2000ef80
 800f358:	0800f2f9 	.word	0x0800f2f9

0800f35c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f362:	2301      	movs	r3, #1
 800f364:	607b      	str	r3, [r7, #4]
 800f366:	e00e      	b.n	800f386 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f368:	4a0b      	ldr	r2, [pc, #44]	@ (800f398 <sys_timeouts_init+0x3c>)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	4a08      	ldr	r2, [pc, #32]	@ (800f398 <sys_timeouts_init+0x3c>)
 800f376:	4413      	add	r3, r2
 800f378:	461a      	mov	r2, r3
 800f37a:	4908      	ldr	r1, [pc, #32]	@ (800f39c <sys_timeouts_init+0x40>)
 800f37c:	f000 f810 	bl	800f3a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3301      	adds	r3, #1
 800f384:	607b      	str	r3, [r7, #4]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d9ed      	bls.n	800f368 <sys_timeouts_init+0xc>
  }
}
 800f38c:	bf00      	nop
 800f38e:	bf00      	nop
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	08015c54 	.word	0x08015c54
 800f39c:	0800f2f9 	.word	0x0800f2f9

0800f3a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3b2:	d306      	bcc.n	800f3c2 <sys_timeout+0x22>
 800f3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e0 <sys_timeout+0x40>)
 800f3b6:	f240 1229 	movw	r2, #297	@ 0x129
 800f3ba:	490a      	ldr	r1, [pc, #40]	@ (800f3e4 <sys_timeout+0x44>)
 800f3bc:	480a      	ldr	r0, [pc, #40]	@ (800f3e8 <sys_timeout+0x48>)
 800f3be:	f002 fef9 	bl	80121b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f3c2:	f7f4 fd75 	bl	8003eb0 <sys_now>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	6978      	ldr	r0, [r7, #20]
 800f3d4:	f7ff ff22 	bl	800f21c <sys_timeout_abs>
#endif
}
 800f3d8:	bf00      	nop
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	08014fec 	.word	0x08014fec
 800f3e4:	08015088 	.word	0x08015088
 800f3e8:	08015060 	.word	0x08015060

0800f3ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f3f2:	f7f4 fd5d 	bl	8003eb0 <sys_now>
 800f3f6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f3f8:	4b17      	ldr	r3, [pc, #92]	@ (800f458 <sys_check_timeouts+0x6c>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d022      	beq.n	800f44a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	0fdb      	lsrs	r3, r3, #31
 800f40e:	f003 0301 	and.w	r3, r3, #1
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b00      	cmp	r3, #0
 800f416:	d11a      	bne.n	800f44e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a0e      	ldr	r2, [pc, #56]	@ (800f458 <sys_check_timeouts+0x6c>)
 800f41e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	4a0a      	ldr	r2, [pc, #40]	@ (800f45c <sys_check_timeouts+0x70>)
 800f432:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f434:	68b9      	ldr	r1, [r7, #8]
 800f436:	200a      	movs	r0, #10
 800f438:	f7f9 fc3a 	bl	8008cb0 <memp_free>
    if (handler != NULL) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d0da      	beq.n	800f3f8 <sys_check_timeouts+0xc>
      handler(arg);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6838      	ldr	r0, [r7, #0]
 800f446:	4798      	blx	r3
  do {
 800f448:	e7d6      	b.n	800f3f8 <sys_check_timeouts+0xc>
      return;
 800f44a:	bf00      	nop
 800f44c:	e000      	b.n	800f450 <sys_check_timeouts+0x64>
      return;
 800f44e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	2000ef7c 	.word	0x2000ef7c
 800f45c:	2000ef80 	.word	0x2000ef80

0800f460 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f466:	4b16      	ldr	r3, [pc, #88]	@ (800f4c0 <sys_timeouts_sleeptime+0x60>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f46e:	f04f 33ff 	mov.w	r3, #4294967295
 800f472:	e020      	b.n	800f4b6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f474:	f7f4 fd1c 	bl	8003eb0 <sys_now>
 800f478:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f47a:	4b11      	ldr	r3, [pc, #68]	@ (800f4c0 <sys_timeouts_sleeptime+0x60>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	685a      	ldr	r2, [r3, #4]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	0fdb      	lsrs	r3, r3, #31
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f490:	2300      	movs	r3, #0
 800f492:	e010      	b.n	800f4b6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f494:	4b0a      	ldr	r3, [pc, #40]	@ (800f4c0 <sys_timeouts_sleeptime+0x60>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	685a      	ldr	r2, [r3, #4]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da06      	bge.n	800f4b4 <sys_timeouts_sleeptime+0x54>
 800f4a6:	4b07      	ldr	r3, [pc, #28]	@ (800f4c4 <sys_timeouts_sleeptime+0x64>)
 800f4a8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f4ac:	4906      	ldr	r1, [pc, #24]	@ (800f4c8 <sys_timeouts_sleeptime+0x68>)
 800f4ae:	4807      	ldr	r0, [pc, #28]	@ (800f4cc <sys_timeouts_sleeptime+0x6c>)
 800f4b0:	f002 fe80 	bl	80121b4 <iprintf>
    return ret;
 800f4b4:	683b      	ldr	r3, [r7, #0]
  }
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000ef7c 	.word	0x2000ef7c
 800f4c4:	08014fec 	.word	0x08014fec
 800f4c8:	080150c0 	.word	0x080150c0
 800f4cc:	08015060 	.word	0x08015060

0800f4d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f4d4:	f002 fd6e 	bl	8011fb4 <rand>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	4b01      	ldr	r3, [pc, #4]	@ (800f4f0 <udp_init+0x20>)
 800f4ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f4ec:	bf00      	nop
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	20000018 	.word	0x20000018

0800f4f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	4613      	mov	r3, r2
 800f500:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d105      	bne.n	800f514 <udp_input_local_match+0x20>
 800f508:	4b27      	ldr	r3, [pc, #156]	@ (800f5a8 <udp_input_local_match+0xb4>)
 800f50a:	2287      	movs	r2, #135	@ 0x87
 800f50c:	4927      	ldr	r1, [pc, #156]	@ (800f5ac <udp_input_local_match+0xb8>)
 800f50e:	4828      	ldr	r0, [pc, #160]	@ (800f5b0 <udp_input_local_match+0xbc>)
 800f510:	f002 fe50 	bl	80121b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d105      	bne.n	800f526 <udp_input_local_match+0x32>
 800f51a:	4b23      	ldr	r3, [pc, #140]	@ (800f5a8 <udp_input_local_match+0xb4>)
 800f51c:	2288      	movs	r2, #136	@ 0x88
 800f51e:	4925      	ldr	r1, [pc, #148]	@ (800f5b4 <udp_input_local_match+0xc0>)
 800f520:	4823      	ldr	r0, [pc, #140]	@ (800f5b0 <udp_input_local_match+0xbc>)
 800f522:	f002 fe47 	bl	80121b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	7a1b      	ldrb	r3, [r3, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00b      	beq.n	800f546 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	7a1a      	ldrb	r2, [r3, #8]
 800f532:	4b21      	ldr	r3, [pc, #132]	@ (800f5b8 <udp_input_local_match+0xc4>)
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f53a:	3301      	adds	r3, #1
 800f53c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f53e:	429a      	cmp	r2, r3
 800f540:	d001      	beq.n	800f546 <udp_input_local_match+0x52>
    return 0;
 800f542:	2300      	movs	r3, #0
 800f544:	e02b      	b.n	800f59e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d018      	beq.n	800f57e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d013      	beq.n	800f57a <udp_input_local_match+0x86>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00f      	beq.n	800f57a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f55a:	4b17      	ldr	r3, [pc, #92]	@ (800f5b8 <udp_input_local_match+0xc4>)
 800f55c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d00a      	beq.n	800f57a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	4b13      	ldr	r3, [pc, #76]	@ (800f5b8 <udp_input_local_match+0xc4>)
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	405a      	eors	r2, r3
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	3308      	adds	r3, #8
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f576:	2b00      	cmp	r3, #0
 800f578:	d110      	bne.n	800f59c <udp_input_local_match+0xa8>
          return 1;
 800f57a:	2301      	movs	r3, #1
 800f57c:	e00f      	b.n	800f59e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d009      	beq.n	800f598 <udp_input_local_match+0xa4>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <udp_input_local_match+0xa4>
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	4b09      	ldr	r3, [pc, #36]	@ (800f5b8 <udp_input_local_match+0xc4>)
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	429a      	cmp	r2, r3
 800f596:	d101      	bne.n	800f59c <udp_input_local_match+0xa8>
        return 1;
 800f598:	2301      	movs	r3, #1
 800f59a:	e000      	b.n	800f59e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	080150d4 	.word	0x080150d4
 800f5ac:	08015104 	.word	0x08015104
 800f5b0:	08015128 	.word	0x08015128
 800f5b4:	08015150 	.word	0x08015150
 800f5b8:	20007bb0 	.word	0x20007bb0

0800f5bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f5bc:	b590      	push	{r4, r7, lr}
 800f5be:	b08d      	sub	sp, #52	@ 0x34
 800f5c0:	af02      	add	r7, sp, #8
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d105      	bne.n	800f5dc <udp_input+0x20>
 800f5d0:	4b7c      	ldr	r3, [pc, #496]	@ (800f7c4 <udp_input+0x208>)
 800f5d2:	22cf      	movs	r2, #207	@ 0xcf
 800f5d4:	497c      	ldr	r1, [pc, #496]	@ (800f7c8 <udp_input+0x20c>)
 800f5d6:	487d      	ldr	r0, [pc, #500]	@ (800f7cc <udp_input+0x210>)
 800f5d8:	f002 fdec 	bl	80121b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d105      	bne.n	800f5ee <udp_input+0x32>
 800f5e2:	4b78      	ldr	r3, [pc, #480]	@ (800f7c4 <udp_input+0x208>)
 800f5e4:	22d0      	movs	r2, #208	@ 0xd0
 800f5e6:	497a      	ldr	r1, [pc, #488]	@ (800f7d0 <udp_input+0x214>)
 800f5e8:	4878      	ldr	r0, [pc, #480]	@ (800f7cc <udp_input+0x210>)
 800f5ea:	f002 fde3 	bl	80121b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	895b      	ldrh	r3, [r3, #10]
 800f5f2:	2b07      	cmp	r3, #7
 800f5f4:	d803      	bhi.n	800f5fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7fa f9fe 	bl	80099f8 <pbuf_free>
    goto end;
 800f5fc:	e0de      	b.n	800f7bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f604:	4b73      	ldr	r3, [pc, #460]	@ (800f7d4 <udp_input+0x218>)
 800f606:	695b      	ldr	r3, [r3, #20]
 800f608:	4a72      	ldr	r2, [pc, #456]	@ (800f7d4 <udp_input+0x218>)
 800f60a:	6812      	ldr	r2, [r2, #0]
 800f60c:	4611      	mov	r1, r2
 800f60e:	4618      	mov	r0, r3
 800f610:	f001 fc88 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 800f614:	4603      	mov	r3, r0
 800f616:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	4618      	mov	r0, r3
 800f620:	f7f8 fe2e 	bl	8008280 <lwip_htons>
 800f624:	4603      	mov	r3, r0
 800f626:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	885b      	ldrh	r3, [r3, #2]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4618      	mov	r0, r3
 800f630:	f7f8 fe26 	bl	8008280 <lwip_htons>
 800f634:	4603      	mov	r3, r0
 800f636:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f63c:	2300      	movs	r3, #0
 800f63e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f640:	2300      	movs	r3, #0
 800f642:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f644:	4b64      	ldr	r3, [pc, #400]	@ (800f7d8 <udp_input+0x21c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	627b      	str	r3, [r7, #36]	@ 0x24
 800f64a:	e054      	b.n	800f6f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64e:	8a5b      	ldrh	r3, [r3, #18]
 800f650:	89fa      	ldrh	r2, [r7, #14]
 800f652:	429a      	cmp	r2, r3
 800f654:	d14a      	bne.n	800f6ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f656:	7cfb      	ldrb	r3, [r7, #19]
 800f658:	461a      	mov	r2, r3
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f65e:	f7ff ff49 	bl	800f4f4 <udp_input_local_match>
 800f662:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f664:	2b00      	cmp	r3, #0
 800f666:	d041      	beq.n	800f6ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66a:	7c1b      	ldrb	r3, [r3, #16]
 800f66c:	f003 0304 	and.w	r3, r3, #4
 800f670:	2b00      	cmp	r3, #0
 800f672:	d11d      	bne.n	800f6b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d102      	bne.n	800f680 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67c:	61fb      	str	r3, [r7, #28]
 800f67e:	e017      	b.n	800f6b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f680:	7cfb      	ldrb	r3, [r7, #19]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d014      	beq.n	800f6b0 <udp_input+0xf4>
 800f686:	4b53      	ldr	r3, [pc, #332]	@ (800f7d4 <udp_input+0x218>)
 800f688:	695b      	ldr	r3, [r3, #20]
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68e:	d10f      	bne.n	800f6b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	3304      	adds	r3, #4
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d008      	beq.n	800f6b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d101      	bne.n	800f6b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b2:	8a9b      	ldrh	r3, [r3, #20]
 800f6b4:	8a3a      	ldrh	r2, [r7, #16]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d118      	bne.n	800f6ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d005      	beq.n	800f6ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	4b43      	ldr	r3, [pc, #268]	@ (800f7d4 <udp_input+0x218>)
 800f6c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d10e      	bne.n	800f6ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d014      	beq.n	800f6fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d6:	68da      	ldr	r2, [r3, #12]
 800f6d8:	6a3b      	ldr	r3, [r7, #32]
 800f6da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f6dc:	4b3e      	ldr	r3, [pc, #248]	@ (800f7d8 <udp_input+0x21c>)
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f6e4:	4a3c      	ldr	r2, [pc, #240]	@ (800f7d8 <udp_input+0x21c>)
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f6ea:	e008      	b.n	800f6fe <udp_input+0x142>
      }
    }

    prev = pcb;
 800f6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1a7      	bne.n	800f64c <udp_input+0x90>
 800f6fc:	e000      	b.n	800f700 <udp_input+0x144>
        break;
 800f6fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <udp_input+0x15a>
    for_us = 1;
 800f710:	2301      	movs	r3, #1
 800f712:	76fb      	strb	r3, [r7, #27]
 800f714:	e00a      	b.n	800f72c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	3304      	adds	r3, #4
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d4 <udp_input+0x218>)
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	429a      	cmp	r2, r3
 800f722:	bf0c      	ite	eq
 800f724:	2301      	moveq	r3, #1
 800f726:	2300      	movne	r3, #0
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f72c:	7efb      	ldrb	r3, [r7, #27]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d041      	beq.n	800f7b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f732:	2108      	movs	r1, #8
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fa f8d9 	bl	80098ec <pbuf_remove_header>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f740:	4b20      	ldr	r3, [pc, #128]	@ (800f7c4 <udp_input+0x208>)
 800f742:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f746:	4925      	ldr	r1, [pc, #148]	@ (800f7dc <udp_input+0x220>)
 800f748:	4820      	ldr	r0, [pc, #128]	@ (800f7cc <udp_input+0x210>)
 800f74a:	f002 fd33 	bl	80121b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7fa f952 	bl	80099f8 <pbuf_free>
      goto end;
 800f754:	e032      	b.n	800f7bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d012      	beq.n	800f782 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00a      	beq.n	800f77a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f766:	699c      	ldr	r4, [r3, #24]
 800f768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76a:	69d8      	ldr	r0, [r3, #28]
 800f76c:	8a3b      	ldrh	r3, [r7, #16]
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	4b1b      	ldr	r3, [pc, #108]	@ (800f7e0 <udp_input+0x224>)
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f776:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f778:	e021      	b.n	800f7be <udp_input+0x202>
        pbuf_free(p);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f7fa f93c 	bl	80099f8 <pbuf_free>
        goto end;
 800f780:	e01c      	b.n	800f7bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f782:	7cfb      	ldrb	r3, [r7, #19]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d112      	bne.n	800f7ae <udp_input+0x1f2>
 800f788:	4b12      	ldr	r3, [pc, #72]	@ (800f7d4 <udp_input+0x218>)
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f790:	2be0      	cmp	r3, #224	@ 0xe0
 800f792:	d00c      	beq.n	800f7ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f794:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d4 <udp_input+0x218>)
 800f796:	899b      	ldrh	r3, [r3, #12]
 800f798:	3308      	adds	r3, #8
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fa f916 	bl	80099d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f7a6:	2103      	movs	r1, #3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f001 f89b 	bl	80108e4 <icmp_dest_unreach>
      pbuf_free(p);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7fa f922 	bl	80099f8 <pbuf_free>
  return;
 800f7b4:	e003      	b.n	800f7be <udp_input+0x202>
    pbuf_free(p);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7fa f91e 	bl	80099f8 <pbuf_free>
  return;
 800f7bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f7be:	372c      	adds	r7, #44	@ 0x2c
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd90      	pop	{r4, r7, pc}
 800f7c4:	080150d4 	.word	0x080150d4
 800f7c8:	08015178 	.word	0x08015178
 800f7cc:	08015128 	.word	0x08015128
 800f7d0:	08015190 	.word	0x08015190
 800f7d4:	20007bb0 	.word	0x20007bb0
 800f7d8:	2000ef88 	.word	0x2000ef88
 800f7dc:	080151ac 	.word	0x080151ac
 800f7e0:	20007bc0 	.word	0x20007bc0

0800f7e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d01e      	beq.n	800f832 <udp_netif_ip_addr_changed+0x4e>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01a      	beq.n	800f832 <udp_netif_ip_addr_changed+0x4e>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d017      	beq.n	800f832 <udp_netif_ip_addr_changed+0x4e>
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d013      	beq.n	800f832 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f80a:	4b0d      	ldr	r3, [pc, #52]	@ (800f840 <udp_netif_ip_addr_changed+0x5c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
 800f810:	e00c      	b.n	800f82c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d103      	bne.n	800f826 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	60fb      	str	r3, [r7, #12]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1ef      	bne.n	800f812 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f832:	bf00      	nop
 800f834:	3714      	adds	r7, #20
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	2000ef88 	.word	0x2000ef88

0800f844 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f84c:	4915      	ldr	r1, [pc, #84]	@ (800f8a4 <etharp_free_entry+0x60>)
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	4613      	mov	r3, r2
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	4413      	add	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	440b      	add	r3, r1
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d013      	beq.n	800f888 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f860:	4910      	ldr	r1, [pc, #64]	@ (800f8a4 <etharp_free_entry+0x60>)
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	4613      	mov	r3, r2
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	4413      	add	r3, r2
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	440b      	add	r3, r1
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4618      	mov	r0, r3
 800f872:	f7fa f8c1 	bl	80099f8 <pbuf_free>
    arp_table[i].q = NULL;
 800f876:	490b      	ldr	r1, [pc, #44]	@ (800f8a4 <etharp_free_entry+0x60>)
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	4613      	mov	r3, r2
 800f87c:	005b      	lsls	r3, r3, #1
 800f87e:	4413      	add	r3, r2
 800f880:	00db      	lsls	r3, r3, #3
 800f882:	440b      	add	r3, r1
 800f884:	2200      	movs	r2, #0
 800f886:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f888:	4906      	ldr	r1, [pc, #24]	@ (800f8a4 <etharp_free_entry+0x60>)
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	4613      	mov	r3, r2
 800f88e:	005b      	lsls	r3, r3, #1
 800f890:	4413      	add	r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	440b      	add	r3, r1
 800f896:	3314      	adds	r3, #20
 800f898:	2200      	movs	r2, #0
 800f89a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	2000ef8c 	.word	0x2000ef8c

0800f8a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	607b      	str	r3, [r7, #4]
 800f8b2:	e096      	b.n	800f9e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f8b4:	494f      	ldr	r1, [pc, #316]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	4413      	add	r3, r2
 800f8be:	00db      	lsls	r3, r3, #3
 800f8c0:	440b      	add	r3, r1
 800f8c2:	3314      	adds	r3, #20
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f8c8:	78fb      	ldrb	r3, [r7, #3]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 8086 	beq.w	800f9dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f8d0:	4948      	ldr	r1, [pc, #288]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	4413      	add	r3, r2
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	440b      	add	r3, r1
 800f8de:	3312      	adds	r3, #18
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	b298      	uxth	r0, r3
 800f8e6:	4943      	ldr	r1, [pc, #268]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	4413      	add	r3, r2
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	440b      	add	r3, r1
 800f8f4:	3312      	adds	r3, #18
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f8fa:	493e      	ldr	r1, [pc, #248]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	4413      	add	r3, r2
 800f904:	00db      	lsls	r3, r3, #3
 800f906:	440b      	add	r3, r1
 800f908:	3312      	adds	r3, #18
 800f90a:	881b      	ldrh	r3, [r3, #0]
 800f90c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f910:	d215      	bcs.n	800f93e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f912:	4938      	ldr	r1, [pc, #224]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	4613      	mov	r3, r2
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	440b      	add	r3, r1
 800f920:	3314      	adds	r3, #20
 800f922:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f924:	2b01      	cmp	r3, #1
 800f926:	d10e      	bne.n	800f946 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f928:	4932      	ldr	r1, [pc, #200]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	4613      	mov	r3, r2
 800f92e:	005b      	lsls	r3, r3, #1
 800f930:	4413      	add	r3, r2
 800f932:	00db      	lsls	r3, r3, #3
 800f934:	440b      	add	r3, r1
 800f936:	3312      	adds	r3, #18
 800f938:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f93a:	2b04      	cmp	r3, #4
 800f93c:	d903      	bls.n	800f946 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7ff ff80 	bl	800f844 <etharp_free_entry>
 800f944:	e04a      	b.n	800f9dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f946:	492b      	ldr	r1, [pc, #172]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	4613      	mov	r3, r2
 800f94c:	005b      	lsls	r3, r3, #1
 800f94e:	4413      	add	r3, r2
 800f950:	00db      	lsls	r3, r3, #3
 800f952:	440b      	add	r3, r1
 800f954:	3314      	adds	r3, #20
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d10a      	bne.n	800f972 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f95c:	4925      	ldr	r1, [pc, #148]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	4613      	mov	r3, r2
 800f962:	005b      	lsls	r3, r3, #1
 800f964:	4413      	add	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	440b      	add	r3, r1
 800f96a:	3314      	adds	r3, #20
 800f96c:	2204      	movs	r2, #4
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	e034      	b.n	800f9dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f972:	4920      	ldr	r1, [pc, #128]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	4613      	mov	r3, r2
 800f978:	005b      	lsls	r3, r3, #1
 800f97a:	4413      	add	r3, r2
 800f97c:	00db      	lsls	r3, r3, #3
 800f97e:	440b      	add	r3, r1
 800f980:	3314      	adds	r3, #20
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b04      	cmp	r3, #4
 800f986:	d10a      	bne.n	800f99e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f988:	491a      	ldr	r1, [pc, #104]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	4613      	mov	r3, r2
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	4413      	add	r3, r2
 800f992:	00db      	lsls	r3, r3, #3
 800f994:	440b      	add	r3, r1
 800f996:	3314      	adds	r3, #20
 800f998:	2202      	movs	r2, #2
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	e01e      	b.n	800f9dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f99e:	4915      	ldr	r1, [pc, #84]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	4413      	add	r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	440b      	add	r3, r1
 800f9ac:	3314      	adds	r3, #20
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d113      	bne.n	800f9dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f9b4:	490f      	ldr	r1, [pc, #60]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	4413      	add	r3, r2
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	440b      	add	r3, r1
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	4413      	add	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	4a08      	ldr	r2, [pc, #32]	@ (800f9f4 <etharp_tmr+0x14c>)
 800f9d2:	4413      	add	r3, r2
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f000 fe6e 	bl	80106b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	607b      	str	r3, [r7, #4]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b09      	cmp	r3, #9
 800f9e6:	f77f af65 	ble.w	800f8b4 <etharp_tmr+0xc>
      }
    }
  }
}
 800f9ea:	bf00      	nop
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	2000ef8c 	.word	0x2000ef8c

0800f9f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	@ 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	460b      	mov	r3, r1
 800fa02:	607a      	str	r2, [r7, #4]
 800fa04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fa06:	230a      	movs	r3, #10
 800fa08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fa0a:	230a      	movs	r3, #10
 800fa0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fa0e:	230a      	movs	r3, #10
 800fa10:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fa16:	230a      	movs	r3, #10
 800fa18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	83bb      	strh	r3, [r7, #28]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	837b      	strh	r3, [r7, #26]
 800fa22:	2300      	movs	r3, #0
 800fa24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa26:	2300      	movs	r3, #0
 800fa28:	843b      	strh	r3, [r7, #32]
 800fa2a:	e0ae      	b.n	800fb8a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fa2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa30:	49a6      	ldr	r1, [pc, #664]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fa32:	4613      	mov	r3, r2
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	4413      	add	r3, r2
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	440b      	add	r3, r1
 800fa3c:	3314      	adds	r3, #20
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fa42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fa46:	2b0a      	cmp	r3, #10
 800fa48:	d105      	bne.n	800fa56 <etharp_find_entry+0x5e>
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d102      	bne.n	800fa56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fa50:	8c3b      	ldrh	r3, [r7, #32]
 800fa52:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fa54:	e095      	b.n	800fb82 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f000 8092 	beq.w	800fb82 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d009      	beq.n	800fa78 <etharp_find_entry+0x80>
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d806      	bhi.n	800fa78 <etharp_find_entry+0x80>
 800fa6a:	4b99      	ldr	r3, [pc, #612]	@ (800fcd0 <etharp_find_entry+0x2d8>)
 800fa6c:	f240 1223 	movw	r2, #291	@ 0x123
 800fa70:	4998      	ldr	r1, [pc, #608]	@ (800fcd4 <etharp_find_entry+0x2dc>)
 800fa72:	4899      	ldr	r0, [pc, #612]	@ (800fcd8 <etharp_find_entry+0x2e0>)
 800fa74:	f002 fb9e 	bl	80121b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d020      	beq.n	800fac0 <etharp_find_entry+0xc8>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6819      	ldr	r1, [r3, #0]
 800fa82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa86:	4891      	ldr	r0, [pc, #580]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fa88:	4613      	mov	r3, r2
 800fa8a:	005b      	lsls	r3, r3, #1
 800fa8c:	4413      	add	r3, r2
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	4403      	add	r3, r0
 800fa92:	3304      	adds	r3, #4
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4299      	cmp	r1, r3
 800fa98:	d112      	bne.n	800fac0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00c      	beq.n	800faba <etharp_find_entry+0xc2>
 800faa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800faa4:	4989      	ldr	r1, [pc, #548]	@ (800fccc <etharp_find_entry+0x2d4>)
 800faa6:	4613      	mov	r3, r2
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	4413      	add	r3, r2
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	440b      	add	r3, r1
 800fab0:	3308      	adds	r3, #8
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d102      	bne.n	800fac0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800faba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fabe:	e100      	b.n	800fcc2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d140      	bne.n	800fb48 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800faca:	4980      	ldr	r1, [pc, #512]	@ (800fccc <etharp_find_entry+0x2d4>)
 800facc:	4613      	mov	r3, r2
 800face:	005b      	lsls	r3, r3, #1
 800fad0:	4413      	add	r3, r2
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	440b      	add	r3, r1
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d01a      	beq.n	800fb12 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fadc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fae0:	497a      	ldr	r1, [pc, #488]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fae2:	4613      	mov	r3, r2
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	4413      	add	r3, r2
 800fae8:	00db      	lsls	r3, r3, #3
 800faea:	440b      	add	r3, r1
 800faec:	3312      	adds	r3, #18
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	8bba      	ldrh	r2, [r7, #28]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d845      	bhi.n	800fb82 <etharp_find_entry+0x18a>
            old_queue = i;
 800faf6:	8c3b      	ldrh	r3, [r7, #32]
 800faf8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fafa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fafe:	4973      	ldr	r1, [pc, #460]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fb00:	4613      	mov	r3, r2
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	4413      	add	r3, r2
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	440b      	add	r3, r1
 800fb0a:	3312      	adds	r3, #18
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	83bb      	strh	r3, [r7, #28]
 800fb10:	e037      	b.n	800fb82 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fb12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb16:	496d      	ldr	r1, [pc, #436]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fb18:	4613      	mov	r3, r2
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	440b      	add	r3, r1
 800fb22:	3312      	adds	r3, #18
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	8b7a      	ldrh	r2, [r7, #26]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d82a      	bhi.n	800fb82 <etharp_find_entry+0x18a>
            old_pending = i;
 800fb2c:	8c3b      	ldrh	r3, [r7, #32]
 800fb2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800fb30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb34:	4965      	ldr	r1, [pc, #404]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fb36:	4613      	mov	r3, r2
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	4413      	add	r3, r2
 800fb3c:	00db      	lsls	r3, r3, #3
 800fb3e:	440b      	add	r3, r1
 800fb40:	3312      	adds	r3, #18
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	837b      	strh	r3, [r7, #26]
 800fb46:	e01c      	b.n	800fb82 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d919      	bls.n	800fb82 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fb4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb52:	495e      	ldr	r1, [pc, #376]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fb54:	4613      	mov	r3, r2
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	4413      	add	r3, r2
 800fb5a:	00db      	lsls	r3, r3, #3
 800fb5c:	440b      	add	r3, r1
 800fb5e:	3312      	adds	r3, #18
 800fb60:	881b      	ldrh	r3, [r3, #0]
 800fb62:	8b3a      	ldrh	r2, [r7, #24]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d80c      	bhi.n	800fb82 <etharp_find_entry+0x18a>
            old_stable = i;
 800fb68:	8c3b      	ldrh	r3, [r7, #32]
 800fb6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800fb6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb70:	4956      	ldr	r1, [pc, #344]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fb72:	4613      	mov	r3, r2
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4413      	add	r3, r2
 800fb78:	00db      	lsls	r3, r3, #3
 800fb7a:	440b      	add	r3, r1
 800fb7c:	3312      	adds	r3, #18
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb82:	8c3b      	ldrh	r3, [r7, #32]
 800fb84:	3301      	adds	r3, #1
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	843b      	strh	r3, [r7, #32]
 800fb8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fb8e:	2b09      	cmp	r3, #9
 800fb90:	f77f af4c 	ble.w	800fa2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fb94:	7afb      	ldrb	r3, [r7, #11]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d108      	bne.n	800fbb0 <etharp_find_entry+0x1b8>
 800fb9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fba2:	2b0a      	cmp	r3, #10
 800fba4:	d107      	bne.n	800fbb6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fba6:	7afb      	ldrb	r3, [r7, #11]
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb4:	e085      	b.n	800fcc2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fbb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fbba:	2b09      	cmp	r3, #9
 800fbbc:	dc02      	bgt.n	800fbc4 <etharp_find_entry+0x1cc>
    i = empty;
 800fbbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fbc0:	843b      	strh	r3, [r7, #32]
 800fbc2:	e039      	b.n	800fc38 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fbc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800fbc8:	2b09      	cmp	r3, #9
 800fbca:	dc14      	bgt.n	800fbf6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fbcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fbd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbd4:	493d      	ldr	r1, [pc, #244]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4413      	add	r3, r2
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	440b      	add	r3, r1
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d018      	beq.n	800fc18 <etharp_find_entry+0x220>
 800fbe6:	4b3a      	ldr	r3, [pc, #232]	@ (800fcd0 <etharp_find_entry+0x2d8>)
 800fbe8:	f240 126d 	movw	r2, #365	@ 0x16d
 800fbec:	493b      	ldr	r1, [pc, #236]	@ (800fcdc <etharp_find_entry+0x2e4>)
 800fbee:	483a      	ldr	r0, [pc, #232]	@ (800fcd8 <etharp_find_entry+0x2e0>)
 800fbf0:	f002 fae0 	bl	80121b4 <iprintf>
 800fbf4:	e010      	b.n	800fc18 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fbf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800fbfa:	2b09      	cmp	r3, #9
 800fbfc:	dc02      	bgt.n	800fc04 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fbfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc00:	843b      	strh	r3, [r7, #32]
 800fc02:	e009      	b.n	800fc18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fc04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fc08:	2b09      	cmp	r3, #9
 800fc0a:	dc02      	bgt.n	800fc12 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fc0c:	8bfb      	ldrh	r3, [r7, #30]
 800fc0e:	843b      	strh	r3, [r7, #32]
 800fc10:	e002      	b.n	800fc18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fc12:	f04f 33ff 	mov.w	r3, #4294967295
 800fc16:	e054      	b.n	800fcc2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc1c:	2b09      	cmp	r3, #9
 800fc1e:	dd06      	ble.n	800fc2e <etharp_find_entry+0x236>
 800fc20:	4b2b      	ldr	r3, [pc, #172]	@ (800fcd0 <etharp_find_entry+0x2d8>)
 800fc22:	f240 127f 	movw	r2, #383	@ 0x17f
 800fc26:	492e      	ldr	r1, [pc, #184]	@ (800fce0 <etharp_find_entry+0x2e8>)
 800fc28:	482b      	ldr	r0, [pc, #172]	@ (800fcd8 <etharp_find_entry+0x2e0>)
 800fc2a:	f002 fac3 	bl	80121b4 <iprintf>
    etharp_free_entry(i);
 800fc2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fe06 	bl	800f844 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fc38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc3c:	2b09      	cmp	r3, #9
 800fc3e:	dd06      	ble.n	800fc4e <etharp_find_entry+0x256>
 800fc40:	4b23      	ldr	r3, [pc, #140]	@ (800fcd0 <etharp_find_entry+0x2d8>)
 800fc42:	f240 1283 	movw	r2, #387	@ 0x183
 800fc46:	4926      	ldr	r1, [pc, #152]	@ (800fce0 <etharp_find_entry+0x2e8>)
 800fc48:	4823      	ldr	r0, [pc, #140]	@ (800fcd8 <etharp_find_entry+0x2e0>)
 800fc4a:	f002 fab3 	bl	80121b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fc4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc52:	491e      	ldr	r1, [pc, #120]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fc54:	4613      	mov	r3, r2
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	4413      	add	r3, r2
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	440b      	add	r3, r1
 800fc5e:	3314      	adds	r3, #20
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d006      	beq.n	800fc74 <etharp_find_entry+0x27c>
 800fc66:	4b1a      	ldr	r3, [pc, #104]	@ (800fcd0 <etharp_find_entry+0x2d8>)
 800fc68:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800fc6c:	491d      	ldr	r1, [pc, #116]	@ (800fce4 <etharp_find_entry+0x2ec>)
 800fc6e:	481a      	ldr	r0, [pc, #104]	@ (800fcd8 <etharp_find_entry+0x2e0>)
 800fc70:	f002 faa0 	bl	80121b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00b      	beq.n	800fc92 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fc7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6819      	ldr	r1, [r3, #0]
 800fc82:	4812      	ldr	r0, [pc, #72]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fc84:	4613      	mov	r3, r2
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	4413      	add	r3, r2
 800fc8a:	00db      	lsls	r3, r3, #3
 800fc8c:	4403      	add	r3, r0
 800fc8e:	3304      	adds	r3, #4
 800fc90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fc92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc96:	490d      	ldr	r1, [pc, #52]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fc98:	4613      	mov	r3, r2
 800fc9a:	005b      	lsls	r3, r3, #1
 800fc9c:	4413      	add	r3, r2
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	440b      	add	r3, r1
 800fca2:	3312      	adds	r3, #18
 800fca4:	2200      	movs	r2, #0
 800fca6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcac:	4907      	ldr	r1, [pc, #28]	@ (800fccc <etharp_find_entry+0x2d4>)
 800fcae:	4613      	mov	r3, r2
 800fcb0:	005b      	lsls	r3, r3, #1
 800fcb2:	4413      	add	r3, r2
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	440b      	add	r3, r1
 800fcb8:	3308      	adds	r3, #8
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fcbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3728      	adds	r7, #40	@ 0x28
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	2000ef8c 	.word	0x2000ef8c
 800fcd0:	08015438 	.word	0x08015438
 800fcd4:	08015470 	.word	0x08015470
 800fcd8:	080154b0 	.word	0x080154b0
 800fcdc:	080154d8 	.word	0x080154d8
 800fce0:	080154f0 	.word	0x080154f0
 800fce4:	08015504 	.word	0x08015504

0800fce8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fcfc:	2b06      	cmp	r3, #6
 800fcfe:	d006      	beq.n	800fd0e <etharp_update_arp_entry+0x26>
 800fd00:	4b48      	ldr	r3, [pc, #288]	@ (800fe24 <etharp_update_arp_entry+0x13c>)
 800fd02:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800fd06:	4948      	ldr	r1, [pc, #288]	@ (800fe28 <etharp_update_arp_entry+0x140>)
 800fd08:	4848      	ldr	r0, [pc, #288]	@ (800fe2c <etharp_update_arp_entry+0x144>)
 800fd0a:	f002 fa53 	bl	80121b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d012      	beq.n	800fd3a <etharp_update_arp_entry+0x52>
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00e      	beq.n	800fd3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	68f9      	ldr	r1, [r7, #12]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f001 f8fe 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 800fd28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d105      	bne.n	800fd3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fd36:	2be0      	cmp	r3, #224	@ 0xe0
 800fd38:	d102      	bne.n	800fd40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fd3a:	f06f 030f 	mvn.w	r3, #15
 800fd3e:	e06c      	b.n	800fe1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	4619      	mov	r1, r3
 800fd46:	68b8      	ldr	r0, [r7, #8]
 800fd48:	f7ff fe56 	bl	800f9f8 <etharp_find_entry>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fd50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	da02      	bge.n	800fd5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fd58:	8afb      	ldrh	r3, [r7, #22]
 800fd5a:	b25b      	sxtb	r3, r3
 800fd5c:	e05d      	b.n	800fe1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fd5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd62:	4933      	ldr	r1, [pc, #204]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fd64:	4613      	mov	r3, r2
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	4413      	add	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	440b      	add	r3, r1
 800fd6e:	3314      	adds	r3, #20
 800fd70:	2202      	movs	r2, #2
 800fd72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fd74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd78:	492d      	ldr	r1, [pc, #180]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	4413      	add	r3, r2
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	440b      	add	r3, r1
 800fd84:	3308      	adds	r3, #8
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fd8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	4413      	add	r3, r2
 800fd94:	00db      	lsls	r3, r3, #3
 800fd96:	3308      	adds	r3, #8
 800fd98:	4a25      	ldr	r2, [pc, #148]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fd9a:	4413      	add	r3, r2
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	2206      	movs	r2, #6
 800fda0:	6879      	ldr	r1, [r7, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f002 fae1 	bl	801236a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fda8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdac:	4920      	ldr	r1, [pc, #128]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fdae:	4613      	mov	r3, r2
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	4413      	add	r3, r2
 800fdb4:	00db      	lsls	r3, r3, #3
 800fdb6:	440b      	add	r3, r1
 800fdb8:	3312      	adds	r3, #18
 800fdba:	2200      	movs	r2, #0
 800fdbc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fdbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdc2:	491b      	ldr	r1, [pc, #108]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	4413      	add	r3, r2
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	440b      	add	r3, r1
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d021      	beq.n	800fe18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fdd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdd8:	4915      	ldr	r1, [pc, #84]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fdda:	4613      	mov	r3, r2
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4413      	add	r3, r2
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	440b      	add	r3, r1
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fde8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fdec:	4910      	ldr	r1, [pc, #64]	@ (800fe30 <etharp_update_arp_entry+0x148>)
 800fdee:	4613      	mov	r3, r2
 800fdf0:	005b      	lsls	r3, r3, #1
 800fdf2:	4413      	add	r3, r2
 800fdf4:	00db      	lsls	r3, r3, #3
 800fdf6:	440b      	add	r3, r1
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800fe02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6939      	ldr	r1, [r7, #16]
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f001 ff97 	bl	8011d40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fe12:	6938      	ldr	r0, [r7, #16]
 800fe14:	f7f9 fdf0 	bl	80099f8 <pbuf_free>
  }
  return ERR_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3718      	adds	r7, #24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	08015438 	.word	0x08015438
 800fe28:	08015530 	.word	0x08015530
 800fe2c:	080154b0 	.word	0x080154b0
 800fe30:	2000ef8c 	.word	0x2000ef8c

0800fe34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	60fb      	str	r3, [r7, #12]
 800fe40:	e01e      	b.n	800fe80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fe42:	4913      	ldr	r1, [pc, #76]	@ (800fe90 <etharp_cleanup_netif+0x5c>)
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	4613      	mov	r3, r2
 800fe48:	005b      	lsls	r3, r3, #1
 800fe4a:	4413      	add	r3, r2
 800fe4c:	00db      	lsls	r3, r3, #3
 800fe4e:	440b      	add	r3, r1
 800fe50:	3314      	adds	r3, #20
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fe56:	7afb      	ldrb	r3, [r7, #11]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00e      	beq.n	800fe7a <etharp_cleanup_netif+0x46>
 800fe5c:	490c      	ldr	r1, [pc, #48]	@ (800fe90 <etharp_cleanup_netif+0x5c>)
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	4613      	mov	r3, r2
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	4413      	add	r3, r2
 800fe66:	00db      	lsls	r3, r3, #3
 800fe68:	440b      	add	r3, r1
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d102      	bne.n	800fe7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7ff fce5 	bl	800f844 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	60fb      	str	r3, [r7, #12]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b09      	cmp	r3, #9
 800fe84:	dddd      	ble.n	800fe42 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fe86:	bf00      	nop
 800fe88:	bf00      	nop
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	2000ef8c 	.word	0x2000ef8c

0800fe94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fe94:	b5b0      	push	{r4, r5, r7, lr}
 800fe96:	b08a      	sub	sp, #40	@ 0x28
 800fe98:	af04      	add	r7, sp, #16
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d107      	bne.n	800feb4 <etharp_input+0x20>
 800fea4:	4b3d      	ldr	r3, [pc, #244]	@ (800ff9c <etharp_input+0x108>)
 800fea6:	f240 228a 	movw	r2, #650	@ 0x28a
 800feaa:	493d      	ldr	r1, [pc, #244]	@ (800ffa0 <etharp_input+0x10c>)
 800feac:	483d      	ldr	r0, [pc, #244]	@ (800ffa4 <etharp_input+0x110>)
 800feae:	f002 f981 	bl	80121b4 <iprintf>
 800feb2:	e06f      	b.n	800ff94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fec4:	d10c      	bne.n	800fee0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800feca:	2b06      	cmp	r3, #6
 800fecc:	d108      	bne.n	800fee0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fed2:	2b04      	cmp	r3, #4
 800fed4:	d104      	bne.n	800fee0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	885b      	ldrh	r3, [r3, #2]
 800feda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fedc:	2b08      	cmp	r3, #8
 800fede:	d003      	beq.n	800fee8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7f9 fd89 	bl	80099f8 <pbuf_free>
    return;
 800fee6:	e055      	b.n	800ff94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	330e      	adds	r3, #14
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	3318      	adds	r3, #24
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	3304      	adds	r3, #4
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d102      	bne.n	800ff08 <etharp_input+0x74>
    for_us = 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	75fb      	strb	r3, [r7, #23]
 800ff06:	e009      	b.n	800ff1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	bf0c      	ite	eq
 800ff14:	2301      	moveq	r3, #1
 800ff16:	2300      	movne	r3, #0
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	f103 0208 	add.w	r2, r3, #8
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <etharp_input+0x98>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e000      	b.n	800ff2e <etharp_input+0x9a>
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	f107 010c 	add.w	r1, r7, #12
 800ff32:	6838      	ldr	r0, [r7, #0]
 800ff34:	f7ff fed8 	bl	800fce8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	88db      	ldrh	r3, [r3, #6]
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff42:	d003      	beq.n	800ff4c <etharp_input+0xb8>
 800ff44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff48:	d01e      	beq.n	800ff88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ff4a:	e020      	b.n	800ff8e <etharp_input+0xfa>
      if (for_us) {
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d01c      	beq.n	800ff8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ff6c:	2102      	movs	r1, #2
 800ff6e:	9103      	str	r1, [sp, #12]
 800ff70:	f107 010c 	add.w	r1, r7, #12
 800ff74:	9102      	str	r1, [sp, #8]
 800ff76:	9201      	str	r2, [sp, #4]
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	462b      	mov	r3, r5
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	4601      	mov	r1, r0
 800ff80:	6838      	ldr	r0, [r7, #0]
 800ff82:	f000 faeb 	bl	801055c <etharp_raw>
      break;
 800ff86:	e001      	b.n	800ff8c <etharp_input+0xf8>
      break;
 800ff88:	bf00      	nop
 800ff8a:	e000      	b.n	800ff8e <etharp_input+0xfa>
      break;
 800ff8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7f9 fd32 	bl	80099f8 <pbuf_free>
}
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bdb0      	pop	{r4, r5, r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	08015438 	.word	0x08015438
 800ffa0:	08015588 	.word	0x08015588
 800ffa4:	080154b0 	.word	0x080154b0

0800ffa8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af02      	add	r7, sp, #8
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ffb6:	79fa      	ldrb	r2, [r7, #7]
 800ffb8:	4944      	ldr	r1, [pc, #272]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 800ffba:	4613      	mov	r3, r2
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	4413      	add	r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	440b      	add	r3, r1
 800ffc4:	3314      	adds	r3, #20
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d806      	bhi.n	800ffda <etharp_output_to_arp_index+0x32>
 800ffcc:	4b40      	ldr	r3, [pc, #256]	@ (80100d0 <etharp_output_to_arp_index+0x128>)
 800ffce:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ffd2:	4940      	ldr	r1, [pc, #256]	@ (80100d4 <etharp_output_to_arp_index+0x12c>)
 800ffd4:	4840      	ldr	r0, [pc, #256]	@ (80100d8 <etharp_output_to_arp_index+0x130>)
 800ffd6:	f002 f8ed 	bl	80121b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ffda:	79fa      	ldrb	r2, [r7, #7]
 800ffdc:	493b      	ldr	r1, [pc, #236]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 800ffde:	4613      	mov	r3, r2
 800ffe0:	005b      	lsls	r3, r3, #1
 800ffe2:	4413      	add	r3, r2
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	440b      	add	r3, r1
 800ffe8:	3314      	adds	r3, #20
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d153      	bne.n	8010098 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fff0:	79fa      	ldrb	r2, [r7, #7]
 800fff2:	4936      	ldr	r1, [pc, #216]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 800fff4:	4613      	mov	r3, r2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4413      	add	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	440b      	add	r3, r1
 800fffe:	3312      	adds	r3, #18
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010006:	d919      	bls.n	801003c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010008:	79fa      	ldrb	r2, [r7, #7]
 801000a:	4613      	mov	r3, r2
 801000c:	005b      	lsls	r3, r3, #1
 801000e:	4413      	add	r3, r2
 8010010:	00db      	lsls	r3, r3, #3
 8010012:	4a2e      	ldr	r2, [pc, #184]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 8010014:	4413      	add	r3, r2
 8010016:	3304      	adds	r3, #4
 8010018:	4619      	mov	r1, r3
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f000 fb4c 	bl	80106b8 <etharp_request>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d138      	bne.n	8010098 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010026:	79fa      	ldrb	r2, [r7, #7]
 8010028:	4928      	ldr	r1, [pc, #160]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 801002a:	4613      	mov	r3, r2
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	4413      	add	r3, r2
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	440b      	add	r3, r1
 8010034:	3314      	adds	r3, #20
 8010036:	2203      	movs	r2, #3
 8010038:	701a      	strb	r2, [r3, #0]
 801003a:	e02d      	b.n	8010098 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801003c:	79fa      	ldrb	r2, [r7, #7]
 801003e:	4923      	ldr	r1, [pc, #140]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 8010040:	4613      	mov	r3, r2
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	4413      	add	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	440b      	add	r3, r1
 801004a:	3312      	adds	r3, #18
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010052:	d321      	bcc.n	8010098 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010054:	79fa      	ldrb	r2, [r7, #7]
 8010056:	4613      	mov	r3, r2
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	4413      	add	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	4a1b      	ldr	r2, [pc, #108]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 8010060:	4413      	add	r3, r2
 8010062:	1d19      	adds	r1, r3, #4
 8010064:	79fa      	ldrb	r2, [r7, #7]
 8010066:	4613      	mov	r3, r2
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	3308      	adds	r3, #8
 8010070:	4a16      	ldr	r2, [pc, #88]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 8010072:	4413      	add	r3, r2
 8010074:	3304      	adds	r3, #4
 8010076:	461a      	mov	r2, r3
 8010078:	68f8      	ldr	r0, [r7, #12]
 801007a:	f000 fafb 	bl	8010674 <etharp_request_dst>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d109      	bne.n	8010098 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010084:	79fa      	ldrb	r2, [r7, #7]
 8010086:	4911      	ldr	r1, [pc, #68]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 8010088:	4613      	mov	r3, r2
 801008a:	005b      	lsls	r3, r3, #1
 801008c:	4413      	add	r3, r2
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	440b      	add	r3, r1
 8010092:	3314      	adds	r3, #20
 8010094:	2203      	movs	r2, #3
 8010096:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801009e:	79fa      	ldrb	r2, [r7, #7]
 80100a0:	4613      	mov	r3, r2
 80100a2:	005b      	lsls	r3, r3, #1
 80100a4:	4413      	add	r3, r2
 80100a6:	00db      	lsls	r3, r3, #3
 80100a8:	3308      	adds	r3, #8
 80100aa:	4a08      	ldr	r2, [pc, #32]	@ (80100cc <etharp_output_to_arp_index+0x124>)
 80100ac:	4413      	add	r3, r2
 80100ae:	3304      	adds	r3, #4
 80100b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80100b4:	9200      	str	r2, [sp, #0]
 80100b6:	460a      	mov	r2, r1
 80100b8:	68b9      	ldr	r1, [r7, #8]
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f001 fe40 	bl	8011d40 <ethernet_output>
 80100c0:	4603      	mov	r3, r0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	2000ef8c 	.word	0x2000ef8c
 80100d0:	08015438 	.word	0x08015438
 80100d4:	080155a8 	.word	0x080155a8
 80100d8:	080154b0 	.word	0x080154b0

080100dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b08a      	sub	sp, #40	@ 0x28
 80100e0:	af02      	add	r7, sp, #8
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d106      	bne.n	8010100 <etharp_output+0x24>
 80100f2:	4b73      	ldr	r3, [pc, #460]	@ (80102c0 <etharp_output+0x1e4>)
 80100f4:	f240 321e 	movw	r2, #798	@ 0x31e
 80100f8:	4972      	ldr	r1, [pc, #456]	@ (80102c4 <etharp_output+0x1e8>)
 80100fa:	4873      	ldr	r0, [pc, #460]	@ (80102c8 <etharp_output+0x1ec>)
 80100fc:	f002 f85a 	bl	80121b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d106      	bne.n	8010114 <etharp_output+0x38>
 8010106:	4b6e      	ldr	r3, [pc, #440]	@ (80102c0 <etharp_output+0x1e4>)
 8010108:	f240 321f 	movw	r2, #799	@ 0x31f
 801010c:	496f      	ldr	r1, [pc, #444]	@ (80102cc <etharp_output+0x1f0>)
 801010e:	486e      	ldr	r0, [pc, #440]	@ (80102c8 <etharp_output+0x1ec>)
 8010110:	f002 f850 	bl	80121b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d106      	bne.n	8010128 <etharp_output+0x4c>
 801011a:	4b69      	ldr	r3, [pc, #420]	@ (80102c0 <etharp_output+0x1e4>)
 801011c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010120:	496b      	ldr	r1, [pc, #428]	@ (80102d0 <etharp_output+0x1f4>)
 8010122:	4869      	ldr	r0, [pc, #420]	@ (80102c8 <etharp_output+0x1ec>)
 8010124:	f002 f846 	bl	80121b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	68f9      	ldr	r1, [r7, #12]
 801012e:	4618      	mov	r0, r3
 8010130:	f000 fef8 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d002      	beq.n	8010140 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801013a:	4b66      	ldr	r3, [pc, #408]	@ (80102d4 <etharp_output+0x1f8>)
 801013c:	61fb      	str	r3, [r7, #28]
 801013e:	e0af      	b.n	80102a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010148:	2be0      	cmp	r3, #224	@ 0xe0
 801014a:	d118      	bne.n	801017e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801014c:	2301      	movs	r3, #1
 801014e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010150:	2300      	movs	r3, #0
 8010152:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010154:	235e      	movs	r3, #94	@ 0x5e
 8010156:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3301      	adds	r3, #1
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010162:	b2db      	uxtb	r3, r3
 8010164:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3302      	adds	r3, #2
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3303      	adds	r3, #3
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010176:	f107 0310 	add.w	r3, r7, #16
 801017a:	61fb      	str	r3, [r7, #28]
 801017c:	e090      	b.n	80102a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3304      	adds	r3, #4
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	405a      	eors	r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3308      	adds	r3, #8
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4013      	ands	r3, r2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d012      	beq.n	80101bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801019c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d00b      	beq.n	80101bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	330c      	adds	r3, #12
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d003      	beq.n	80101b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	330c      	adds	r3, #12
 80101b2:	61bb      	str	r3, [r7, #24]
 80101b4:	e002      	b.n	80101bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80101b6:	f06f 0303 	mvn.w	r3, #3
 80101ba:	e07d      	b.n	80102b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80101bc:	4b46      	ldr	r3, [pc, #280]	@ (80102d8 <etharp_output+0x1fc>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	4619      	mov	r1, r3
 80101c2:	4a46      	ldr	r2, [pc, #280]	@ (80102dc <etharp_output+0x200>)
 80101c4:	460b      	mov	r3, r1
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	440b      	add	r3, r1
 80101ca:	00db      	lsls	r3, r3, #3
 80101cc:	4413      	add	r3, r2
 80101ce:	3314      	adds	r3, #20
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d925      	bls.n	8010222 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80101d6:	4b40      	ldr	r3, [pc, #256]	@ (80102d8 <etharp_output+0x1fc>)
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	4619      	mov	r1, r3
 80101dc:	4a3f      	ldr	r2, [pc, #252]	@ (80102dc <etharp_output+0x200>)
 80101de:	460b      	mov	r3, r1
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	440b      	add	r3, r1
 80101e4:	00db      	lsls	r3, r3, #3
 80101e6:	4413      	add	r3, r2
 80101e8:	3308      	adds	r3, #8
 80101ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d117      	bne.n	8010222 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	4b38      	ldr	r3, [pc, #224]	@ (80102d8 <etharp_output+0x1fc>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	4618      	mov	r0, r3
 80101fc:	4937      	ldr	r1, [pc, #220]	@ (80102dc <etharp_output+0x200>)
 80101fe:	4603      	mov	r3, r0
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	4403      	add	r3, r0
 8010204:	00db      	lsls	r3, r3, #3
 8010206:	440b      	add	r3, r1
 8010208:	3304      	adds	r3, #4
 801020a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801020c:	429a      	cmp	r2, r3
 801020e:	d108      	bne.n	8010222 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010210:	4b31      	ldr	r3, [pc, #196]	@ (80102d8 <etharp_output+0x1fc>)
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	461a      	mov	r2, r3
 8010216:	68b9      	ldr	r1, [r7, #8]
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f7ff fec5 	bl	800ffa8 <etharp_output_to_arp_index>
 801021e:	4603      	mov	r3, r0
 8010220:	e04a      	b.n	80102b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010222:	2300      	movs	r3, #0
 8010224:	75fb      	strb	r3, [r7, #23]
 8010226:	e031      	b.n	801028c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010228:	7dfa      	ldrb	r2, [r7, #23]
 801022a:	492c      	ldr	r1, [pc, #176]	@ (80102dc <etharp_output+0x200>)
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3314      	adds	r3, #20
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2b01      	cmp	r3, #1
 801023c:	d923      	bls.n	8010286 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801023e:	7dfa      	ldrb	r2, [r7, #23]
 8010240:	4926      	ldr	r1, [pc, #152]	@ (80102dc <etharp_output+0x200>)
 8010242:	4613      	mov	r3, r2
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	4413      	add	r3, r2
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	440b      	add	r3, r1
 801024c:	3308      	adds	r3, #8
 801024e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	429a      	cmp	r2, r3
 8010254:	d117      	bne.n	8010286 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	6819      	ldr	r1, [r3, #0]
 801025a:	7dfa      	ldrb	r2, [r7, #23]
 801025c:	481f      	ldr	r0, [pc, #124]	@ (80102dc <etharp_output+0x200>)
 801025e:	4613      	mov	r3, r2
 8010260:	005b      	lsls	r3, r3, #1
 8010262:	4413      	add	r3, r2
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	4403      	add	r3, r0
 8010268:	3304      	adds	r3, #4
 801026a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801026c:	4299      	cmp	r1, r3
 801026e:	d10a      	bne.n	8010286 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010270:	4a19      	ldr	r2, [pc, #100]	@ (80102d8 <etharp_output+0x1fc>)
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010276:	7dfb      	ldrb	r3, [r7, #23]
 8010278:	461a      	mov	r2, r3
 801027a:	68b9      	ldr	r1, [r7, #8]
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f7ff fe93 	bl	800ffa8 <etharp_output_to_arp_index>
 8010282:	4603      	mov	r3, r0
 8010284:	e018      	b.n	80102b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	3301      	adds	r3, #1
 801028a:	75fb      	strb	r3, [r7, #23]
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	2b09      	cmp	r3, #9
 8010290:	d9ca      	bls.n	8010228 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	69b9      	ldr	r1, [r7, #24]
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f000 f822 	bl	80102e0 <etharp_query>
 801029c:	4603      	mov	r3, r0
 801029e:	e00b      	b.n	80102b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80102a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	68b9      	ldr	r1, [r7, #8]
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f001 fd45 	bl	8011d40 <ethernet_output>
 80102b6:	4603      	mov	r3, r0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3720      	adds	r7, #32
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	08015438 	.word	0x08015438
 80102c4:	08015588 	.word	0x08015588
 80102c8:	080154b0 	.word	0x080154b0
 80102cc:	080155d8 	.word	0x080155d8
 80102d0:	08015578 	.word	0x08015578
 80102d4:	08015c70 	.word	0x08015c70
 80102d8:	2000f07c 	.word	0x2000f07c
 80102dc:	2000ef8c 	.word	0x2000ef8c

080102e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08c      	sub	sp, #48	@ 0x30
 80102e4:	af02      	add	r7, sp, #8
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	3326      	adds	r3, #38	@ 0x26
 80102f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80102f2:	23ff      	movs	r3, #255	@ 0xff
 80102f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	68f9      	ldr	r1, [r7, #12]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fe0e 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10c      	bne.n	8010328 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010316:	2be0      	cmp	r3, #224	@ 0xe0
 8010318:	d006      	beq.n	8010328 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d003      	beq.n	8010328 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d102      	bne.n	801032e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010328:	f06f 030f 	mvn.w	r3, #15
 801032c:	e101      	b.n	8010532 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	2101      	movs	r1, #1
 8010332:	68b8      	ldr	r0, [r7, #8]
 8010334:	f7ff fb60 	bl	800f9f8 <etharp_find_entry>
 8010338:	4603      	mov	r3, r0
 801033a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801033c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010340:	2b00      	cmp	r3, #0
 8010342:	da02      	bge.n	801034a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010344:	8a7b      	ldrh	r3, [r7, #18]
 8010346:	b25b      	sxtb	r3, r3
 8010348:	e0f3      	b.n	8010532 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801034a:	8a7b      	ldrh	r3, [r7, #18]
 801034c:	2b7e      	cmp	r3, #126	@ 0x7e
 801034e:	d906      	bls.n	801035e <etharp_query+0x7e>
 8010350:	4b7a      	ldr	r3, [pc, #488]	@ (801053c <etharp_query+0x25c>)
 8010352:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010356:	497a      	ldr	r1, [pc, #488]	@ (8010540 <etharp_query+0x260>)
 8010358:	487a      	ldr	r0, [pc, #488]	@ (8010544 <etharp_query+0x264>)
 801035a:	f001 ff2b 	bl	80121b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801035e:	8a7b      	ldrh	r3, [r7, #18]
 8010360:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010362:	7c7a      	ldrb	r2, [r7, #17]
 8010364:	4978      	ldr	r1, [pc, #480]	@ (8010548 <etharp_query+0x268>)
 8010366:	4613      	mov	r3, r2
 8010368:	005b      	lsls	r3, r3, #1
 801036a:	4413      	add	r3, r2
 801036c:	00db      	lsls	r3, r3, #3
 801036e:	440b      	add	r3, r1
 8010370:	3314      	adds	r3, #20
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d115      	bne.n	80103a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8010378:	2301      	movs	r3, #1
 801037a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801037c:	7c7a      	ldrb	r2, [r7, #17]
 801037e:	4972      	ldr	r1, [pc, #456]	@ (8010548 <etharp_query+0x268>)
 8010380:	4613      	mov	r3, r2
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	4413      	add	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	440b      	add	r3, r1
 801038a:	3314      	adds	r3, #20
 801038c:	2201      	movs	r2, #1
 801038e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010390:	7c7a      	ldrb	r2, [r7, #17]
 8010392:	496d      	ldr	r1, [pc, #436]	@ (8010548 <etharp_query+0x268>)
 8010394:	4613      	mov	r3, r2
 8010396:	005b      	lsls	r3, r3, #1
 8010398:	4413      	add	r3, r2
 801039a:	00db      	lsls	r3, r3, #3
 801039c:	440b      	add	r3, r1
 801039e:	3308      	adds	r3, #8
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80103a4:	7c7a      	ldrb	r2, [r7, #17]
 80103a6:	4968      	ldr	r1, [pc, #416]	@ (8010548 <etharp_query+0x268>)
 80103a8:	4613      	mov	r3, r2
 80103aa:	005b      	lsls	r3, r3, #1
 80103ac:	4413      	add	r3, r2
 80103ae:	00db      	lsls	r3, r3, #3
 80103b0:	440b      	add	r3, r1
 80103b2:	3314      	adds	r3, #20
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d011      	beq.n	80103de <etharp_query+0xfe>
 80103ba:	7c7a      	ldrb	r2, [r7, #17]
 80103bc:	4962      	ldr	r1, [pc, #392]	@ (8010548 <etharp_query+0x268>)
 80103be:	4613      	mov	r3, r2
 80103c0:	005b      	lsls	r3, r3, #1
 80103c2:	4413      	add	r3, r2
 80103c4:	00db      	lsls	r3, r3, #3
 80103c6:	440b      	add	r3, r1
 80103c8:	3314      	adds	r3, #20
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d806      	bhi.n	80103de <etharp_query+0xfe>
 80103d0:	4b5a      	ldr	r3, [pc, #360]	@ (801053c <etharp_query+0x25c>)
 80103d2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80103d6:	495d      	ldr	r1, [pc, #372]	@ (801054c <etharp_query+0x26c>)
 80103d8:	485a      	ldr	r0, [pc, #360]	@ (8010544 <etharp_query+0x264>)
 80103da:	f001 feeb 	bl	80121b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d102      	bne.n	80103ea <etharp_query+0x10a>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10c      	bne.n	8010404 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80103ea:	68b9      	ldr	r1, [r7, #8]
 80103ec:	68f8      	ldr	r0, [r7, #12]
 80103ee:	f000 f963 	bl	80106b8 <etharp_request>
 80103f2:	4603      	mov	r3, r0
 80103f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d102      	bne.n	8010404 <etharp_query+0x124>
      return result;
 80103fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010402:	e096      	b.n	8010532 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d106      	bne.n	8010418 <etharp_query+0x138>
 801040a:	4b4c      	ldr	r3, [pc, #304]	@ (801053c <etharp_query+0x25c>)
 801040c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010410:	494f      	ldr	r1, [pc, #316]	@ (8010550 <etharp_query+0x270>)
 8010412:	484c      	ldr	r0, [pc, #304]	@ (8010544 <etharp_query+0x264>)
 8010414:	f001 fece 	bl	80121b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010418:	7c7a      	ldrb	r2, [r7, #17]
 801041a:	494b      	ldr	r1, [pc, #300]	@ (8010548 <etharp_query+0x268>)
 801041c:	4613      	mov	r3, r2
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	4413      	add	r3, r2
 8010422:	00db      	lsls	r3, r3, #3
 8010424:	440b      	add	r3, r1
 8010426:	3314      	adds	r3, #20
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d917      	bls.n	801045e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801042e:	4a49      	ldr	r2, [pc, #292]	@ (8010554 <etharp_query+0x274>)
 8010430:	7c7b      	ldrb	r3, [r7, #17]
 8010432:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010434:	7c7a      	ldrb	r2, [r7, #17]
 8010436:	4613      	mov	r3, r2
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4413      	add	r3, r2
 801043c:	00db      	lsls	r3, r3, #3
 801043e:	3308      	adds	r3, #8
 8010440:	4a41      	ldr	r2, [pc, #260]	@ (8010548 <etharp_query+0x268>)
 8010442:	4413      	add	r3, r2
 8010444:	3304      	adds	r3, #4
 8010446:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801044a:	9200      	str	r2, [sp, #0]
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f001 fc75 	bl	8011d40 <ethernet_output>
 8010456:	4603      	mov	r3, r0
 8010458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801045c:	e067      	b.n	801052e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801045e:	7c7a      	ldrb	r2, [r7, #17]
 8010460:	4939      	ldr	r1, [pc, #228]	@ (8010548 <etharp_query+0x268>)
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	440b      	add	r3, r1
 801046c:	3314      	adds	r3, #20
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d15c      	bne.n	801052e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010474:	2300      	movs	r3, #0
 8010476:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801047c:	e01c      	b.n	80104b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	895a      	ldrh	r2, [r3, #10]
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	891b      	ldrh	r3, [r3, #8]
 8010486:	429a      	cmp	r2, r3
 8010488:	d10a      	bne.n	80104a0 <etharp_query+0x1c0>
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d006      	beq.n	80104a0 <etharp_query+0x1c0>
 8010492:	4b2a      	ldr	r3, [pc, #168]	@ (801053c <etharp_query+0x25c>)
 8010494:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010498:	492f      	ldr	r1, [pc, #188]	@ (8010558 <etharp_query+0x278>)
 801049a:	482a      	ldr	r0, [pc, #168]	@ (8010544 <etharp_query+0x264>)
 801049c:	f001 fe8a 	bl	80121b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	7b1b      	ldrb	r3, [r3, #12]
 80104a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d002      	beq.n	80104b2 <etharp_query+0x1d2>
        copy_needed = 1;
 80104ac:	2301      	movs	r3, #1
 80104ae:	61bb      	str	r3, [r7, #24]
        break;
 80104b0:	e005      	b.n	80104be <etharp_query+0x1de>
      }
      p = p->next;
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1df      	bne.n	801047e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d007      	beq.n	80104d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80104ca:	200e      	movs	r0, #14
 80104cc:	f7f9 fcfc 	bl	8009ec8 <pbuf_clone>
 80104d0:	61f8      	str	r0, [r7, #28]
 80104d2:	e004      	b.n	80104de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80104d8:	69f8      	ldr	r0, [r7, #28]
 80104da:	f7f9 fb33 	bl	8009b44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d021      	beq.n	8010528 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80104e4:	7c7a      	ldrb	r2, [r7, #17]
 80104e6:	4918      	ldr	r1, [pc, #96]	@ (8010548 <etharp_query+0x268>)
 80104e8:	4613      	mov	r3, r2
 80104ea:	005b      	lsls	r3, r3, #1
 80104ec:	4413      	add	r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	440b      	add	r3, r1
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00a      	beq.n	801050e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80104f8:	7c7a      	ldrb	r2, [r7, #17]
 80104fa:	4913      	ldr	r1, [pc, #76]	@ (8010548 <etharp_query+0x268>)
 80104fc:	4613      	mov	r3, r2
 80104fe:	005b      	lsls	r3, r3, #1
 8010500:	4413      	add	r3, r2
 8010502:	00db      	lsls	r3, r3, #3
 8010504:	440b      	add	r3, r1
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4618      	mov	r0, r3
 801050a:	f7f9 fa75 	bl	80099f8 <pbuf_free>
      }
      arp_table[i].q = p;
 801050e:	7c7a      	ldrb	r2, [r7, #17]
 8010510:	490d      	ldr	r1, [pc, #52]	@ (8010548 <etharp_query+0x268>)
 8010512:	4613      	mov	r3, r2
 8010514:	005b      	lsls	r3, r3, #1
 8010516:	4413      	add	r3, r2
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	440b      	add	r3, r1
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010526:	e002      	b.n	801052e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010528:	23ff      	movs	r3, #255	@ 0xff
 801052a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801052e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010532:	4618      	mov	r0, r3
 8010534:	3728      	adds	r7, #40	@ 0x28
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	08015438 	.word	0x08015438
 8010540:	080155e4 	.word	0x080155e4
 8010544:	080154b0 	.word	0x080154b0
 8010548:	2000ef8c 	.word	0x2000ef8c
 801054c:	080155f4 	.word	0x080155f4
 8010550:	080155d8 	.word	0x080155d8
 8010554:	2000f07c 	.word	0x2000f07c
 8010558:	0801561c 	.word	0x0801561c

0801055c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08a      	sub	sp, #40	@ 0x28
 8010560:	af02      	add	r7, sp, #8
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
 8010568:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d106      	bne.n	8010582 <etharp_raw+0x26>
 8010574:	4b3a      	ldr	r3, [pc, #232]	@ (8010660 <etharp_raw+0x104>)
 8010576:	f240 4257 	movw	r2, #1111	@ 0x457
 801057a:	493a      	ldr	r1, [pc, #232]	@ (8010664 <etharp_raw+0x108>)
 801057c:	483a      	ldr	r0, [pc, #232]	@ (8010668 <etharp_raw+0x10c>)
 801057e:	f001 fe19 	bl	80121b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010582:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010586:	211c      	movs	r1, #28
 8010588:	200e      	movs	r0, #14
 801058a:	f7f8 ff51 	bl	8009430 <pbuf_alloc>
 801058e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d102      	bne.n	801059c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010596:	f04f 33ff 	mov.w	r3, #4294967295
 801059a:	e05d      	b.n	8010658 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	895b      	ldrh	r3, [r3, #10]
 80105a0:	2b1b      	cmp	r3, #27
 80105a2:	d806      	bhi.n	80105b2 <etharp_raw+0x56>
 80105a4:	4b2e      	ldr	r3, [pc, #184]	@ (8010660 <etharp_raw+0x104>)
 80105a6:	f240 4262 	movw	r2, #1122	@ 0x462
 80105aa:	4930      	ldr	r1, [pc, #192]	@ (801066c <etharp_raw+0x110>)
 80105ac:	482e      	ldr	r0, [pc, #184]	@ (8010668 <etharp_raw+0x10c>)
 80105ae:	f001 fe01 	bl	80121b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80105b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7f7 fe60 	bl	8008280 <lwip_htons>
 80105c0:	4603      	mov	r3, r0
 80105c2:	461a      	mov	r2, r3
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80105ce:	2b06      	cmp	r3, #6
 80105d0:	d006      	beq.n	80105e0 <etharp_raw+0x84>
 80105d2:	4b23      	ldr	r3, [pc, #140]	@ (8010660 <etharp_raw+0x104>)
 80105d4:	f240 4269 	movw	r2, #1129	@ 0x469
 80105d8:	4925      	ldr	r1, [pc, #148]	@ (8010670 <etharp_raw+0x114>)
 80105da:	4823      	ldr	r0, [pc, #140]	@ (8010668 <etharp_raw+0x10c>)
 80105dc:	f001 fdea 	bl	80121b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	3308      	adds	r3, #8
 80105e4:	2206      	movs	r2, #6
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f001 febe 	bl	801236a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	3312      	adds	r3, #18
 80105f2:	2206      	movs	r2, #6
 80105f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 feb7 	bl	801236a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	330e      	adds	r3, #14
 8010600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010602:	6812      	ldr	r2, [r2, #0]
 8010604:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	3318      	adds	r3, #24
 801060a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801060c:	6812      	ldr	r2, [r2, #0]
 801060e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	2200      	movs	r2, #0
 8010618:	f042 0201 	orr.w	r2, r2, #1
 801061c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	2200      	movs	r2, #0
 8010622:	f042 0208 	orr.w	r2, r2, #8
 8010626:	709a      	strb	r2, [r3, #2]
 8010628:	2200      	movs	r2, #0
 801062a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	2206      	movs	r2, #6
 8010630:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2204      	movs	r2, #4
 8010636:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010638:	f640 0306 	movw	r3, #2054	@ 0x806
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	69b9      	ldr	r1, [r7, #24]
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f001 fb7b 	bl	8011d40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801064a:	69b8      	ldr	r0, [r7, #24]
 801064c:	f7f9 f9d4 	bl	80099f8 <pbuf_free>
  p = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010654:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3720      	adds	r7, #32
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	08015438 	.word	0x08015438
 8010664:	08015588 	.word	0x08015588
 8010668:	080154b0 	.word	0x080154b0
 801066c:	08015638 	.word	0x08015638
 8010670:	0801566c 	.word	0x0801566c

08010674 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b088      	sub	sp, #32
 8010678:	af04      	add	r7, sp, #16
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010690:	2201      	movs	r2, #1
 8010692:	9203      	str	r2, [sp, #12]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	9202      	str	r2, [sp, #8]
 8010698:	4a06      	ldr	r2, [pc, #24]	@ (80106b4 <etharp_request_dst+0x40>)
 801069a:	9201      	str	r2, [sp, #4]
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	4603      	mov	r3, r0
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7ff ff5a 	bl	801055c <etharp_raw>
 80106a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	08015c78 	.word	0x08015c78

080106b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80106c2:	4a05      	ldr	r2, [pc, #20]	@ (80106d8 <etharp_request+0x20>)
 80106c4:	6839      	ldr	r1, [r7, #0]
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff ffd4 	bl	8010674 <etharp_request_dst>
 80106cc:	4603      	mov	r3, r0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	08015c70 	.word	0x08015c70

080106dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08e      	sub	sp, #56	@ 0x38
 80106e0:	af04      	add	r7, sp, #16
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80106e6:	4b79      	ldr	r3, [pc, #484]	@ (80108cc <icmp_input+0x1f0>)
 80106e8:	689b      	ldr	r3, [r3, #8]
 80106ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80106ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	f003 030f 	and.w	r3, r3, #15
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80106fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80106fe:	2b13      	cmp	r3, #19
 8010700:	f240 80cd 	bls.w	801089e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	895b      	ldrh	r3, [r3, #10]
 8010708:	2b03      	cmp	r3, #3
 801070a:	f240 80ca 	bls.w	80108a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010718:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801071c:	2b00      	cmp	r3, #0
 801071e:	f000 80b7 	beq.w	8010890 <icmp_input+0x1b4>
 8010722:	2b08      	cmp	r3, #8
 8010724:	f040 80b7 	bne.w	8010896 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010728:	4b69      	ldr	r3, [pc, #420]	@ (80108d0 <icmp_input+0x1f4>)
 801072a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801072c:	4b67      	ldr	r3, [pc, #412]	@ (80108cc <icmp_input+0x1f0>)
 801072e:	695b      	ldr	r3, [r3, #20]
 8010730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010734:	2be0      	cmp	r3, #224	@ 0xe0
 8010736:	f000 80bb 	beq.w	80108b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801073a:	4b64      	ldr	r3, [pc, #400]	@ (80108cc <icmp_input+0x1f0>)
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	4a63      	ldr	r2, [pc, #396]	@ (80108cc <icmp_input+0x1f0>)
 8010740:	6812      	ldr	r2, [r2, #0]
 8010742:	4611      	mov	r1, r2
 8010744:	4618      	mov	r0, r3
 8010746:	f000 fbed 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	f040 80b1 	bne.w	80108b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	891b      	ldrh	r3, [r3, #8]
 8010756:	2b07      	cmp	r3, #7
 8010758:	f240 80a5 	bls.w	80108a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801075c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801075e:	330e      	adds	r3, #14
 8010760:	4619      	mov	r1, r3
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7f9 f8b2 	bl	80098cc <pbuf_add_header>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d04b      	beq.n	8010806 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	891a      	ldrh	r2, [r3, #8]
 8010772:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010774:	4413      	add	r3, r2
 8010776:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	891b      	ldrh	r3, [r3, #8]
 801077c:	8b7a      	ldrh	r2, [r7, #26]
 801077e:	429a      	cmp	r2, r3
 8010780:	f0c0 809a 	bcc.w	80108b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010784:	8b7b      	ldrh	r3, [r7, #26]
 8010786:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801078a:	4619      	mov	r1, r3
 801078c:	200e      	movs	r0, #14
 801078e:	f7f8 fe4f 	bl	8009430 <pbuf_alloc>
 8010792:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	2b00      	cmp	r3, #0
 8010798:	f000 8090 	beq.w	80108bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	895b      	ldrh	r3, [r3, #10]
 80107a0:	461a      	mov	r2, r3
 80107a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80107a4:	3308      	adds	r3, #8
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d203      	bcs.n	80107b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80107aa:	6978      	ldr	r0, [r7, #20]
 80107ac:	f7f9 f924 	bl	80099f8 <pbuf_free>
          goto icmperr;
 80107b0:	e085      	b.n	80108be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80107b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80107ba:	4618      	mov	r0, r3
 80107bc:	f001 fdd5 	bl	801236a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80107c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80107c2:	4619      	mov	r1, r3
 80107c4:	6978      	ldr	r0, [r7, #20]
 80107c6:	f7f9 f891 	bl	80098ec <pbuf_remove_header>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d009      	beq.n	80107e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80107d0:	4b40      	ldr	r3, [pc, #256]	@ (80108d4 <icmp_input+0x1f8>)
 80107d2:	22b6      	movs	r2, #182	@ 0xb6
 80107d4:	4940      	ldr	r1, [pc, #256]	@ (80108d8 <icmp_input+0x1fc>)
 80107d6:	4841      	ldr	r0, [pc, #260]	@ (80108dc <icmp_input+0x200>)
 80107d8:	f001 fcec 	bl	80121b4 <iprintf>
          pbuf_free(r);
 80107dc:	6978      	ldr	r0, [r7, #20]
 80107de:	f7f9 f90b 	bl	80099f8 <pbuf_free>
          goto icmperr;
 80107e2:	e06c      	b.n	80108be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f7f9 fa2a 	bl	8009c40 <pbuf_copy>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d003      	beq.n	80107fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80107f2:	6978      	ldr	r0, [r7, #20]
 80107f4:	f7f9 f900 	bl	80099f8 <pbuf_free>
          goto icmperr;
 80107f8:	e061      	b.n	80108be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7f9 f8fc 	bl	80099f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	607b      	str	r3, [r7, #4]
 8010804:	e00f      	b.n	8010826 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010808:	330e      	adds	r3, #14
 801080a:	4619      	mov	r1, r3
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7f9 f86d 	bl	80098ec <pbuf_remove_header>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d006      	beq.n	8010826 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010818:	4b2e      	ldr	r3, [pc, #184]	@ (80108d4 <icmp_input+0x1f8>)
 801081a:	22c7      	movs	r2, #199	@ 0xc7
 801081c:	4930      	ldr	r1, [pc, #192]	@ (80108e0 <icmp_input+0x204>)
 801081e:	482f      	ldr	r0, [pc, #188]	@ (80108dc <icmp_input+0x200>)
 8010820:	f001 fcc8 	bl	80121b4 <iprintf>
          goto icmperr;
 8010824:	e04b      	b.n	80108be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801082c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7f9 f84b 	bl	80098cc <pbuf_add_header>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d12b      	bne.n	8010894 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801084a:	4b20      	ldr	r3, [pc, #128]	@ (80108cc <icmp_input+0x1f0>)
 801084c:	691a      	ldr	r2, [r3, #16]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	2200      	movs	r2, #0
 801085c:	709a      	strb	r2, [r3, #2]
 801085e:	2200      	movs	r2, #0
 8010860:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	22ff      	movs	r2, #255	@ 0xff
 8010866:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	729a      	strb	r2, [r3, #10]
 801086e:	2200      	movs	r2, #0
 8010870:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	9302      	str	r3, [sp, #8]
 8010876:	2301      	movs	r3, #1
 8010878:	9301      	str	r3, [sp, #4]
 801087a:	2300      	movs	r3, #0
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	23ff      	movs	r3, #255	@ 0xff
 8010880:	2200      	movs	r2, #0
 8010882:	69f9      	ldr	r1, [r7, #28]
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 fa75 	bl	8010d74 <ip4_output_if>
 801088a:	4603      	mov	r3, r0
 801088c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801088e:	e001      	b.n	8010894 <icmp_input+0x1b8>
      break;
 8010890:	bf00      	nop
 8010892:	e000      	b.n	8010896 <icmp_input+0x1ba>
      break;
 8010894:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7f9 f8ae 	bl	80099f8 <pbuf_free>
  return;
 801089c:	e013      	b.n	80108c6 <icmp_input+0x1ea>
    goto lenerr;
 801089e:	bf00      	nop
 80108a0:	e002      	b.n	80108a8 <icmp_input+0x1cc>
    goto lenerr;
 80108a2:	bf00      	nop
 80108a4:	e000      	b.n	80108a8 <icmp_input+0x1cc>
        goto lenerr;
 80108a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7f9 f8a5 	bl	80099f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108ae:	e00a      	b.n	80108c6 <icmp_input+0x1ea>
        goto icmperr;
 80108b0:	bf00      	nop
 80108b2:	e004      	b.n	80108be <icmp_input+0x1e2>
        goto icmperr;
 80108b4:	bf00      	nop
 80108b6:	e002      	b.n	80108be <icmp_input+0x1e2>
          goto icmperr;
 80108b8:	bf00      	nop
 80108ba:	e000      	b.n	80108be <icmp_input+0x1e2>
          goto icmperr;
 80108bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f7f9 f89a 	bl	80099f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80108c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80108c6:	3728      	adds	r7, #40	@ 0x28
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20007bb0 	.word	0x20007bb0
 80108d0:	20007bc4 	.word	0x20007bc4
 80108d4:	080156b0 	.word	0x080156b0
 80108d8:	080156e8 	.word	0x080156e8
 80108dc:	08015720 	.word	0x08015720
 80108e0:	08015748 	.word	0x08015748

080108e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80108f0:	78fb      	ldrb	r3, [r7, #3]
 80108f2:	461a      	mov	r2, r3
 80108f4:	2103      	movs	r1, #3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f814 	bl	8010924 <icmp_send_response>
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010910:	78fb      	ldrb	r3, [r7, #3]
 8010912:	461a      	mov	r2, r3
 8010914:	210b      	movs	r1, #11
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 f804 	bl	8010924 <icmp_send_response>
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b08c      	sub	sp, #48	@ 0x30
 8010928:	af04      	add	r7, sp, #16
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	460b      	mov	r3, r1
 801092e:	70fb      	strb	r3, [r7, #3]
 8010930:	4613      	mov	r3, r2
 8010932:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010934:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010938:	2124      	movs	r1, #36	@ 0x24
 801093a:	2022      	movs	r0, #34	@ 0x22
 801093c:	f7f8 fd78 	bl	8009430 <pbuf_alloc>
 8010940:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d04c      	beq.n	80109e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	895b      	ldrh	r3, [r3, #10]
 801094c:	2b23      	cmp	r3, #35	@ 0x23
 801094e:	d806      	bhi.n	801095e <icmp_send_response+0x3a>
 8010950:	4b26      	ldr	r3, [pc, #152]	@ (80109ec <icmp_send_response+0xc8>)
 8010952:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010956:	4926      	ldr	r1, [pc, #152]	@ (80109f0 <icmp_send_response+0xcc>)
 8010958:	4826      	ldr	r0, [pc, #152]	@ (80109f4 <icmp_send_response+0xd0>)
 801095a:	f001 fc2b 	bl	80121b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	78fa      	ldrb	r2, [r7, #3]
 801096e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	78ba      	ldrb	r2, [r7, #2]
 8010974:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	2200      	movs	r2, #0
 801097a:	711a      	strb	r2, [r3, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2200      	movs	r2, #0
 8010984:	719a      	strb	r2, [r3, #6]
 8010986:	2200      	movs	r2, #0
 8010988:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	f103 0008 	add.w	r0, r3, #8
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	221c      	movs	r2, #28
 8010998:	4619      	mov	r1, r3
 801099a:	f001 fce6 	bl	801236a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801099e:	69bb      	ldr	r3, [r7, #24]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80109a4:	f107 030c 	add.w	r3, r7, #12
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f825 	bl	80109f8 <ip4_route>
 80109ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d011      	beq.n	80109da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2200      	movs	r2, #0
 80109ba:	709a      	strb	r2, [r3, #2]
 80109bc:	2200      	movs	r2, #0
 80109be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80109c0:	f107 020c 	add.w	r2, r7, #12
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	9302      	str	r3, [sp, #8]
 80109c8:	2301      	movs	r3, #1
 80109ca:	9301      	str	r3, [sp, #4]
 80109cc:	2300      	movs	r3, #0
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	23ff      	movs	r3, #255	@ 0xff
 80109d2:	2100      	movs	r1, #0
 80109d4:	69f8      	ldr	r0, [r7, #28]
 80109d6:	f000 f9cd 	bl	8010d74 <ip4_output_if>
  }
  pbuf_free(q);
 80109da:	69f8      	ldr	r0, [r7, #28]
 80109dc:	f7f9 f80c 	bl	80099f8 <pbuf_free>
 80109e0:	e000      	b.n	80109e4 <icmp_send_response+0xc0>
    return;
 80109e2:	bf00      	nop
}
 80109e4:	3720      	adds	r7, #32
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	080156b0 	.word	0x080156b0
 80109f0:	0801577c 	.word	0x0801577c
 80109f4:	08015720 	.word	0x08015720

080109f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010a00:	4b33      	ldr	r3, [pc, #204]	@ (8010ad0 <ip4_route+0xd8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	e036      	b.n	8010a76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a0e:	f003 0301 	and.w	r3, r3, #1
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d02b      	beq.n	8010a70 <ip4_route+0x78>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a1e:	089b      	lsrs	r3, r3, #2
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d022      	beq.n	8010a70 <ip4_route+0x78>
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01d      	beq.n	8010a70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	405a      	eors	r2, r3
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	3308      	adds	r3, #8
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4013      	ands	r3, r2
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d101      	bne.n	8010a50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	e038      	b.n	8010ac2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a56:	f003 0302 	and.w	r3, r3, #2
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d108      	bne.n	8010a70 <ip4_route+0x78>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	330c      	adds	r3, #12
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d101      	bne.n	8010a70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	e028      	b.n	8010ac2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1c5      	bne.n	8010a08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010a7c:	4b15      	ldr	r3, [pc, #84]	@ (8010ad4 <ip4_route+0xdc>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d01a      	beq.n	8010aba <ip4_route+0xc2>
 8010a84:	4b13      	ldr	r3, [pc, #76]	@ (8010ad4 <ip4_route+0xdc>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d012      	beq.n	8010aba <ip4_route+0xc2>
 8010a94:	4b0f      	ldr	r3, [pc, #60]	@ (8010ad4 <ip4_route+0xdc>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a9c:	f003 0304 	and.w	r3, r3, #4
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00a      	beq.n	8010aba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8010ad4 <ip4_route+0xdc>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	3304      	adds	r3, #4
 8010aaa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d004      	beq.n	8010aba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ab8:	d101      	bne.n	8010abe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	e001      	b.n	8010ac2 <ip4_route+0xca>
  }

  return netif_default;
 8010abe:	4b05      	ldr	r3, [pc, #20]	@ (8010ad4 <ip4_route+0xdc>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	2000ef20 	.word	0x2000ef20
 8010ad4:	2000ef24 	.word	0x2000ef24

08010ad8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ae6:	f003 0301 	and.w	r3, r3, #1
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d016      	beq.n	8010b1e <ip4_input_accept+0x46>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	3304      	adds	r3, #4
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d011      	beq.n	8010b1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010afa:	4b0b      	ldr	r3, [pc, #44]	@ (8010b28 <ip4_input_accept+0x50>)
 8010afc:	695a      	ldr	r2, [r3, #20]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3304      	adds	r3, #4
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d008      	beq.n	8010b1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010b08:	4b07      	ldr	r3, [pc, #28]	@ (8010b28 <ip4_input_accept+0x50>)
 8010b0a:	695b      	ldr	r3, [r3, #20]
 8010b0c:	6879      	ldr	r1, [r7, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f000 fa08 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 8010b14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e000      	b.n	8010b20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	20007bb0 	.word	0x20007bb0

08010b2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	091b      	lsrs	r3, r3, #4
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b04      	cmp	r3, #4
 8010b46:	d004      	beq.n	8010b52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7f8 ff55 	bl	80099f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e107      	b.n	8010d62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	f003 030f 	and.w	r3, r3, #15
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	885b      	ldrh	r3, [r3, #2]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7f7 fb89 	bl	8008280 <lwip_htons>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	89ba      	ldrh	r2, [r7, #12]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d204      	bcs.n	8010b86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010b7c:	89bb      	ldrh	r3, [r7, #12]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7f8 fdb3 	bl	80096ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	895b      	ldrh	r3, [r3, #10]
 8010b8a:	89fa      	ldrh	r2, [r7, #14]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d807      	bhi.n	8010ba0 <ip4_input+0x74>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	891b      	ldrh	r3, [r3, #8]
 8010b94:	89ba      	ldrh	r2, [r7, #12]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d802      	bhi.n	8010ba0 <ip4_input+0x74>
 8010b9a:	89fb      	ldrh	r3, [r7, #14]
 8010b9c:	2b13      	cmp	r3, #19
 8010b9e:	d804      	bhi.n	8010baa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7f8 ff29 	bl	80099f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e0db      	b.n	8010d62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	691b      	ldr	r3, [r3, #16]
 8010bae:	4a6f      	ldr	r2, [pc, #444]	@ (8010d6c <ip4_input+0x240>)
 8010bb0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8010d6c <ip4_input+0x240>)
 8010bb8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010bba:	4b6c      	ldr	r3, [pc, #432]	@ (8010d6c <ip4_input+0x240>)
 8010bbc:	695b      	ldr	r3, [r3, #20]
 8010bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010bc2:	2be0      	cmp	r3, #224	@ 0xe0
 8010bc4:	d112      	bne.n	8010bec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010bcc:	f003 0301 	and.w	r3, r3, #1
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d007      	beq.n	8010be6 <ip4_input+0xba>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	3304      	adds	r3, #4
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <ip4_input+0xba>
      netif = inp;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	613b      	str	r3, [r7, #16]
 8010be4:	e02a      	b.n	8010c3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	613b      	str	r3, [r7, #16]
 8010bea:	e027      	b.n	8010c3c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010bec:	6838      	ldr	r0, [r7, #0]
 8010bee:	f7ff ff73 	bl	8010ad8 <ip4_input_accept>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <ip4_input+0xd2>
      netif = inp;
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	613b      	str	r3, [r7, #16]
 8010bfc:	e01e      	b.n	8010c3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010c02:	4b5a      	ldr	r3, [pc, #360]	@ (8010d6c <ip4_input+0x240>)
 8010c04:	695b      	ldr	r3, [r3, #20]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8010c0a:	d017      	beq.n	8010c3c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010c0c:	4b58      	ldr	r3, [pc, #352]	@ (8010d70 <ip4_input+0x244>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	613b      	str	r3, [r7, #16]
 8010c12:	e00e      	b.n	8010c32 <ip4_input+0x106>
          if (netif == inp) {
 8010c14:	693a      	ldr	r2, [r7, #16]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d006      	beq.n	8010c2a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010c1c:	6938      	ldr	r0, [r7, #16]
 8010c1e:	f7ff ff5b 	bl	8010ad8 <ip4_input_accept>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d108      	bne.n	8010c3a <ip4_input+0x10e>
 8010c28:	e000      	b.n	8010c2c <ip4_input+0x100>
            continue;
 8010c2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	613b      	str	r3, [r7, #16]
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1ed      	bne.n	8010c14 <ip4_input+0xe8>
 8010c38:	e000      	b.n	8010c3c <ip4_input+0x110>
            break;
 8010c3a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8010d6c <ip4_input+0x240>)
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	6839      	ldr	r1, [r7, #0]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f96e 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010c4e:	4b47      	ldr	r3, [pc, #284]	@ (8010d6c <ip4_input+0x240>)
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010c56:	2be0      	cmp	r3, #224	@ 0xe0
 8010c58:	d104      	bne.n	8010c64 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7f8 fecc 	bl	80099f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010c60:	2300      	movs	r3, #0
 8010c62:	e07e      	b.n	8010d62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d104      	bne.n	8010c74 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7f8 fec4 	bl	80099f8 <pbuf_free>
    return ERR_OK;
 8010c70:	2300      	movs	r3, #0
 8010c72:	e076      	b.n	8010d62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	88db      	ldrh	r3, [r3, #6]
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010c80:	4013      	ands	r3, r2
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00b      	beq.n	8010c9e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fc92 	bl	80115b0 <ip4_reass>
 8010c8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d101      	bne.n	8010c98 <ip4_input+0x16c>
      return ERR_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	e064      	b.n	8010d62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010c9e:	4a33      	ldr	r2, [pc, #204]	@ (8010d6c <ip4_input+0x240>)
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010ca4:	4a31      	ldr	r2, [pc, #196]	@ (8010d6c <ip4_input+0x240>)
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010caa:	4a30      	ldr	r2, [pc, #192]	@ (8010d6c <ip4_input+0x240>)
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	f003 030f 	and.w	r3, r3, #15
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8010d6c <ip4_input+0x240>)
 8010cc2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010cc4:	89fb      	ldrh	r3, [r7, #14]
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7f8 fe0f 	bl	80098ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	7a5b      	ldrb	r3, [r3, #9]
 8010cd2:	2b11      	cmp	r3, #17
 8010cd4:	d006      	beq.n	8010ce4 <ip4_input+0x1b8>
 8010cd6:	2b11      	cmp	r3, #17
 8010cd8:	dc13      	bgt.n	8010d02 <ip4_input+0x1d6>
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d00c      	beq.n	8010cf8 <ip4_input+0x1cc>
 8010cde:	2b06      	cmp	r3, #6
 8010ce0:	d005      	beq.n	8010cee <ip4_input+0x1c2>
 8010ce2:	e00e      	b.n	8010d02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010ce4:	6839      	ldr	r1, [r7, #0]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f7fe fc68 	bl	800f5bc <udp_input>
        break;
 8010cec:	e026      	b.n	8010d3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f7fa fcb7 	bl	800b664 <tcp_input>
        break;
 8010cf6:	e021      	b.n	8010d3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff fcee 	bl	80106dc <icmp_input>
        break;
 8010d00:	e01c      	b.n	8010d3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d02:	4b1a      	ldr	r3, [pc, #104]	@ (8010d6c <ip4_input+0x240>)
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	6939      	ldr	r1, [r7, #16]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 f90b 	bl	8010f24 <ip4_addr_isbroadcast_u32>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10f      	bne.n	8010d34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010d14:	4b15      	ldr	r3, [pc, #84]	@ (8010d6c <ip4_input+0x240>)
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010d1c:	2be0      	cmp	r3, #224	@ 0xe0
 8010d1e:	d009      	beq.n	8010d34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010d24:	4619      	mov	r1, r3
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7f8 fe53 	bl	80099d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010d2c:	2102      	movs	r1, #2
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff fdd8 	bl	80108e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7f8 fe5f 	bl	80099f8 <pbuf_free>
        break;
 8010d3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8010d6c <ip4_input+0x240>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010d42:	4b0a      	ldr	r3, [pc, #40]	@ (8010d6c <ip4_input+0x240>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010d48:	4b08      	ldr	r3, [pc, #32]	@ (8010d6c <ip4_input+0x240>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010d4e:	4b07      	ldr	r3, [pc, #28]	@ (8010d6c <ip4_input+0x240>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010d54:	4b05      	ldr	r3, [pc, #20]	@ (8010d6c <ip4_input+0x240>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010d5a:	4b04      	ldr	r3, [pc, #16]	@ (8010d6c <ip4_input+0x240>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010d60:	2300      	movs	r3, #0
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3718      	adds	r7, #24
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	20007bb0 	.word	0x20007bb0
 8010d70:	2000ef20 	.word	0x2000ef20

08010d74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b08a      	sub	sp, #40	@ 0x28
 8010d78:	af04      	add	r7, sp, #16
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
 8010d80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d009      	beq.n	8010da0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <ip4_output_if+0x26>
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9c:	3304      	adds	r3, #4
 8010d9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010da0:	78fa      	ldrb	r2, [r7, #3]
 8010da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da4:	9302      	str	r3, [sp, #8]
 8010da6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4613      	mov	r3, r2
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	6979      	ldr	r1, [r7, #20]
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f000 f805 	bl	8010dc8 <ip4_output_if_src>
 8010dbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3718      	adds	r7, #24
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	7b9b      	ldrb	r3, [r3, #14]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d006      	beq.n	8010dec <ip4_output_if_src+0x24>
 8010dde:	4b4b      	ldr	r3, [pc, #300]	@ (8010f0c <ip4_output_if_src+0x144>)
 8010de0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010de4:	494a      	ldr	r1, [pc, #296]	@ (8010f10 <ip4_output_if_src+0x148>)
 8010de6:	484b      	ldr	r0, [pc, #300]	@ (8010f14 <ip4_output_if_src+0x14c>)
 8010de8:	f001 f9e4 	bl	80121b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d060      	beq.n	8010eb4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010df2:	2314      	movs	r3, #20
 8010df4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010df6:	2114      	movs	r1, #20
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f7f8 fd67 	bl	80098cc <pbuf_add_header>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010e04:	f06f 0301 	mvn.w	r3, #1
 8010e08:	e07c      	b.n	8010f04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	895b      	ldrh	r3, [r3, #10]
 8010e14:	2b13      	cmp	r3, #19
 8010e16:	d806      	bhi.n	8010e26 <ip4_output_if_src+0x5e>
 8010e18:	4b3c      	ldr	r3, [pc, #240]	@ (8010f0c <ip4_output_if_src+0x144>)
 8010e1a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010e1e:	493e      	ldr	r1, [pc, #248]	@ (8010f18 <ip4_output_if_src+0x150>)
 8010e20:	483c      	ldr	r0, [pc, #240]	@ (8010f14 <ip4_output_if_src+0x14c>)
 8010e22:	f001 f9c7 	bl	80121b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	78fa      	ldrb	r2, [r7, #3]
 8010e2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010e32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010e3c:	8b7b      	ldrh	r3, [r7, #26]
 8010e3e:	089b      	lsrs	r3, r3, #2
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010e54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	891b      	ldrh	r3, [r3, #8]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7f7 fa10 	bl	8008280 <lwip_htons>
 8010e60:	4603      	mov	r3, r0
 8010e62:	461a      	mov	r2, r3
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	719a      	strb	r2, [r3, #6]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010e72:	4b2a      	ldr	r3, [pc, #168]	@ (8010f1c <ip4_output_if_src+0x154>)
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7f7 fa02 	bl	8008280 <lwip_htons>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	461a      	mov	r2, r3
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010e84:	4b25      	ldr	r3, [pc, #148]	@ (8010f1c <ip4_output_if_src+0x154>)
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	4b23      	ldr	r3, [pc, #140]	@ (8010f1c <ip4_output_if_src+0x154>)
 8010e8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d104      	bne.n	8010ea0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010e96:	4b22      	ldr	r3, [pc, #136]	@ (8010f20 <ip4_output_if_src+0x158>)
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	60da      	str	r2, [r3, #12]
 8010e9e:	e003      	b.n	8010ea8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	729a      	strb	r2, [r3, #10]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	72da      	strb	r2, [r3, #11]
 8010eb2:	e00f      	b.n	8010ed4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	2b13      	cmp	r3, #19
 8010eba:	d802      	bhi.n	8010ec2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010ebc:	f06f 0301 	mvn.w	r3, #1
 8010ec0:	e020      	b.n	8010f04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	691b      	ldr	r3, [r3, #16]
 8010ecc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010ece:	f107 0314 	add.w	r3, r7, #20
 8010ed2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00c      	beq.n	8010ef6 <ip4_output_if_src+0x12e>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	891a      	ldrh	r2, [r3, #8]
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ee2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d906      	bls.n	8010ef6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f000 fd53 	bl	8011998 <ip4_frag>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	e006      	b.n	8010f04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef8:	695b      	ldr	r3, [r3, #20]
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	68f9      	ldr	r1, [r7, #12]
 8010efe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f00:	4798      	blx	r3
 8010f02:	4603      	mov	r3, r0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3720      	adds	r7, #32
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	080157a8 	.word	0x080157a8
 8010f10:	080157dc 	.word	0x080157dc
 8010f14:	080157e8 	.word	0x080157e8
 8010f18:	08015810 	.word	0x08015810
 8010f1c:	2000f07e 	.word	0x2000f07e
 8010f20:	08015c6c 	.word	0x08015c6c

08010f24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f38:	d002      	beq.n	8010f40 <ip4_addr_isbroadcast_u32+0x1c>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010f40:	2301      	movs	r3, #1
 8010f42:	e02a      	b.n	8010f9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f4a:	f003 0302 	and.w	r3, r3, #2
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	e021      	b.n	8010f9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	3304      	adds	r3, #4
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d101      	bne.n	8010f66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010f62:	2300      	movs	r3, #0
 8010f64:	e019      	b.n	8010f9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	405a      	eors	r2, r3
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	3308      	adds	r3, #8
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4013      	ands	r3, r2
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10d      	bne.n	8010f98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	3308      	adds	r3, #8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	43da      	mvns	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	3308      	adds	r3, #8
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d101      	bne.n	8010f98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010f98:	2300      	movs	r3, #0
  }
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
	...

08010fa8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010fb2:	4b12      	ldr	r3, [pc, #72]	@ (8010ffc <ip_reass_tmr+0x54>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010fb8:	e018      	b.n	8010fec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	7fdb      	ldrb	r3, [r3, #31]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d00b      	beq.n	8010fda <ip_reass_tmr+0x32>
      r->timer--;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	7fdb      	ldrb	r3, [r3, #31]
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	b2da      	uxtb	r2, r3
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]
 8010fd8:	e008      	b.n	8010fec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010fe4:	68b9      	ldr	r1, [r7, #8]
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f80a 	bl	8011000 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1e3      	bne.n	8010fba <ip_reass_tmr+0x12>
    }
  }
}
 8010ff2:	bf00      	nop
 8010ff4:	bf00      	nop
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	2000f080 	.word	0x2000f080

08011000 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b088      	sub	sp, #32
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801100a:	2300      	movs	r3, #0
 801100c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	429a      	cmp	r2, r3
 8011014:	d105      	bne.n	8011022 <ip_reass_free_complete_datagram+0x22>
 8011016:	4b45      	ldr	r3, [pc, #276]	@ (801112c <ip_reass_free_complete_datagram+0x12c>)
 8011018:	22ab      	movs	r2, #171	@ 0xab
 801101a:	4945      	ldr	r1, [pc, #276]	@ (8011130 <ip_reass_free_complete_datagram+0x130>)
 801101c:	4845      	ldr	r0, [pc, #276]	@ (8011134 <ip_reass_free_complete_datagram+0x134>)
 801101e:	f001 f8c9 	bl	80121b4 <iprintf>
  if (prev != NULL) {
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00a      	beq.n	801103e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	429a      	cmp	r2, r3
 8011030:	d005      	beq.n	801103e <ip_reass_free_complete_datagram+0x3e>
 8011032:	4b3e      	ldr	r3, [pc, #248]	@ (801112c <ip_reass_free_complete_datagram+0x12c>)
 8011034:	22ad      	movs	r2, #173	@ 0xad
 8011036:	4940      	ldr	r1, [pc, #256]	@ (8011138 <ip_reass_free_complete_datagram+0x138>)
 8011038:	483e      	ldr	r0, [pc, #248]	@ (8011134 <ip_reass_free_complete_datagram+0x134>)
 801103a:	f001 f8bb 	bl	80121b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	889b      	ldrh	r3, [r3, #4]
 801104a:	b29b      	uxth	r3, r3
 801104c:	2b00      	cmp	r3, #0
 801104e:	d12a      	bne.n	80110a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	6858      	ldr	r0, [r3, #4]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3308      	adds	r3, #8
 8011066:	2214      	movs	r2, #20
 8011068:	4619      	mov	r1, r3
 801106a:	f001 f97e 	bl	801236a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801106e:	2101      	movs	r1, #1
 8011070:	69b8      	ldr	r0, [r7, #24]
 8011072:	f7ff fc47 	bl	8010904 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011076:	69b8      	ldr	r0, [r7, #24]
 8011078:	f7f8 fd4c 	bl	8009b14 <pbuf_clen>
 801107c:	4603      	mov	r3, r0
 801107e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011080:	8bfa      	ldrh	r2, [r7, #30]
 8011082:	8a7b      	ldrh	r3, [r7, #18]
 8011084:	4413      	add	r3, r2
 8011086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801108a:	db05      	blt.n	8011098 <ip_reass_free_complete_datagram+0x98>
 801108c:	4b27      	ldr	r3, [pc, #156]	@ (801112c <ip_reass_free_complete_datagram+0x12c>)
 801108e:	22bc      	movs	r2, #188	@ 0xbc
 8011090:	492a      	ldr	r1, [pc, #168]	@ (801113c <ip_reass_free_complete_datagram+0x13c>)
 8011092:	4828      	ldr	r0, [pc, #160]	@ (8011134 <ip_reass_free_complete_datagram+0x134>)
 8011094:	f001 f88e 	bl	80121b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011098:	8bfa      	ldrh	r2, [r7, #30]
 801109a:	8a7b      	ldrh	r3, [r7, #18]
 801109c:	4413      	add	r3, r2
 801109e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80110a0:	69b8      	ldr	r0, [r7, #24]
 80110a2:	f7f8 fca9 	bl	80099f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80110ac:	e01f      	b.n	80110ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80110be:	68f8      	ldr	r0, [r7, #12]
 80110c0:	f7f8 fd28 	bl	8009b14 <pbuf_clen>
 80110c4:	4603      	mov	r3, r0
 80110c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110c8:	8bfa      	ldrh	r2, [r7, #30]
 80110ca:	8a7b      	ldrh	r3, [r7, #18]
 80110cc:	4413      	add	r3, r2
 80110ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110d2:	db05      	blt.n	80110e0 <ip_reass_free_complete_datagram+0xe0>
 80110d4:	4b15      	ldr	r3, [pc, #84]	@ (801112c <ip_reass_free_complete_datagram+0x12c>)
 80110d6:	22cc      	movs	r2, #204	@ 0xcc
 80110d8:	4918      	ldr	r1, [pc, #96]	@ (801113c <ip_reass_free_complete_datagram+0x13c>)
 80110da:	4816      	ldr	r0, [pc, #88]	@ (8011134 <ip_reass_free_complete_datagram+0x134>)
 80110dc:	f001 f86a 	bl	80121b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80110e0:	8bfa      	ldrh	r2, [r7, #30]
 80110e2:	8a7b      	ldrh	r3, [r7, #18]
 80110e4:	4413      	add	r3, r2
 80110e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7f8 fc85 	bl	80099f8 <pbuf_free>
  while (p != NULL) {
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1dc      	bne.n	80110ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f8c2 	bl	8011280 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80110fc:	4b10      	ldr	r3, [pc, #64]	@ (8011140 <ip_reass_free_complete_datagram+0x140>)
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	8bfa      	ldrh	r2, [r7, #30]
 8011102:	429a      	cmp	r2, r3
 8011104:	d905      	bls.n	8011112 <ip_reass_free_complete_datagram+0x112>
 8011106:	4b09      	ldr	r3, [pc, #36]	@ (801112c <ip_reass_free_complete_datagram+0x12c>)
 8011108:	22d2      	movs	r2, #210	@ 0xd2
 801110a:	490e      	ldr	r1, [pc, #56]	@ (8011144 <ip_reass_free_complete_datagram+0x144>)
 801110c:	4809      	ldr	r0, [pc, #36]	@ (8011134 <ip_reass_free_complete_datagram+0x134>)
 801110e:	f001 f851 	bl	80121b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011112:	4b0b      	ldr	r3, [pc, #44]	@ (8011140 <ip_reass_free_complete_datagram+0x140>)
 8011114:	881a      	ldrh	r2, [r3, #0]
 8011116:	8bfb      	ldrh	r3, [r7, #30]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	b29a      	uxth	r2, r3
 801111c:	4b08      	ldr	r3, [pc, #32]	@ (8011140 <ip_reass_free_complete_datagram+0x140>)
 801111e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011120:	8bfb      	ldrh	r3, [r7, #30]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3720      	adds	r7, #32
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	08015840 	.word	0x08015840
 8011130:	0801587c 	.word	0x0801587c
 8011134:	08015888 	.word	0x08015888
 8011138:	080158b0 	.word	0x080158b0
 801113c:	080158c4 	.word	0x080158c4
 8011140:	2000f084 	.word	0x2000f084
 8011144:	080158e4 	.word	0x080158e4

08011148 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b08a      	sub	sp, #40	@ 0x28
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011152:	2300      	movs	r3, #0
 8011154:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801115a:	2300      	movs	r3, #0
 801115c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801115e:	2300      	movs	r3, #0
 8011160:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011166:	4b28      	ldr	r3, [pc, #160]	@ (8011208 <ip_reass_remove_oldest_datagram+0xc0>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801116c:	e030      	b.n	80111d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011170:	695a      	ldr	r2, [r3, #20]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	429a      	cmp	r2, r3
 8011178:	d10c      	bne.n	8011194 <ip_reass_remove_oldest_datagram+0x4c>
 801117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801117c:	699a      	ldr	r2, [r3, #24]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	691b      	ldr	r3, [r3, #16]
 8011182:	429a      	cmp	r2, r3
 8011184:	d106      	bne.n	8011194 <ip_reass_remove_oldest_datagram+0x4c>
 8011186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011188:	899a      	ldrh	r2, [r3, #12]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	889b      	ldrh	r3, [r3, #4]
 801118e:	b29b      	uxth	r3, r3
 8011190:	429a      	cmp	r2, r3
 8011192:	d014      	beq.n	80111be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	3301      	adds	r3, #1
 8011198:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d104      	bne.n	80111aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	61bb      	str	r3, [r7, #24]
 80111a8:	e009      	b.n	80111be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80111aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ac:	7fda      	ldrb	r2, [r3, #31]
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	7fdb      	ldrb	r3, [r3, #31]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d803      	bhi.n	80111be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80111b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80111ba:	69fb      	ldr	r3, [r7, #28]
 80111bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80111be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80111c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80111ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1cb      	bne.n	801116e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80111d6:	6a3b      	ldr	r3, [r7, #32]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d008      	beq.n	80111ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80111dc:	69b9      	ldr	r1, [r7, #24]
 80111de:	6a38      	ldr	r0, [r7, #32]
 80111e0:	f7ff ff0e 	bl	8011000 <ip_reass_free_complete_datagram>
 80111e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	4413      	add	r3, r2
 80111ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	da02      	bge.n	80111fc <ip_reass_remove_oldest_datagram+0xb4>
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	dcac      	bgt.n	8011156 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80111fc:	697b      	ldr	r3, [r7, #20]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3728      	adds	r7, #40	@ 0x28
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	2000f080 	.word	0x2000f080

0801120c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011216:	2004      	movs	r0, #4
 8011218:	f7f7 fcf8 	bl	8008c0c <memp_malloc>
 801121c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d110      	bne.n	8011246 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff ff8e 	bl	8011148 <ip_reass_remove_oldest_datagram>
 801122c:	4602      	mov	r2, r0
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	4293      	cmp	r3, r2
 8011232:	dc03      	bgt.n	801123c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011234:	2004      	movs	r0, #4
 8011236:	f7f7 fce9 	bl	8008c0c <memp_malloc>
 801123a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011242:	2300      	movs	r3, #0
 8011244:	e016      	b.n	8011274 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011246:	2220      	movs	r2, #32
 8011248:	2100      	movs	r1, #0
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f001 f817 	bl	801227e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	220f      	movs	r2, #15
 8011254:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011256:	4b09      	ldr	r3, [pc, #36]	@ (801127c <ip_reass_enqueue_new_datagram+0x70>)
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801125e:	4a07      	ldr	r2, [pc, #28]	@ (801127c <ip_reass_enqueue_new_datagram+0x70>)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3308      	adds	r3, #8
 8011268:	2214      	movs	r2, #20
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	4618      	mov	r0, r3
 801126e:	f001 f87c 	bl	801236a <memcpy>
  return ipr;
 8011272:	68fb      	ldr	r3, [r7, #12]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	2000f080 	.word	0x2000f080

08011280 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801128a:	4b10      	ldr	r3, [pc, #64]	@ (80112cc <ip_reass_dequeue_datagram+0x4c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	429a      	cmp	r2, r3
 8011292:	d104      	bne.n	801129e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a0c      	ldr	r2, [pc, #48]	@ (80112cc <ip_reass_dequeue_datagram+0x4c>)
 801129a:	6013      	str	r3, [r2, #0]
 801129c:	e00d      	b.n	80112ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d106      	bne.n	80112b2 <ip_reass_dequeue_datagram+0x32>
 80112a4:	4b0a      	ldr	r3, [pc, #40]	@ (80112d0 <ip_reass_dequeue_datagram+0x50>)
 80112a6:	f240 1245 	movw	r2, #325	@ 0x145
 80112aa:	490a      	ldr	r1, [pc, #40]	@ (80112d4 <ip_reass_dequeue_datagram+0x54>)
 80112ac:	480a      	ldr	r0, [pc, #40]	@ (80112d8 <ip_reass_dequeue_datagram+0x58>)
 80112ae:	f000 ff81 	bl	80121b4 <iprintf>
    prev->next = ipr->next;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80112ba:	6879      	ldr	r1, [r7, #4]
 80112bc:	2004      	movs	r0, #4
 80112be:	f7f7 fcf7 	bl	8008cb0 <memp_free>
}
 80112c2:	bf00      	nop
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	2000f080 	.word	0x2000f080
 80112d0:	08015840 	.word	0x08015840
 80112d4:	08015908 	.word	0x08015908
 80112d8:	08015888 	.word	0x08015888

080112dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b08c      	sub	sp, #48	@ 0x30
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80112e8:	2300      	movs	r3, #0
 80112ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80112ec:	2301      	movs	r3, #1
 80112ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80112f6:	69fb      	ldr	r3, [r7, #28]
 80112f8:	885b      	ldrh	r3, [r3, #2]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f6 ffbf 	bl	8008280 <lwip_htons>
 8011302:	4603      	mov	r3, r0
 8011304:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f003 030f 	and.w	r3, r3, #15
 801130e:	b2db      	uxtb	r3, r3
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011314:	7e7b      	ldrb	r3, [r7, #25]
 8011316:	b29b      	uxth	r3, r3
 8011318:	8b7a      	ldrh	r2, [r7, #26]
 801131a:	429a      	cmp	r2, r3
 801131c:	d202      	bcs.n	8011324 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801131e:	f04f 33ff 	mov.w	r3, #4294967295
 8011322:	e135      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011324:	7e7b      	ldrb	r3, [r7, #25]
 8011326:	b29b      	uxth	r3, r3
 8011328:	8b7a      	ldrh	r2, [r7, #26]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	88db      	ldrh	r3, [r3, #6]
 8011332:	b29b      	uxth	r3, r3
 8011334:	4618      	mov	r0, r3
 8011336:	f7f6 ffa3 	bl	8008280 <lwip_htons>
 801133a:	4603      	mov	r3, r0
 801133c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011340:	b29b      	uxth	r3, r3
 8011342:	00db      	lsls	r3, r3, #3
 8011344:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134e:	2200      	movs	r2, #0
 8011350:	701a      	strb	r2, [r3, #0]
 8011352:	2200      	movs	r2, #0
 8011354:	705a      	strb	r2, [r3, #1]
 8011356:	2200      	movs	r2, #0
 8011358:	709a      	strb	r2, [r3, #2]
 801135a:	2200      	movs	r2, #0
 801135c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801135e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011360:	8afa      	ldrh	r2, [r7, #22]
 8011362:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011364:	8afa      	ldrh	r2, [r7, #22]
 8011366:	8b7b      	ldrh	r3, [r7, #26]
 8011368:	4413      	add	r3, r2
 801136a:	b29a      	uxth	r2, r3
 801136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	88db      	ldrh	r3, [r3, #6]
 8011374:	b29b      	uxth	r3, r3
 8011376:	8afa      	ldrh	r2, [r7, #22]
 8011378:	429a      	cmp	r2, r3
 801137a:	d902      	bls.n	8011382 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801137c:	f04f 33ff 	mov.w	r3, #4294967295
 8011380:	e106      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	627b      	str	r3, [r7, #36]	@ 0x24
 8011388:	e068      	b.n	801145c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011392:	889b      	ldrh	r3, [r3, #4]
 8011394:	b29a      	uxth	r2, r3
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	889b      	ldrh	r3, [r3, #4]
 801139a:	b29b      	uxth	r3, r3
 801139c:	429a      	cmp	r2, r3
 801139e:	d235      	bcs.n	801140c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80113a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80113a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d020      	beq.n	80113ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	889b      	ldrh	r3, [r3, #4]
 80113b0:	b29a      	uxth	r2, r3
 80113b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113b4:	88db      	ldrh	r3, [r3, #6]
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d307      	bcc.n	80113cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80113bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113be:	88db      	ldrh	r3, [r3, #6]
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	889b      	ldrh	r3, [r3, #4]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d902      	bls.n	80113d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113cc:	f04f 33ff 	mov.w	r3, #4294967295
 80113d0:	e0de      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80113d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80113d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113da:	88db      	ldrh	r3, [r3, #6]
 80113dc:	b29a      	uxth	r2, r3
 80113de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e0:	889b      	ldrh	r3, [r3, #4]
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d03d      	beq.n	8011464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80113e8:	2300      	movs	r3, #0
 80113ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80113ec:	e03a      	b.n	8011464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80113ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f0:	88db      	ldrh	r3, [r3, #6]
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	889b      	ldrh	r3, [r3, #4]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d902      	bls.n	8011404 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011402:	e0c5      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	605a      	str	r2, [r3, #4]
      break;
 801140a:	e02b      	b.n	8011464 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140e:	889b      	ldrh	r3, [r3, #4]
 8011410:	b29a      	uxth	r2, r3
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	889b      	ldrh	r3, [r3, #4]
 8011416:	b29b      	uxth	r3, r3
 8011418:	429a      	cmp	r2, r3
 801141a:	d102      	bne.n	8011422 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801141c:	f04f 33ff 	mov.w	r3, #4294967295
 8011420:	e0b6      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011424:	889b      	ldrh	r3, [r3, #4]
 8011426:	b29a      	uxth	r2, r3
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	88db      	ldrh	r3, [r3, #6]
 801142c:	b29b      	uxth	r3, r3
 801142e:	429a      	cmp	r2, r3
 8011430:	d202      	bcs.n	8011438 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011432:	f04f 33ff 	mov.w	r3, #4294967295
 8011436:	e0ab      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801143a:	2b00      	cmp	r3, #0
 801143c:	d009      	beq.n	8011452 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801143e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011440:	88db      	ldrh	r3, [r3, #6]
 8011442:	b29a      	uxth	r2, r3
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	889b      	ldrh	r3, [r3, #4]
 8011448:	b29b      	uxth	r3, r3
 801144a:	429a      	cmp	r2, r3
 801144c:	d001      	beq.n	8011452 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801145e:	2b00      	cmp	r3, #0
 8011460:	d193      	bne.n	801138a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011462:	e000      	b.n	8011466 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011464:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011468:	2b00      	cmp	r3, #0
 801146a:	d12d      	bne.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801146e:	2b00      	cmp	r3, #0
 8011470:	d01c      	beq.n	80114ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011474:	88db      	ldrh	r3, [r3, #6]
 8011476:	b29a      	uxth	r2, r3
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	889b      	ldrh	r3, [r3, #4]
 801147c:	b29b      	uxth	r3, r3
 801147e:	429a      	cmp	r2, r3
 8011480:	d906      	bls.n	8011490 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011482:	4b45      	ldr	r3, [pc, #276]	@ (8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011484:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011488:	4944      	ldr	r1, [pc, #272]	@ (801159c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801148a:	4845      	ldr	r0, [pc, #276]	@ (80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801148c:	f000 fe92 	bl	80121b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011498:	88db      	ldrh	r3, [r3, #6]
 801149a:	b29a      	uxth	r2, r3
 801149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149e:	889b      	ldrh	r3, [r3, #4]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d010      	beq.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80114a6:	2300      	movs	r3, #0
 80114a8:	623b      	str	r3, [r7, #32]
 80114aa:	e00d      	b.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d006      	beq.n	80114c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80114b4:	4b38      	ldr	r3, [pc, #224]	@ (8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80114b6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80114ba:	493a      	ldr	r1, [pc, #232]	@ (80115a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80114bc:	4838      	ldr	r0, [pc, #224]	@ (80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80114be:	f000 fe79 	bl	80121b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	68ba      	ldr	r2, [r7, #8]
 80114c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d105      	bne.n	80114da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	7f9b      	ldrb	r3, [r3, #30]
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d059      	beq.n	801158e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80114da:	6a3b      	ldr	r3, [r7, #32]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d04f      	beq.n	8011580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d006      	beq.n	80114f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	889b      	ldrh	r3, [r3, #4]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	623b      	str	r3, [r7, #32]
 80114fa:	e041      	b.n	8011580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80114fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011506:	e012      	b.n	801152e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801150e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011510:	88db      	ldrh	r3, [r3, #6]
 8011512:	b29a      	uxth	r2, r3
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	889b      	ldrh	r3, [r3, #4]
 8011518:	b29b      	uxth	r3, r3
 801151a:	429a      	cmp	r2, r3
 801151c:	d002      	beq.n	8011524 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	623b      	str	r3, [r7, #32]
            break;
 8011522:	e007      	b.n	8011534 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011526:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1e9      	bne.n	8011508 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d022      	beq.n	8011580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d106      	bne.n	8011550 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011542:	4b15      	ldr	r3, [pc, #84]	@ (8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011544:	f240 12df 	movw	r2, #479	@ 0x1df
 8011548:	4917      	ldr	r1, [pc, #92]	@ (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801154a:	4815      	ldr	r0, [pc, #84]	@ (80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801154c:	f000 fe32 	bl	80121b4 <iprintf>
          LWIP_ASSERT("sanity check",
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011558:	429a      	cmp	r2, r3
 801155a:	d106      	bne.n	801156a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801155c:	4b0e      	ldr	r3, [pc, #56]	@ (8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801155e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011562:	4911      	ldr	r1, [pc, #68]	@ (80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011564:	480e      	ldr	r0, [pc, #56]	@ (80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011566:	f000 fe25 	bl	80121b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801156a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d006      	beq.n	8011580 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011572:	4b09      	ldr	r3, [pc, #36]	@ (8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011574:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011578:	490c      	ldr	r1, [pc, #48]	@ (80115ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801157a:	4809      	ldr	r0, [pc, #36]	@ (80115a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801157c:	f000 fe1a 	bl	80121b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011580:	6a3b      	ldr	r3, [r7, #32]
 8011582:	2b00      	cmp	r3, #0
 8011584:	bf14      	ite	ne
 8011586:	2301      	movne	r3, #1
 8011588:	2300      	moveq	r3, #0
 801158a:	b2db      	uxtb	r3, r3
 801158c:	e000      	b.n	8011590 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	3730      	adds	r7, #48	@ 0x30
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	08015840 	.word	0x08015840
 801159c:	08015924 	.word	0x08015924
 80115a0:	08015888 	.word	0x08015888
 80115a4:	08015944 	.word	0x08015944
 80115a8:	0801597c 	.word	0x0801597c
 80115ac:	0801598c 	.word	0x0801598c

080115b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b08e      	sub	sp, #56	@ 0x38
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80115be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	f003 030f 	and.w	r3, r3, #15
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b14      	cmp	r3, #20
 80115ce:	f040 8171 	bne.w	80118b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80115d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115d4:	88db      	ldrh	r3, [r3, #6]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	4618      	mov	r0, r3
 80115da:	f7f6 fe51 	bl	8008280 <lwip_htons>
 80115de:	4603      	mov	r3, r0
 80115e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80115ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ec:	885b      	ldrh	r3, [r3, #2]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7f6 fe45 	bl	8008280 <lwip_htons>
 80115f6:	4603      	mov	r3, r0
 80115f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80115fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	f003 030f 	and.w	r3, r3, #15
 8011602:	b2db      	uxtb	r3, r3
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801160a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801160e:	b29b      	uxth	r3, r3
 8011610:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011612:	429a      	cmp	r2, r3
 8011614:	f0c0 8150 	bcc.w	80118b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011618:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801161c:	b29b      	uxth	r3, r3
 801161e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7f8 fa75 	bl	8009b14 <pbuf_clen>
 801162a:	4603      	mov	r3, r0
 801162c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801162e:	4b8c      	ldr	r3, [pc, #560]	@ (8011860 <ip4_reass+0x2b0>)
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	461a      	mov	r2, r3
 8011634:	8c3b      	ldrh	r3, [r7, #32]
 8011636:	4413      	add	r3, r2
 8011638:	2b0a      	cmp	r3, #10
 801163a:	dd10      	ble.n	801165e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801163c:	8c3b      	ldrh	r3, [r7, #32]
 801163e:	4619      	mov	r1, r3
 8011640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011642:	f7ff fd81 	bl	8011148 <ip_reass_remove_oldest_datagram>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 8137 	beq.w	80118bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801164e:	4b84      	ldr	r3, [pc, #528]	@ (8011860 <ip4_reass+0x2b0>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	461a      	mov	r2, r3
 8011654:	8c3b      	ldrh	r3, [r7, #32]
 8011656:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011658:	2b0a      	cmp	r3, #10
 801165a:	f300 812f 	bgt.w	80118bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801165e:	4b81      	ldr	r3, [pc, #516]	@ (8011864 <ip4_reass+0x2b4>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	633b      	str	r3, [r7, #48]	@ 0x30
 8011664:	e015      	b.n	8011692 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011668:	695a      	ldr	r2, [r3, #20]
 801166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	429a      	cmp	r2, r3
 8011670:	d10c      	bne.n	801168c <ip4_reass+0xdc>
 8011672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011674:	699a      	ldr	r2, [r3, #24]
 8011676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011678:	691b      	ldr	r3, [r3, #16]
 801167a:	429a      	cmp	r2, r3
 801167c:	d106      	bne.n	801168c <ip4_reass+0xdc>
 801167e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011680:	899a      	ldrh	r2, [r3, #12]
 8011682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011684:	889b      	ldrh	r3, [r3, #4]
 8011686:	b29b      	uxth	r3, r3
 8011688:	429a      	cmp	r2, r3
 801168a:	d006      	beq.n	801169a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	633b      	str	r3, [r7, #48]	@ 0x30
 8011692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011694:	2b00      	cmp	r3, #0
 8011696:	d1e6      	bne.n	8011666 <ip4_reass+0xb6>
 8011698:	e000      	b.n	801169c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801169a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d109      	bne.n	80116b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80116a2:	8c3b      	ldrh	r3, [r7, #32]
 80116a4:	4619      	mov	r1, r3
 80116a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80116a8:	f7ff fdb0 	bl	801120c <ip_reass_enqueue_new_datagram>
 80116ac:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80116ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d11c      	bne.n	80116ee <ip4_reass+0x13e>
      goto nullreturn;
 80116b4:	e105      	b.n	80118c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b8:	88db      	ldrh	r3, [r3, #6]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f6 fddf 	bl	8008280 <lwip_htons>
 80116c2:	4603      	mov	r3, r0
 80116c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d110      	bne.n	80116ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80116cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ce:	89db      	ldrh	r3, [r3, #14]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7f6 fdd5 	bl	8008280 <lwip_htons>
 80116d6:	4603      	mov	r3, r0
 80116d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d006      	beq.n	80116ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80116e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e2:	3308      	adds	r3, #8
 80116e4:	2214      	movs	r2, #20
 80116e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80116e8:	4618      	mov	r0, r3
 80116ea:	f000 fe3e 	bl	801236a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80116ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f0:	88db      	ldrh	r3, [r3, #6]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	f003 0320 	and.w	r3, r3, #32
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	bf0c      	ite	eq
 80116fc:	2301      	moveq	r3, #1
 80116fe:	2300      	movne	r3, #0
 8011700:	b2db      	uxtb	r3, r3
 8011702:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00e      	beq.n	8011728 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801170a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801170c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801170e:	4413      	add	r3, r2
 8011710:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011712:	8b7a      	ldrh	r2, [r7, #26]
 8011714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011716:	429a      	cmp	r2, r3
 8011718:	f0c0 80a0 	bcc.w	801185c <ip4_reass+0x2ac>
 801171c:	8b7b      	ldrh	r3, [r7, #26]
 801171e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011722:	4293      	cmp	r3, r2
 8011724:	f200 809a 	bhi.w	801185c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011728:	69fa      	ldr	r2, [r7, #28]
 801172a:	6879      	ldr	r1, [r7, #4]
 801172c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801172e:	f7ff fdd5 	bl	80112dc <ip_reass_chain_frag_into_datagram_and_validate>
 8011732:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173a:	f000 809b 	beq.w	8011874 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801173e:	4b48      	ldr	r3, [pc, #288]	@ (8011860 <ip4_reass+0x2b0>)
 8011740:	881a      	ldrh	r2, [r3, #0]
 8011742:	8c3b      	ldrh	r3, [r7, #32]
 8011744:	4413      	add	r3, r2
 8011746:	b29a      	uxth	r2, r3
 8011748:	4b45      	ldr	r3, [pc, #276]	@ (8011860 <ip4_reass+0x2b0>)
 801174a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00d      	beq.n	801176e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011752:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011756:	4413      	add	r3, r2
 8011758:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175c:	8a7a      	ldrh	r2, [r7, #18]
 801175e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011762:	7f9b      	ldrb	r3, [r3, #30]
 8011764:	f043 0301 	orr.w	r3, r3, #1
 8011768:	b2da      	uxtb	r2, r3
 801176a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d171      	bne.n	8011858 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011776:	8b9b      	ldrh	r3, [r3, #28]
 8011778:	3314      	adds	r3, #20
 801177a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801178e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011790:	3308      	adds	r3, #8
 8011792:	2214      	movs	r2, #20
 8011794:	4619      	mov	r1, r3
 8011796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011798:	f000 fde7 	bl	801236a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801179c:	8a3b      	ldrh	r3, [r7, #16]
 801179e:	4618      	mov	r0, r3
 80117a0:	f7f6 fd6e 	bl	8008280 <lwip_htons>
 80117a4:	4603      	mov	r3, r0
 80117a6:	461a      	mov	r2, r3
 80117a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80117ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ae:	2200      	movs	r2, #0
 80117b0:	719a      	strb	r2, [r3, #6]
 80117b2:	2200      	movs	r2, #0
 80117b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80117b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b8:	2200      	movs	r2, #0
 80117ba:	729a      	strb	r2, [r3, #10]
 80117bc:	2200      	movs	r2, #0
 80117be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80117c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80117c6:	e00d      	b.n	80117e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80117c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80117ce:	2114      	movs	r1, #20
 80117d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80117d2:	f7f8 f88b 	bl	80098ec <pbuf_remove_header>
      pbuf_cat(p, r);
 80117d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7f8 f9db 	bl	8009b94 <pbuf_cat>
      r = iprh->next_pbuf;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80117e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1ee      	bne.n	80117c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80117ea:	4b1e      	ldr	r3, [pc, #120]	@ (8011864 <ip4_reass+0x2b4>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d102      	bne.n	80117fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80117f4:	2300      	movs	r3, #0
 80117f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117f8:	e010      	b.n	801181c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80117fa:	4b1a      	ldr	r3, [pc, #104]	@ (8011864 <ip4_reass+0x2b4>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011800:	e007      	b.n	8011812 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011808:	429a      	cmp	r2, r3
 801180a:	d006      	beq.n	801181a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801180c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1f4      	bne.n	8011802 <ip4_reass+0x252>
 8011818:	e000      	b.n	801181c <ip4_reass+0x26c>
          break;
 801181a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801181c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801181e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011820:	f7ff fd2e 	bl	8011280 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7f8 f975 	bl	8009b14 <pbuf_clen>
 801182a:	4603      	mov	r3, r0
 801182c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801182e:	4b0c      	ldr	r3, [pc, #48]	@ (8011860 <ip4_reass+0x2b0>)
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	8c3a      	ldrh	r2, [r7, #32]
 8011834:	429a      	cmp	r2, r3
 8011836:	d906      	bls.n	8011846 <ip4_reass+0x296>
 8011838:	4b0b      	ldr	r3, [pc, #44]	@ (8011868 <ip4_reass+0x2b8>)
 801183a:	f240 229b 	movw	r2, #667	@ 0x29b
 801183e:	490b      	ldr	r1, [pc, #44]	@ (801186c <ip4_reass+0x2bc>)
 8011840:	480b      	ldr	r0, [pc, #44]	@ (8011870 <ip4_reass+0x2c0>)
 8011842:	f000 fcb7 	bl	80121b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011846:	4b06      	ldr	r3, [pc, #24]	@ (8011860 <ip4_reass+0x2b0>)
 8011848:	881a      	ldrh	r2, [r3, #0]
 801184a:	8c3b      	ldrh	r3, [r7, #32]
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	b29a      	uxth	r2, r3
 8011850:	4b03      	ldr	r3, [pc, #12]	@ (8011860 <ip4_reass+0x2b0>)
 8011852:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	e038      	b.n	80118ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011858:	2300      	movs	r3, #0
 801185a:	e036      	b.n	80118ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801185c:	bf00      	nop
 801185e:	e00a      	b.n	8011876 <ip4_reass+0x2c6>
 8011860:	2000f084 	.word	0x2000f084
 8011864:	2000f080 	.word	0x2000f080
 8011868:	08015840 	.word	0x08015840
 801186c:	080159b0 	.word	0x080159b0
 8011870:	08015888 	.word	0x08015888
    goto nullreturn_ipr;
 8011874:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011878:	2b00      	cmp	r3, #0
 801187a:	d106      	bne.n	801188a <ip4_reass+0x2da>
 801187c:	4b15      	ldr	r3, [pc, #84]	@ (80118d4 <ip4_reass+0x324>)
 801187e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8011882:	4915      	ldr	r1, [pc, #84]	@ (80118d8 <ip4_reass+0x328>)
 8011884:	4815      	ldr	r0, [pc, #84]	@ (80118dc <ip4_reass+0x32c>)
 8011886:	f000 fc95 	bl	80121b4 <iprintf>
  if (ipr->p == NULL) {
 801188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d116      	bne.n	80118c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011892:	4b13      	ldr	r3, [pc, #76]	@ (80118e0 <ip4_reass+0x330>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011898:	429a      	cmp	r2, r3
 801189a:	d006      	beq.n	80118aa <ip4_reass+0x2fa>
 801189c:	4b0d      	ldr	r3, [pc, #52]	@ (80118d4 <ip4_reass+0x324>)
 801189e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80118a2:	4910      	ldr	r1, [pc, #64]	@ (80118e4 <ip4_reass+0x334>)
 80118a4:	480d      	ldr	r0, [pc, #52]	@ (80118dc <ip4_reass+0x32c>)
 80118a6:	f000 fc85 	bl	80121b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80118aa:	2100      	movs	r1, #0
 80118ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80118ae:	f7ff fce7 	bl	8011280 <ip_reass_dequeue_datagram>
 80118b2:	e006      	b.n	80118c2 <ip4_reass+0x312>
    goto nullreturn;
 80118b4:	bf00      	nop
 80118b6:	e004      	b.n	80118c2 <ip4_reass+0x312>
    goto nullreturn;
 80118b8:	bf00      	nop
 80118ba:	e002      	b.n	80118c2 <ip4_reass+0x312>
      goto nullreturn;
 80118bc:	bf00      	nop
 80118be:	e000      	b.n	80118c2 <ip4_reass+0x312>
  }

nullreturn:
 80118c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7f8 f898 	bl	80099f8 <pbuf_free>
  return NULL;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3738      	adds	r7, #56	@ 0x38
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	08015840 	.word	0x08015840
 80118d8:	080159cc 	.word	0x080159cc
 80118dc:	08015888 	.word	0x08015888
 80118e0:	2000f080 	.word	0x2000f080
 80118e4:	080159d8 	.word	0x080159d8

080118e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80118ec:	2005      	movs	r0, #5
 80118ee:	f7f7 f98d 	bl	8008c0c <memp_malloc>
 80118f2:	4603      	mov	r3, r0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d106      	bne.n	8011914 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011906:	4b07      	ldr	r3, [pc, #28]	@ (8011924 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011908:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801190c:	4906      	ldr	r1, [pc, #24]	@ (8011928 <ip_frag_free_pbuf_custom_ref+0x30>)
 801190e:	4807      	ldr	r0, [pc, #28]	@ (801192c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011910:	f000 fc50 	bl	80121b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	2005      	movs	r0, #5
 8011918:	f7f7 f9ca 	bl	8008cb0 <memp_free>
}
 801191c:	bf00      	nop
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	08015840 	.word	0x08015840
 8011928:	080159f8 	.word	0x080159f8
 801192c:	08015888 	.word	0x08015888

08011930 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d106      	bne.n	8011950 <ipfrag_free_pbuf_custom+0x20>
 8011942:	4b11      	ldr	r3, [pc, #68]	@ (8011988 <ipfrag_free_pbuf_custom+0x58>)
 8011944:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011948:	4910      	ldr	r1, [pc, #64]	@ (801198c <ipfrag_free_pbuf_custom+0x5c>)
 801194a:	4811      	ldr	r0, [pc, #68]	@ (8011990 <ipfrag_free_pbuf_custom+0x60>)
 801194c:	f000 fc32 	bl	80121b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	429a      	cmp	r2, r3
 8011956:	d006      	beq.n	8011966 <ipfrag_free_pbuf_custom+0x36>
 8011958:	4b0b      	ldr	r3, [pc, #44]	@ (8011988 <ipfrag_free_pbuf_custom+0x58>)
 801195a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801195e:	490d      	ldr	r1, [pc, #52]	@ (8011994 <ipfrag_free_pbuf_custom+0x64>)
 8011960:	480b      	ldr	r0, [pc, #44]	@ (8011990 <ipfrag_free_pbuf_custom+0x60>)
 8011962:	f000 fc27 	bl	80121b4 <iprintf>
  if (pcr->original != NULL) {
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d004      	beq.n	8011978 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f8 f840 	bl	80099f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f7ff ffbd 	bl	80118f8 <ip_frag_free_pbuf_custom_ref>
}
 801197e:	bf00      	nop
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	08015840 	.word	0x08015840
 801198c:	08015a04 	.word	0x08015a04
 8011990:	08015888 	.word	0x08015888
 8011994:	08015a10 	.word	0x08015a10

08011998 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b094      	sub	sp, #80	@ 0x50
 801199c:	af02      	add	r7, sp, #8
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80119a4:	2300      	movs	r3, #0
 80119a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80119ae:	3b14      	subs	r3, #20
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	da00      	bge.n	80119b6 <ip4_frag+0x1e>
 80119b4:	3307      	adds	r3, #7
 80119b6:	10db      	asrs	r3, r3, #3
 80119b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80119ba:	2314      	movs	r3, #20
 80119bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80119c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80119c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	f003 030f 	and.w	r3, r3, #15
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b14      	cmp	r3, #20
 80119d8:	d002      	beq.n	80119e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80119da:	f06f 0305 	mvn.w	r3, #5
 80119de:	e110      	b.n	8011c02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	895b      	ldrh	r3, [r3, #10]
 80119e4:	2b13      	cmp	r3, #19
 80119e6:	d809      	bhi.n	80119fc <ip4_frag+0x64>
 80119e8:	4b88      	ldr	r3, [pc, #544]	@ (8011c0c <ip4_frag+0x274>)
 80119ea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80119ee:	4988      	ldr	r1, [pc, #544]	@ (8011c10 <ip4_frag+0x278>)
 80119f0:	4888      	ldr	r0, [pc, #544]	@ (8011c14 <ip4_frag+0x27c>)
 80119f2:	f000 fbdf 	bl	80121b4 <iprintf>
 80119f6:	f06f 0305 	mvn.w	r3, #5
 80119fa:	e102      	b.n	8011c02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80119fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fe:	88db      	ldrh	r3, [r3, #6]
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7f6 fc3c 	bl	8008280 <lwip_htons>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011a0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011a16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	891b      	ldrh	r3, [r3, #8]
 8011a22:	3b14      	subs	r3, #20
 8011a24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011a28:	e0e1      	b.n	8011bee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011a2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011a2c:	00db      	lsls	r3, r3, #3
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011a34:	4293      	cmp	r3, r2
 8011a36:	bf28      	it	cs
 8011a38:	4613      	movcs	r3, r2
 8011a3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011a3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a40:	2114      	movs	r1, #20
 8011a42:	200e      	movs	r0, #14
 8011a44:	f7f7 fcf4 	bl	8009430 <pbuf_alloc>
 8011a48:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 80d5 	beq.w	8011bfc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a54:	895b      	ldrh	r3, [r3, #10]
 8011a56:	2b13      	cmp	r3, #19
 8011a58:	d806      	bhi.n	8011a68 <ip4_frag+0xd0>
 8011a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8011c0c <ip4_frag+0x274>)
 8011a5c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011a60:	496d      	ldr	r1, [pc, #436]	@ (8011c18 <ip4_frag+0x280>)
 8011a62:	486c      	ldr	r0, [pc, #432]	@ (8011c14 <ip4_frag+0x27c>)
 8011a64:	f000 fba6 	bl	80121b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	2214      	movs	r2, #20
 8011a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011a70:	4618      	mov	r0, r3
 8011a72:	f000 fc7a 	bl	801236a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011a7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011a7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011a82:	e064      	b.n	8011b4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	895a      	ldrh	r2, [r3, #10]
 8011a88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	895b      	ldrh	r3, [r3, #10]
 8011a92:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d906      	bls.n	8011aa6 <ip4_frag+0x10e>
 8011a98:	4b5c      	ldr	r3, [pc, #368]	@ (8011c0c <ip4_frag+0x274>)
 8011a9a:	f240 322d 	movw	r2, #813	@ 0x32d
 8011a9e:	495f      	ldr	r1, [pc, #380]	@ (8011c1c <ip4_frag+0x284>)
 8011aa0:	485c      	ldr	r0, [pc, #368]	@ (8011c14 <ip4_frag+0x27c>)
 8011aa2:	f000 fb87 	bl	80121b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011aa6:	8bfa      	ldrh	r2, [r7, #30]
 8011aa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011aac:	4293      	cmp	r3, r2
 8011aae:	bf28      	it	cs
 8011ab0:	4613      	movcs	r3, r2
 8011ab2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011ab6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d105      	bne.n	8011aca <ip4_frag+0x132>
        poff = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	60fb      	str	r3, [r7, #12]
        continue;
 8011ac8:	e041      	b.n	8011b4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011aca:	f7ff ff0d 	bl	80118e8 <ip_frag_alloc_pbuf_custom_ref>
 8011ace:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d103      	bne.n	8011ade <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ad8:	f7f7 ff8e 	bl	80099f8 <pbuf_free>
        goto memerr;
 8011adc:	e08f      	b.n	8011bfe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011ade:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011ae4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8011aec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011af0:	9201      	str	r2, [sp, #4]
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	4603      	mov	r3, r0
 8011af6:	2241      	movs	r2, #65	@ 0x41
 8011af8:	2000      	movs	r0, #0
 8011afa:	f7f7 fdc3 	bl	8009684 <pbuf_alloced_custom>
 8011afe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011b06:	69b8      	ldr	r0, [r7, #24]
 8011b08:	f7ff fef6 	bl	80118f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011b0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b0e:	f7f7 ff73 	bl	80099f8 <pbuf_free>
        goto memerr;
 8011b12:	e074      	b.n	8011bfe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f7f8 f815 	bl	8009b44 <pbuf_ref>
      pcr->original = p;
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	68fa      	ldr	r2, [r7, #12]
 8011b1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	4a3f      	ldr	r2, [pc, #252]	@ (8011c20 <ip4_frag+0x288>)
 8011b24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011b26:	6979      	ldr	r1, [r7, #20]
 8011b28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b2a:	f7f8 f833 	bl	8009b94 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011b2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011b3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d004      	beq.n	8011b4e <ip4_frag+0x1b6>
        poff = 0;
 8011b44:	2300      	movs	r3, #0
 8011b46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011b4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d196      	bne.n	8011a84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011b56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011b58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011b5c:	4413      	add	r3, r2
 8011b5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011b64:	f1a3 0213 	sub.w	r2, r3, #19
 8011b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	bfcc      	ite	gt
 8011b70:	2301      	movgt	r3, #1
 8011b72:	2300      	movle	r3, #0
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d002      	beq.n	8011b8e <ip4_frag+0x1f6>
 8011b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d003      	beq.n	8011b96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011b8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011b94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011b96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7f6 fb71 	bl	8008280 <lwip_htons>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011ba6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ba8:	3314      	adds	r3, #20
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f6 fb67 	bl	8008280 <lwip_htons>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	729a      	strb	r2, [r3, #10]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	695b      	ldr	r3, [r3, #20]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bcc:	68b8      	ldr	r0, [r7, #8]
 8011bce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011bd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011bd2:	f7f7 ff11 	bl	80099f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011bd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011bda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8011be2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011be6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011be8:	4413      	add	r3, r2
 8011bea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8011bee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f47f af19 	bne.w	8011a2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e002      	b.n	8011c02 <ip4_frag+0x26a>
      goto memerr;
 8011bfc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3748      	adds	r7, #72	@ 0x48
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	08015840 	.word	0x08015840
 8011c10:	08015a1c 	.word	0x08015a1c
 8011c14:	08015888 	.word	0x08015888
 8011c18:	08015a38 	.word	0x08015a38
 8011c1c:	08015a58 	.word	0x08015a58
 8011c20:	08011931 	.word	0x08011931

08011c24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b086      	sub	sp, #24
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011c2e:	230e      	movs	r3, #14
 8011c30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	895b      	ldrh	r3, [r3, #10]
 8011c36:	2b0e      	cmp	r3, #14
 8011c38:	d96e      	bls.n	8011d18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	7bdb      	ldrb	r3, [r3, #15]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c48:	3301      	adds	r3, #1
 8011c4a:	b2da      	uxtb	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	7b1a      	ldrb	r2, [r3, #12]
 8011c5a:	7b5b      	ldrb	r3, [r3, #13]
 8011c5c:	021b      	lsls	r3, r3, #8
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	f003 0301 	and.w	r3, r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d023      	beq.n	8011cb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d10f      	bne.n	8011c96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	785b      	ldrb	r3, [r3, #1]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d11b      	bne.n	8011cb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011c82:	2b5e      	cmp	r3, #94	@ 0x5e
 8011c84:	d117      	bne.n	8011cb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7b5b      	ldrb	r3, [r3, #13]
 8011c8a:	f043 0310 	orr.w	r3, r3, #16
 8011c8e:	b2da      	uxtb	r2, r3
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	735a      	strb	r2, [r3, #13]
 8011c94:	e00f      	b.n	8011cb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	2206      	movs	r2, #6
 8011c9a:	4928      	ldr	r1, [pc, #160]	@ (8011d3c <ethernet_input+0x118>)
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f000 fade 	bl	801225e <memcmp>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d106      	bne.n	8011cb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	7b5b      	ldrb	r3, [r3, #13]
 8011cac:	f043 0308 	orr.w	r3, r3, #8
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011cb6:	89fb      	ldrh	r3, [r7, #14]
 8011cb8:	2b08      	cmp	r3, #8
 8011cba:	d003      	beq.n	8011cc4 <ethernet_input+0xa0>
 8011cbc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8011cc0:	d014      	beq.n	8011cec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011cc2:	e032      	b.n	8011d2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011cca:	f003 0308 	and.w	r3, r3, #8
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d024      	beq.n	8011d1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011cd2:	8afb      	ldrh	r3, [r7, #22]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7f7 fe08 	bl	80098ec <pbuf_remove_header>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d11e      	bne.n	8011d20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011ce2:	6839      	ldr	r1, [r7, #0]
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7fe ff21 	bl	8010b2c <ip4_input>
      break;
 8011cea:	e013      	b.n	8011d14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011cf2:	f003 0308 	and.w	r3, r3, #8
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d014      	beq.n	8011d24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011cfa:	8afb      	ldrh	r3, [r7, #22]
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7f7 fdf4 	bl	80098ec <pbuf_remove_header>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10e      	bne.n	8011d28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7fe f8c1 	bl	800fe94 <etharp_input>
      break;
 8011d12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011d14:	2300      	movs	r3, #0
 8011d16:	e00c      	b.n	8011d32 <ethernet_input+0x10e>
    goto free_and_return;
 8011d18:	bf00      	nop
 8011d1a:	e006      	b.n	8011d2a <ethernet_input+0x106>
        goto free_and_return;
 8011d1c:	bf00      	nop
 8011d1e:	e004      	b.n	8011d2a <ethernet_input+0x106>
        goto free_and_return;
 8011d20:	bf00      	nop
 8011d22:	e002      	b.n	8011d2a <ethernet_input+0x106>
        goto free_and_return;
 8011d24:	bf00      	nop
 8011d26:	e000      	b.n	8011d2a <ethernet_input+0x106>
        goto free_and_return;
 8011d28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7f7 fe64 	bl	80099f8 <pbuf_free>
  return ERR_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3718      	adds	r7, #24
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	08015c70 	.word	0x08015c70

08011d40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
 8011d4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011d4e:	8c3b      	ldrh	r3, [r7, #32]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7f6 fa95 	bl	8008280 <lwip_htons>
 8011d56:	4603      	mov	r3, r0
 8011d58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011d5a:	210e      	movs	r1, #14
 8011d5c:	68b8      	ldr	r0, [r7, #8]
 8011d5e:	f7f7 fdb5 	bl	80098cc <pbuf_add_header>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d125      	bne.n	8011db4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	8afa      	ldrh	r2, [r7, #22]
 8011d72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	2206      	movs	r2, #6
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 faf5 	bl	801236a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	3306      	adds	r3, #6
 8011d84:	2206      	movs	r2, #6
 8011d86:	6879      	ldr	r1, [r7, #4]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 faee 	bl	801236a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011d94:	2b06      	cmp	r3, #6
 8011d96:	d006      	beq.n	8011da6 <ethernet_output+0x66>
 8011d98:	4b0a      	ldr	r3, [pc, #40]	@ (8011dc4 <ethernet_output+0x84>)
 8011d9a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011d9e:	490a      	ldr	r1, [pc, #40]	@ (8011dc8 <ethernet_output+0x88>)
 8011da0:	480a      	ldr	r0, [pc, #40]	@ (8011dcc <ethernet_output+0x8c>)
 8011da2:	f000 fa07 	bl	80121b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	699b      	ldr	r3, [r3, #24]
 8011daa:	68b9      	ldr	r1, [r7, #8]
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	4798      	blx	r3
 8011db0:	4603      	mov	r3, r0
 8011db2:	e002      	b.n	8011dba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011db4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011db6:	f06f 0301 	mvn.w	r3, #1
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3718      	adds	r7, #24
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	08015a68 	.word	0x08015a68
 8011dc8:	08015aa0 	.word	0x08015aa0
 8011dcc:	08015ad4 	.word	0x08015ad4

08011dd0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	2104      	movs	r1, #4
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7f2 fd3f 	bl	8004864 <osMessageQueueNew>
 8011de6:	4602      	mov	r2, r0
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d102      	bne.n	8011dfa <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011df4:	f04f 33ff 	mov.w	r3, #4294967295
 8011df8:	e000      	b.n	8011dfc <sys_mbox_new+0x2c>

  return ERR_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	4639      	mov	r1, r7
 8011e14:	2300      	movs	r3, #0
 8011e16:	2200      	movs	r2, #0
 8011e18:	f7f2 fdaa 	bl	8004970 <osMessageQueuePut>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d102      	bne.n	8011e28 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	73fb      	strb	r3, [r7, #15]
 8011e26:	e001      	b.n	8011e2c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011e28:	23ff      	movs	r3, #255	@ 0xff
 8011e2a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3710      	adds	r7, #16
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011e44:	f7f2 f970 	bl	8004128 <osKernelGetTickCount>
 8011e48:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d013      	beq.n	8011e78 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6818      	ldr	r0, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	68b9      	ldr	r1, [r7, #8]
 8011e5a:	f7f2 fdfd 	bl	8004a58 <osMessageQueueGet>
 8011e5e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d105      	bne.n	8011e72 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8011e66:	f7f2 f95f 	bl	8004128 <osKernelGetTickCount>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	1ad3      	subs	r3, r2, r3
 8011e70:	e00f      	b.n	8011e92 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011e72:	f04f 33ff 	mov.w	r3, #4294967295
 8011e76:	e00c      	b.n	8011e92 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	6818      	ldr	r0, [r3, #0]
 8011e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e80:	2200      	movs	r2, #0
 8011e82:	68b9      	ldr	r1, [r7, #8]
 8011e84:	f7f2 fde8 	bl	8004a58 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8011e88:	f7f2 f94e 	bl	8004128 <osKernelGetTickCount>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3718      	adds	r7, #24
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8011e9a:	b480      	push	{r7}
 8011e9c:	b083      	sub	sp, #12
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d101      	bne.n	8011eae <sys_mbox_valid+0x14>
    return 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	e000      	b.n	8011eb0 <sys_mbox_valid+0x16>
  else
    return 1;
 8011eae:	2301      	movs	r3, #1
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	f7f2 fa2d 	bl	8004320 <osMutexNew>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	4a01      	ldr	r2, [pc, #4]	@ (8011ed0 <sys_init+0x14>)
 8011eca:	6013      	str	r3, [r2, #0]
#endif
}
 8011ecc:	bf00      	nop
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	2000f08c 	.word	0x2000f08c

08011ed4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8011edc:	2000      	movs	r0, #0
 8011ede:	f7f2 fa1f 	bl	8004320 <osMutexNew>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d102      	bne.n	8011ef6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef4:	e000      	b.n	8011ef8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f2 fa9f 	bl	8004454 <osMutexAcquire>
#endif
}
 8011f16:	bf00      	nop
 8011f18:	3708      	adds	r7, #8
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b082      	sub	sp, #8
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f2 faf0 	bl	8004510 <osMutexRelease>
}
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08e      	sub	sp, #56	@ 0x38
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	607a      	str	r2, [r7, #4]
 8011f44:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8011f46:	f107 0314 	add.w	r3, r7, #20
 8011f4a:	2224      	movs	r2, #36	@ 0x24
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 f995 	bl	801227e <memset>
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	617b      	str	r3, [r7, #20]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8011f60:	f107 0314 	add.w	r3, r7, #20
 8011f64:	461a      	mov	r2, r3
 8011f66:	6879      	ldr	r1, [r7, #4]
 8011f68:	68b8      	ldr	r0, [r7, #8]
 8011f6a:	f7f2 f905 	bl	8004178 <osThreadNew>
 8011f6e:	4603      	mov	r3, r0
#endif
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3738      	adds	r7, #56	@ 0x38
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8011f7c:	4b04      	ldr	r3, [pc, #16]	@ (8011f90 <sys_arch_protect+0x18>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f04f 31ff 	mov.w	r1, #4294967295
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f2 fa65 	bl	8004454 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8011f8a:	2301      	movs	r3, #1
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	2000f08c 	.word	0x2000f08c

08011f94 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011f9c:	4b04      	ldr	r3, [pc, #16]	@ (8011fb0 <sys_arch_unprotect+0x1c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f2 fab5 	bl	8004510 <osMutexRelease>
}
 8011fa6:	bf00      	nop
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	2000f08c 	.word	0x2000f08c

08011fb4 <rand>:
 8011fb4:	4b16      	ldr	r3, [pc, #88]	@ (8012010 <rand+0x5c>)
 8011fb6:	b510      	push	{r4, lr}
 8011fb8:	681c      	ldr	r4, [r3, #0]
 8011fba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fbc:	b9b3      	cbnz	r3, 8011fec <rand+0x38>
 8011fbe:	2018      	movs	r0, #24
 8011fc0:	f000 fa00 	bl	80123c4 <malloc>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	6320      	str	r0, [r4, #48]	@ 0x30
 8011fc8:	b920      	cbnz	r0, 8011fd4 <rand+0x20>
 8011fca:	4b12      	ldr	r3, [pc, #72]	@ (8012014 <rand+0x60>)
 8011fcc:	4812      	ldr	r0, [pc, #72]	@ (8012018 <rand+0x64>)
 8011fce:	2152      	movs	r1, #82	@ 0x52
 8011fd0:	f000 f9da 	bl	8012388 <__assert_func>
 8011fd4:	4911      	ldr	r1, [pc, #68]	@ (801201c <rand+0x68>)
 8011fd6:	4b12      	ldr	r3, [pc, #72]	@ (8012020 <rand+0x6c>)
 8011fd8:	e9c0 1300 	strd	r1, r3, [r0]
 8011fdc:	4b11      	ldr	r3, [pc, #68]	@ (8012024 <rand+0x70>)
 8011fde:	6083      	str	r3, [r0, #8]
 8011fe0:	230b      	movs	r3, #11
 8011fe2:	8183      	strh	r3, [r0, #12]
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011fec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011fee:	480e      	ldr	r0, [pc, #56]	@ (8012028 <rand+0x74>)
 8011ff0:	690b      	ldr	r3, [r1, #16]
 8011ff2:	694c      	ldr	r4, [r1, #20]
 8011ff4:	4a0d      	ldr	r2, [pc, #52]	@ (801202c <rand+0x78>)
 8011ff6:	4358      	muls	r0, r3
 8011ff8:	fb02 0004 	mla	r0, r2, r4, r0
 8011ffc:	fba3 3202 	umull	r3, r2, r3, r2
 8012000:	3301      	adds	r3, #1
 8012002:	eb40 0002 	adc.w	r0, r0, r2
 8012006:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801200a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801200e:	bd10      	pop	{r4, pc}
 8012010:	20000028 	.word	0x20000028
 8012014:	08015c7e 	.word	0x08015c7e
 8012018:	08015c95 	.word	0x08015c95
 801201c:	abcd330e 	.word	0xabcd330e
 8012020:	e66d1234 	.word	0xe66d1234
 8012024:	0005deec 	.word	0x0005deec
 8012028:	5851f42d 	.word	0x5851f42d
 801202c:	4c957f2d 	.word	0x4c957f2d

08012030 <std>:
 8012030:	2300      	movs	r3, #0
 8012032:	b510      	push	{r4, lr}
 8012034:	4604      	mov	r4, r0
 8012036:	e9c0 3300 	strd	r3, r3, [r0]
 801203a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801203e:	6083      	str	r3, [r0, #8]
 8012040:	8181      	strh	r1, [r0, #12]
 8012042:	6643      	str	r3, [r0, #100]	@ 0x64
 8012044:	81c2      	strh	r2, [r0, #14]
 8012046:	6183      	str	r3, [r0, #24]
 8012048:	4619      	mov	r1, r3
 801204a:	2208      	movs	r2, #8
 801204c:	305c      	adds	r0, #92	@ 0x5c
 801204e:	f000 f916 	bl	801227e <memset>
 8012052:	4b0d      	ldr	r3, [pc, #52]	@ (8012088 <std+0x58>)
 8012054:	6263      	str	r3, [r4, #36]	@ 0x24
 8012056:	4b0d      	ldr	r3, [pc, #52]	@ (801208c <std+0x5c>)
 8012058:	62a3      	str	r3, [r4, #40]	@ 0x28
 801205a:	4b0d      	ldr	r3, [pc, #52]	@ (8012090 <std+0x60>)
 801205c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801205e:	4b0d      	ldr	r3, [pc, #52]	@ (8012094 <std+0x64>)
 8012060:	6323      	str	r3, [r4, #48]	@ 0x30
 8012062:	4b0d      	ldr	r3, [pc, #52]	@ (8012098 <std+0x68>)
 8012064:	6224      	str	r4, [r4, #32]
 8012066:	429c      	cmp	r4, r3
 8012068:	d006      	beq.n	8012078 <std+0x48>
 801206a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801206e:	4294      	cmp	r4, r2
 8012070:	d002      	beq.n	8012078 <std+0x48>
 8012072:	33d0      	adds	r3, #208	@ 0xd0
 8012074:	429c      	cmp	r4, r3
 8012076:	d105      	bne.n	8012084 <std+0x54>
 8012078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012080:	f000 b970 	b.w	8012364 <__retarget_lock_init_recursive>
 8012084:	bd10      	pop	{r4, pc}
 8012086:	bf00      	nop
 8012088:	080121d9 	.word	0x080121d9
 801208c:	080121fb 	.word	0x080121fb
 8012090:	08012233 	.word	0x08012233
 8012094:	08012257 	.word	0x08012257
 8012098:	2000f090 	.word	0x2000f090

0801209c <stdio_exit_handler>:
 801209c:	4a02      	ldr	r2, [pc, #8]	@ (80120a8 <stdio_exit_handler+0xc>)
 801209e:	4903      	ldr	r1, [pc, #12]	@ (80120ac <stdio_exit_handler+0x10>)
 80120a0:	4803      	ldr	r0, [pc, #12]	@ (80120b0 <stdio_exit_handler+0x14>)
 80120a2:	f000 b869 	b.w	8012178 <_fwalk_sglue>
 80120a6:	bf00      	nop
 80120a8:	2000001c 	.word	0x2000001c
 80120ac:	08012bd9 	.word	0x08012bd9
 80120b0:	2000002c 	.word	0x2000002c

080120b4 <cleanup_stdio>:
 80120b4:	6841      	ldr	r1, [r0, #4]
 80120b6:	4b0c      	ldr	r3, [pc, #48]	@ (80120e8 <cleanup_stdio+0x34>)
 80120b8:	4299      	cmp	r1, r3
 80120ba:	b510      	push	{r4, lr}
 80120bc:	4604      	mov	r4, r0
 80120be:	d001      	beq.n	80120c4 <cleanup_stdio+0x10>
 80120c0:	f000 fd8a 	bl	8012bd8 <_fflush_r>
 80120c4:	68a1      	ldr	r1, [r4, #8]
 80120c6:	4b09      	ldr	r3, [pc, #36]	@ (80120ec <cleanup_stdio+0x38>)
 80120c8:	4299      	cmp	r1, r3
 80120ca:	d002      	beq.n	80120d2 <cleanup_stdio+0x1e>
 80120cc:	4620      	mov	r0, r4
 80120ce:	f000 fd83 	bl	8012bd8 <_fflush_r>
 80120d2:	68e1      	ldr	r1, [r4, #12]
 80120d4:	4b06      	ldr	r3, [pc, #24]	@ (80120f0 <cleanup_stdio+0x3c>)
 80120d6:	4299      	cmp	r1, r3
 80120d8:	d004      	beq.n	80120e4 <cleanup_stdio+0x30>
 80120da:	4620      	mov	r0, r4
 80120dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e0:	f000 bd7a 	b.w	8012bd8 <_fflush_r>
 80120e4:	bd10      	pop	{r4, pc}
 80120e6:	bf00      	nop
 80120e8:	2000f090 	.word	0x2000f090
 80120ec:	2000f0f8 	.word	0x2000f0f8
 80120f0:	2000f160 	.word	0x2000f160

080120f4 <global_stdio_init.part.0>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012124 <global_stdio_init.part.0+0x30>)
 80120f8:	4c0b      	ldr	r4, [pc, #44]	@ (8012128 <global_stdio_init.part.0+0x34>)
 80120fa:	4a0c      	ldr	r2, [pc, #48]	@ (801212c <global_stdio_init.part.0+0x38>)
 80120fc:	601a      	str	r2, [r3, #0]
 80120fe:	4620      	mov	r0, r4
 8012100:	2200      	movs	r2, #0
 8012102:	2104      	movs	r1, #4
 8012104:	f7ff ff94 	bl	8012030 <std>
 8012108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801210c:	2201      	movs	r2, #1
 801210e:	2109      	movs	r1, #9
 8012110:	f7ff ff8e 	bl	8012030 <std>
 8012114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012118:	2202      	movs	r2, #2
 801211a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801211e:	2112      	movs	r1, #18
 8012120:	f7ff bf86 	b.w	8012030 <std>
 8012124:	2000f1c8 	.word	0x2000f1c8
 8012128:	2000f090 	.word	0x2000f090
 801212c:	0801209d 	.word	0x0801209d

08012130 <__sfp_lock_acquire>:
 8012130:	4801      	ldr	r0, [pc, #4]	@ (8012138 <__sfp_lock_acquire+0x8>)
 8012132:	f000 b918 	b.w	8012366 <__retarget_lock_acquire_recursive>
 8012136:	bf00      	nop
 8012138:	2000f1cd 	.word	0x2000f1cd

0801213c <__sfp_lock_release>:
 801213c:	4801      	ldr	r0, [pc, #4]	@ (8012144 <__sfp_lock_release+0x8>)
 801213e:	f000 b913 	b.w	8012368 <__retarget_lock_release_recursive>
 8012142:	bf00      	nop
 8012144:	2000f1cd 	.word	0x2000f1cd

08012148 <__sinit>:
 8012148:	b510      	push	{r4, lr}
 801214a:	4604      	mov	r4, r0
 801214c:	f7ff fff0 	bl	8012130 <__sfp_lock_acquire>
 8012150:	6a23      	ldr	r3, [r4, #32]
 8012152:	b11b      	cbz	r3, 801215c <__sinit+0x14>
 8012154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012158:	f7ff bff0 	b.w	801213c <__sfp_lock_release>
 801215c:	4b04      	ldr	r3, [pc, #16]	@ (8012170 <__sinit+0x28>)
 801215e:	6223      	str	r3, [r4, #32]
 8012160:	4b04      	ldr	r3, [pc, #16]	@ (8012174 <__sinit+0x2c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1f5      	bne.n	8012154 <__sinit+0xc>
 8012168:	f7ff ffc4 	bl	80120f4 <global_stdio_init.part.0>
 801216c:	e7f2      	b.n	8012154 <__sinit+0xc>
 801216e:	bf00      	nop
 8012170:	080120b5 	.word	0x080120b5
 8012174:	2000f1c8 	.word	0x2000f1c8

08012178 <_fwalk_sglue>:
 8012178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801217c:	4607      	mov	r7, r0
 801217e:	4688      	mov	r8, r1
 8012180:	4614      	mov	r4, r2
 8012182:	2600      	movs	r6, #0
 8012184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012188:	f1b9 0901 	subs.w	r9, r9, #1
 801218c:	d505      	bpl.n	801219a <_fwalk_sglue+0x22>
 801218e:	6824      	ldr	r4, [r4, #0]
 8012190:	2c00      	cmp	r4, #0
 8012192:	d1f7      	bne.n	8012184 <_fwalk_sglue+0xc>
 8012194:	4630      	mov	r0, r6
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	89ab      	ldrh	r3, [r5, #12]
 801219c:	2b01      	cmp	r3, #1
 801219e:	d907      	bls.n	80121b0 <_fwalk_sglue+0x38>
 80121a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121a4:	3301      	adds	r3, #1
 80121a6:	d003      	beq.n	80121b0 <_fwalk_sglue+0x38>
 80121a8:	4629      	mov	r1, r5
 80121aa:	4638      	mov	r0, r7
 80121ac:	47c0      	blx	r8
 80121ae:	4306      	orrs	r6, r0
 80121b0:	3568      	adds	r5, #104	@ 0x68
 80121b2:	e7e9      	b.n	8012188 <_fwalk_sglue+0x10>

080121b4 <iprintf>:
 80121b4:	b40f      	push	{r0, r1, r2, r3}
 80121b6:	b507      	push	{r0, r1, r2, lr}
 80121b8:	4906      	ldr	r1, [pc, #24]	@ (80121d4 <iprintf+0x20>)
 80121ba:	ab04      	add	r3, sp, #16
 80121bc:	6808      	ldr	r0, [r1, #0]
 80121be:	f853 2b04 	ldr.w	r2, [r3], #4
 80121c2:	6881      	ldr	r1, [r0, #8]
 80121c4:	9301      	str	r3, [sp, #4]
 80121c6:	f000 f9dd 	bl	8012584 <_vfiprintf_r>
 80121ca:	b003      	add	sp, #12
 80121cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80121d0:	b004      	add	sp, #16
 80121d2:	4770      	bx	lr
 80121d4:	20000028 	.word	0x20000028

080121d8 <__sread>:
 80121d8:	b510      	push	{r4, lr}
 80121da:	460c      	mov	r4, r1
 80121dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e0:	f000 f878 	bl	80122d4 <_read_r>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	bfab      	itete	ge
 80121e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80121ea:	89a3      	ldrhlt	r3, [r4, #12]
 80121ec:	181b      	addge	r3, r3, r0
 80121ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80121f2:	bfac      	ite	ge
 80121f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80121f6:	81a3      	strhlt	r3, [r4, #12]
 80121f8:	bd10      	pop	{r4, pc}

080121fa <__swrite>:
 80121fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fe:	461f      	mov	r7, r3
 8012200:	898b      	ldrh	r3, [r1, #12]
 8012202:	05db      	lsls	r3, r3, #23
 8012204:	4605      	mov	r5, r0
 8012206:	460c      	mov	r4, r1
 8012208:	4616      	mov	r6, r2
 801220a:	d505      	bpl.n	8012218 <__swrite+0x1e>
 801220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012210:	2302      	movs	r3, #2
 8012212:	2200      	movs	r2, #0
 8012214:	f000 f84c 	bl	80122b0 <_lseek_r>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801221e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012222:	81a3      	strh	r3, [r4, #12]
 8012224:	4632      	mov	r2, r6
 8012226:	463b      	mov	r3, r7
 8012228:	4628      	mov	r0, r5
 801222a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801222e:	f000 b863 	b.w	80122f8 <_write_r>

08012232 <__sseek>:
 8012232:	b510      	push	{r4, lr}
 8012234:	460c      	mov	r4, r1
 8012236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801223a:	f000 f839 	bl	80122b0 <_lseek_r>
 801223e:	1c43      	adds	r3, r0, #1
 8012240:	89a3      	ldrh	r3, [r4, #12]
 8012242:	bf15      	itete	ne
 8012244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801224a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801224e:	81a3      	strheq	r3, [r4, #12]
 8012250:	bf18      	it	ne
 8012252:	81a3      	strhne	r3, [r4, #12]
 8012254:	bd10      	pop	{r4, pc}

08012256 <__sclose>:
 8012256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225a:	f000 b819 	b.w	8012290 <_close_r>

0801225e <memcmp>:
 801225e:	b510      	push	{r4, lr}
 8012260:	3901      	subs	r1, #1
 8012262:	4402      	add	r2, r0
 8012264:	4290      	cmp	r0, r2
 8012266:	d101      	bne.n	801226c <memcmp+0xe>
 8012268:	2000      	movs	r0, #0
 801226a:	e005      	b.n	8012278 <memcmp+0x1a>
 801226c:	7803      	ldrb	r3, [r0, #0]
 801226e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012272:	42a3      	cmp	r3, r4
 8012274:	d001      	beq.n	801227a <memcmp+0x1c>
 8012276:	1b18      	subs	r0, r3, r4
 8012278:	bd10      	pop	{r4, pc}
 801227a:	3001      	adds	r0, #1
 801227c:	e7f2      	b.n	8012264 <memcmp+0x6>

0801227e <memset>:
 801227e:	4402      	add	r2, r0
 8012280:	4603      	mov	r3, r0
 8012282:	4293      	cmp	r3, r2
 8012284:	d100      	bne.n	8012288 <memset+0xa>
 8012286:	4770      	bx	lr
 8012288:	f803 1b01 	strb.w	r1, [r3], #1
 801228c:	e7f9      	b.n	8012282 <memset+0x4>
	...

08012290 <_close_r>:
 8012290:	b538      	push	{r3, r4, r5, lr}
 8012292:	4d06      	ldr	r5, [pc, #24]	@ (80122ac <_close_r+0x1c>)
 8012294:	2300      	movs	r3, #0
 8012296:	4604      	mov	r4, r0
 8012298:	4608      	mov	r0, r1
 801229a:	602b      	str	r3, [r5, #0]
 801229c:	f7ee fc0c 	bl	8000ab8 <_close>
 80122a0:	1c43      	adds	r3, r0, #1
 80122a2:	d102      	bne.n	80122aa <_close_r+0x1a>
 80122a4:	682b      	ldr	r3, [r5, #0]
 80122a6:	b103      	cbz	r3, 80122aa <_close_r+0x1a>
 80122a8:	6023      	str	r3, [r4, #0]
 80122aa:	bd38      	pop	{r3, r4, r5, pc}
 80122ac:	2000f088 	.word	0x2000f088

080122b0 <_lseek_r>:
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4d07      	ldr	r5, [pc, #28]	@ (80122d0 <_lseek_r+0x20>)
 80122b4:	4604      	mov	r4, r0
 80122b6:	4608      	mov	r0, r1
 80122b8:	4611      	mov	r1, r2
 80122ba:	2200      	movs	r2, #0
 80122bc:	602a      	str	r2, [r5, #0]
 80122be:	461a      	mov	r2, r3
 80122c0:	f7ee fc21 	bl	8000b06 <_lseek>
 80122c4:	1c43      	adds	r3, r0, #1
 80122c6:	d102      	bne.n	80122ce <_lseek_r+0x1e>
 80122c8:	682b      	ldr	r3, [r5, #0]
 80122ca:	b103      	cbz	r3, 80122ce <_lseek_r+0x1e>
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	bd38      	pop	{r3, r4, r5, pc}
 80122d0:	2000f088 	.word	0x2000f088

080122d4 <_read_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4d07      	ldr	r5, [pc, #28]	@ (80122f4 <_read_r+0x20>)
 80122d8:	4604      	mov	r4, r0
 80122da:	4608      	mov	r0, r1
 80122dc:	4611      	mov	r1, r2
 80122de:	2200      	movs	r2, #0
 80122e0:	602a      	str	r2, [r5, #0]
 80122e2:	461a      	mov	r2, r3
 80122e4:	f7ee fbaf 	bl	8000a46 <_read>
 80122e8:	1c43      	adds	r3, r0, #1
 80122ea:	d102      	bne.n	80122f2 <_read_r+0x1e>
 80122ec:	682b      	ldr	r3, [r5, #0]
 80122ee:	b103      	cbz	r3, 80122f2 <_read_r+0x1e>
 80122f0:	6023      	str	r3, [r4, #0]
 80122f2:	bd38      	pop	{r3, r4, r5, pc}
 80122f4:	2000f088 	.word	0x2000f088

080122f8 <_write_r>:
 80122f8:	b538      	push	{r3, r4, r5, lr}
 80122fa:	4d07      	ldr	r5, [pc, #28]	@ (8012318 <_write_r+0x20>)
 80122fc:	4604      	mov	r4, r0
 80122fe:	4608      	mov	r0, r1
 8012300:	4611      	mov	r1, r2
 8012302:	2200      	movs	r2, #0
 8012304:	602a      	str	r2, [r5, #0]
 8012306:	461a      	mov	r2, r3
 8012308:	f7ee fbba 	bl	8000a80 <_write>
 801230c:	1c43      	adds	r3, r0, #1
 801230e:	d102      	bne.n	8012316 <_write_r+0x1e>
 8012310:	682b      	ldr	r3, [r5, #0]
 8012312:	b103      	cbz	r3, 8012316 <_write_r+0x1e>
 8012314:	6023      	str	r3, [r4, #0]
 8012316:	bd38      	pop	{r3, r4, r5, pc}
 8012318:	2000f088 	.word	0x2000f088

0801231c <__libc_init_array>:
 801231c:	b570      	push	{r4, r5, r6, lr}
 801231e:	4d0d      	ldr	r5, [pc, #52]	@ (8012354 <__libc_init_array+0x38>)
 8012320:	4c0d      	ldr	r4, [pc, #52]	@ (8012358 <__libc_init_array+0x3c>)
 8012322:	1b64      	subs	r4, r4, r5
 8012324:	10a4      	asrs	r4, r4, #2
 8012326:	2600      	movs	r6, #0
 8012328:	42a6      	cmp	r6, r4
 801232a:	d109      	bne.n	8012340 <__libc_init_array+0x24>
 801232c:	4d0b      	ldr	r5, [pc, #44]	@ (801235c <__libc_init_array+0x40>)
 801232e:	4c0c      	ldr	r4, [pc, #48]	@ (8012360 <__libc_init_array+0x44>)
 8012330:	f000 fe4a 	bl	8012fc8 <_init>
 8012334:	1b64      	subs	r4, r4, r5
 8012336:	10a4      	asrs	r4, r4, #2
 8012338:	2600      	movs	r6, #0
 801233a:	42a6      	cmp	r6, r4
 801233c:	d105      	bne.n	801234a <__libc_init_array+0x2e>
 801233e:	bd70      	pop	{r4, r5, r6, pc}
 8012340:	f855 3b04 	ldr.w	r3, [r5], #4
 8012344:	4798      	blx	r3
 8012346:	3601      	adds	r6, #1
 8012348:	e7ee      	b.n	8012328 <__libc_init_array+0xc>
 801234a:	f855 3b04 	ldr.w	r3, [r5], #4
 801234e:	4798      	blx	r3
 8012350:	3601      	adds	r6, #1
 8012352:	e7f2      	b.n	801233a <__libc_init_array+0x1e>
 8012354:	08015d64 	.word	0x08015d64
 8012358:	08015d64 	.word	0x08015d64
 801235c:	08015d64 	.word	0x08015d64
 8012360:	08015d68 	.word	0x08015d68

08012364 <__retarget_lock_init_recursive>:
 8012364:	4770      	bx	lr

08012366 <__retarget_lock_acquire_recursive>:
 8012366:	4770      	bx	lr

08012368 <__retarget_lock_release_recursive>:
 8012368:	4770      	bx	lr

0801236a <memcpy>:
 801236a:	440a      	add	r2, r1
 801236c:	4291      	cmp	r1, r2
 801236e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012372:	d100      	bne.n	8012376 <memcpy+0xc>
 8012374:	4770      	bx	lr
 8012376:	b510      	push	{r4, lr}
 8012378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801237c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012380:	4291      	cmp	r1, r2
 8012382:	d1f9      	bne.n	8012378 <memcpy+0xe>
 8012384:	bd10      	pop	{r4, pc}
	...

08012388 <__assert_func>:
 8012388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801238a:	4614      	mov	r4, r2
 801238c:	461a      	mov	r2, r3
 801238e:	4b09      	ldr	r3, [pc, #36]	@ (80123b4 <__assert_func+0x2c>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4605      	mov	r5, r0
 8012394:	68d8      	ldr	r0, [r3, #12]
 8012396:	b954      	cbnz	r4, 80123ae <__assert_func+0x26>
 8012398:	4b07      	ldr	r3, [pc, #28]	@ (80123b8 <__assert_func+0x30>)
 801239a:	461c      	mov	r4, r3
 801239c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123a0:	9100      	str	r1, [sp, #0]
 80123a2:	462b      	mov	r3, r5
 80123a4:	4905      	ldr	r1, [pc, #20]	@ (80123bc <__assert_func+0x34>)
 80123a6:	f000 fc3f 	bl	8012c28 <fiprintf>
 80123aa:	f000 fcf3 	bl	8012d94 <abort>
 80123ae:	4b04      	ldr	r3, [pc, #16]	@ (80123c0 <__assert_func+0x38>)
 80123b0:	e7f4      	b.n	801239c <__assert_func+0x14>
 80123b2:	bf00      	nop
 80123b4:	20000028 	.word	0x20000028
 80123b8:	08015d28 	.word	0x08015d28
 80123bc:	08015cfa 	.word	0x08015cfa
 80123c0:	08015ced 	.word	0x08015ced

080123c4 <malloc>:
 80123c4:	4b02      	ldr	r3, [pc, #8]	@ (80123d0 <malloc+0xc>)
 80123c6:	4601      	mov	r1, r0
 80123c8:	6818      	ldr	r0, [r3, #0]
 80123ca:	f000 b825 	b.w	8012418 <_malloc_r>
 80123ce:	bf00      	nop
 80123d0:	20000028 	.word	0x20000028

080123d4 <sbrk_aligned>:
 80123d4:	b570      	push	{r4, r5, r6, lr}
 80123d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012414 <sbrk_aligned+0x40>)
 80123d8:	460c      	mov	r4, r1
 80123da:	6831      	ldr	r1, [r6, #0]
 80123dc:	4605      	mov	r5, r0
 80123de:	b911      	cbnz	r1, 80123e6 <sbrk_aligned+0x12>
 80123e0:	f000 fcc8 	bl	8012d74 <_sbrk_r>
 80123e4:	6030      	str	r0, [r6, #0]
 80123e6:	4621      	mov	r1, r4
 80123e8:	4628      	mov	r0, r5
 80123ea:	f000 fcc3 	bl	8012d74 <_sbrk_r>
 80123ee:	1c43      	adds	r3, r0, #1
 80123f0:	d103      	bne.n	80123fa <sbrk_aligned+0x26>
 80123f2:	f04f 34ff 	mov.w	r4, #4294967295
 80123f6:	4620      	mov	r0, r4
 80123f8:	bd70      	pop	{r4, r5, r6, pc}
 80123fa:	1cc4      	adds	r4, r0, #3
 80123fc:	f024 0403 	bic.w	r4, r4, #3
 8012400:	42a0      	cmp	r0, r4
 8012402:	d0f8      	beq.n	80123f6 <sbrk_aligned+0x22>
 8012404:	1a21      	subs	r1, r4, r0
 8012406:	4628      	mov	r0, r5
 8012408:	f000 fcb4 	bl	8012d74 <_sbrk_r>
 801240c:	3001      	adds	r0, #1
 801240e:	d1f2      	bne.n	80123f6 <sbrk_aligned+0x22>
 8012410:	e7ef      	b.n	80123f2 <sbrk_aligned+0x1e>
 8012412:	bf00      	nop
 8012414:	2000f1d0 	.word	0x2000f1d0

08012418 <_malloc_r>:
 8012418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801241c:	1ccd      	adds	r5, r1, #3
 801241e:	f025 0503 	bic.w	r5, r5, #3
 8012422:	3508      	adds	r5, #8
 8012424:	2d0c      	cmp	r5, #12
 8012426:	bf38      	it	cc
 8012428:	250c      	movcc	r5, #12
 801242a:	2d00      	cmp	r5, #0
 801242c:	4606      	mov	r6, r0
 801242e:	db01      	blt.n	8012434 <_malloc_r+0x1c>
 8012430:	42a9      	cmp	r1, r5
 8012432:	d904      	bls.n	801243e <_malloc_r+0x26>
 8012434:	230c      	movs	r3, #12
 8012436:	6033      	str	r3, [r6, #0]
 8012438:	2000      	movs	r0, #0
 801243a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801243e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012514 <_malloc_r+0xfc>
 8012442:	f000 f869 	bl	8012518 <__malloc_lock>
 8012446:	f8d8 3000 	ldr.w	r3, [r8]
 801244a:	461c      	mov	r4, r3
 801244c:	bb44      	cbnz	r4, 80124a0 <_malloc_r+0x88>
 801244e:	4629      	mov	r1, r5
 8012450:	4630      	mov	r0, r6
 8012452:	f7ff ffbf 	bl	80123d4 <sbrk_aligned>
 8012456:	1c43      	adds	r3, r0, #1
 8012458:	4604      	mov	r4, r0
 801245a:	d158      	bne.n	801250e <_malloc_r+0xf6>
 801245c:	f8d8 4000 	ldr.w	r4, [r8]
 8012460:	4627      	mov	r7, r4
 8012462:	2f00      	cmp	r7, #0
 8012464:	d143      	bne.n	80124ee <_malloc_r+0xd6>
 8012466:	2c00      	cmp	r4, #0
 8012468:	d04b      	beq.n	8012502 <_malloc_r+0xea>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	4639      	mov	r1, r7
 801246e:	4630      	mov	r0, r6
 8012470:	eb04 0903 	add.w	r9, r4, r3
 8012474:	f000 fc7e 	bl	8012d74 <_sbrk_r>
 8012478:	4581      	cmp	r9, r0
 801247a:	d142      	bne.n	8012502 <_malloc_r+0xea>
 801247c:	6821      	ldr	r1, [r4, #0]
 801247e:	1a6d      	subs	r5, r5, r1
 8012480:	4629      	mov	r1, r5
 8012482:	4630      	mov	r0, r6
 8012484:	f7ff ffa6 	bl	80123d4 <sbrk_aligned>
 8012488:	3001      	adds	r0, #1
 801248a:	d03a      	beq.n	8012502 <_malloc_r+0xea>
 801248c:	6823      	ldr	r3, [r4, #0]
 801248e:	442b      	add	r3, r5
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	f8d8 3000 	ldr.w	r3, [r8]
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	bb62      	cbnz	r2, 80124f4 <_malloc_r+0xdc>
 801249a:	f8c8 7000 	str.w	r7, [r8]
 801249e:	e00f      	b.n	80124c0 <_malloc_r+0xa8>
 80124a0:	6822      	ldr	r2, [r4, #0]
 80124a2:	1b52      	subs	r2, r2, r5
 80124a4:	d420      	bmi.n	80124e8 <_malloc_r+0xd0>
 80124a6:	2a0b      	cmp	r2, #11
 80124a8:	d917      	bls.n	80124da <_malloc_r+0xc2>
 80124aa:	1961      	adds	r1, r4, r5
 80124ac:	42a3      	cmp	r3, r4
 80124ae:	6025      	str	r5, [r4, #0]
 80124b0:	bf18      	it	ne
 80124b2:	6059      	strne	r1, [r3, #4]
 80124b4:	6863      	ldr	r3, [r4, #4]
 80124b6:	bf08      	it	eq
 80124b8:	f8c8 1000 	streq.w	r1, [r8]
 80124bc:	5162      	str	r2, [r4, r5]
 80124be:	604b      	str	r3, [r1, #4]
 80124c0:	4630      	mov	r0, r6
 80124c2:	f000 f82f 	bl	8012524 <__malloc_unlock>
 80124c6:	f104 000b 	add.w	r0, r4, #11
 80124ca:	1d23      	adds	r3, r4, #4
 80124cc:	f020 0007 	bic.w	r0, r0, #7
 80124d0:	1ac2      	subs	r2, r0, r3
 80124d2:	bf1c      	itt	ne
 80124d4:	1a1b      	subne	r3, r3, r0
 80124d6:	50a3      	strne	r3, [r4, r2]
 80124d8:	e7af      	b.n	801243a <_malloc_r+0x22>
 80124da:	6862      	ldr	r2, [r4, #4]
 80124dc:	42a3      	cmp	r3, r4
 80124de:	bf0c      	ite	eq
 80124e0:	f8c8 2000 	streq.w	r2, [r8]
 80124e4:	605a      	strne	r2, [r3, #4]
 80124e6:	e7eb      	b.n	80124c0 <_malloc_r+0xa8>
 80124e8:	4623      	mov	r3, r4
 80124ea:	6864      	ldr	r4, [r4, #4]
 80124ec:	e7ae      	b.n	801244c <_malloc_r+0x34>
 80124ee:	463c      	mov	r4, r7
 80124f0:	687f      	ldr	r7, [r7, #4]
 80124f2:	e7b6      	b.n	8012462 <_malloc_r+0x4a>
 80124f4:	461a      	mov	r2, r3
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	42a3      	cmp	r3, r4
 80124fa:	d1fb      	bne.n	80124f4 <_malloc_r+0xdc>
 80124fc:	2300      	movs	r3, #0
 80124fe:	6053      	str	r3, [r2, #4]
 8012500:	e7de      	b.n	80124c0 <_malloc_r+0xa8>
 8012502:	230c      	movs	r3, #12
 8012504:	6033      	str	r3, [r6, #0]
 8012506:	4630      	mov	r0, r6
 8012508:	f000 f80c 	bl	8012524 <__malloc_unlock>
 801250c:	e794      	b.n	8012438 <_malloc_r+0x20>
 801250e:	6005      	str	r5, [r0, #0]
 8012510:	e7d6      	b.n	80124c0 <_malloc_r+0xa8>
 8012512:	bf00      	nop
 8012514:	2000f1d4 	.word	0x2000f1d4

08012518 <__malloc_lock>:
 8012518:	4801      	ldr	r0, [pc, #4]	@ (8012520 <__malloc_lock+0x8>)
 801251a:	f7ff bf24 	b.w	8012366 <__retarget_lock_acquire_recursive>
 801251e:	bf00      	nop
 8012520:	2000f1cc 	.word	0x2000f1cc

08012524 <__malloc_unlock>:
 8012524:	4801      	ldr	r0, [pc, #4]	@ (801252c <__malloc_unlock+0x8>)
 8012526:	f7ff bf1f 	b.w	8012368 <__retarget_lock_release_recursive>
 801252a:	bf00      	nop
 801252c:	2000f1cc 	.word	0x2000f1cc

08012530 <__sfputc_r>:
 8012530:	6893      	ldr	r3, [r2, #8]
 8012532:	3b01      	subs	r3, #1
 8012534:	2b00      	cmp	r3, #0
 8012536:	b410      	push	{r4}
 8012538:	6093      	str	r3, [r2, #8]
 801253a:	da08      	bge.n	801254e <__sfputc_r+0x1e>
 801253c:	6994      	ldr	r4, [r2, #24]
 801253e:	42a3      	cmp	r3, r4
 8012540:	db01      	blt.n	8012546 <__sfputc_r+0x16>
 8012542:	290a      	cmp	r1, #10
 8012544:	d103      	bne.n	801254e <__sfputc_r+0x1e>
 8012546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801254a:	f000 bb7f 	b.w	8012c4c <__swbuf_r>
 801254e:	6813      	ldr	r3, [r2, #0]
 8012550:	1c58      	adds	r0, r3, #1
 8012552:	6010      	str	r0, [r2, #0]
 8012554:	7019      	strb	r1, [r3, #0]
 8012556:	4608      	mov	r0, r1
 8012558:	f85d 4b04 	ldr.w	r4, [sp], #4
 801255c:	4770      	bx	lr

0801255e <__sfputs_r>:
 801255e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012560:	4606      	mov	r6, r0
 8012562:	460f      	mov	r7, r1
 8012564:	4614      	mov	r4, r2
 8012566:	18d5      	adds	r5, r2, r3
 8012568:	42ac      	cmp	r4, r5
 801256a:	d101      	bne.n	8012570 <__sfputs_r+0x12>
 801256c:	2000      	movs	r0, #0
 801256e:	e007      	b.n	8012580 <__sfputs_r+0x22>
 8012570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012574:	463a      	mov	r2, r7
 8012576:	4630      	mov	r0, r6
 8012578:	f7ff ffda 	bl	8012530 <__sfputc_r>
 801257c:	1c43      	adds	r3, r0, #1
 801257e:	d1f3      	bne.n	8012568 <__sfputs_r+0xa>
 8012580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012584 <_vfiprintf_r>:
 8012584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012588:	460d      	mov	r5, r1
 801258a:	b09d      	sub	sp, #116	@ 0x74
 801258c:	4614      	mov	r4, r2
 801258e:	4698      	mov	r8, r3
 8012590:	4606      	mov	r6, r0
 8012592:	b118      	cbz	r0, 801259c <_vfiprintf_r+0x18>
 8012594:	6a03      	ldr	r3, [r0, #32]
 8012596:	b90b      	cbnz	r3, 801259c <_vfiprintf_r+0x18>
 8012598:	f7ff fdd6 	bl	8012148 <__sinit>
 801259c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801259e:	07d9      	lsls	r1, r3, #31
 80125a0:	d405      	bmi.n	80125ae <_vfiprintf_r+0x2a>
 80125a2:	89ab      	ldrh	r3, [r5, #12]
 80125a4:	059a      	lsls	r2, r3, #22
 80125a6:	d402      	bmi.n	80125ae <_vfiprintf_r+0x2a>
 80125a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125aa:	f7ff fedc 	bl	8012366 <__retarget_lock_acquire_recursive>
 80125ae:	89ab      	ldrh	r3, [r5, #12]
 80125b0:	071b      	lsls	r3, r3, #28
 80125b2:	d501      	bpl.n	80125b8 <_vfiprintf_r+0x34>
 80125b4:	692b      	ldr	r3, [r5, #16]
 80125b6:	b99b      	cbnz	r3, 80125e0 <_vfiprintf_r+0x5c>
 80125b8:	4629      	mov	r1, r5
 80125ba:	4630      	mov	r0, r6
 80125bc:	f000 fb84 	bl	8012cc8 <__swsetup_r>
 80125c0:	b170      	cbz	r0, 80125e0 <_vfiprintf_r+0x5c>
 80125c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125c4:	07dc      	lsls	r4, r3, #31
 80125c6:	d504      	bpl.n	80125d2 <_vfiprintf_r+0x4e>
 80125c8:	f04f 30ff 	mov.w	r0, #4294967295
 80125cc:	b01d      	add	sp, #116	@ 0x74
 80125ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d2:	89ab      	ldrh	r3, [r5, #12]
 80125d4:	0598      	lsls	r0, r3, #22
 80125d6:	d4f7      	bmi.n	80125c8 <_vfiprintf_r+0x44>
 80125d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125da:	f7ff fec5 	bl	8012368 <__retarget_lock_release_recursive>
 80125de:	e7f3      	b.n	80125c8 <_vfiprintf_r+0x44>
 80125e0:	2300      	movs	r3, #0
 80125e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125e4:	2320      	movs	r3, #32
 80125e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80125ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80125ee:	2330      	movs	r3, #48	@ 0x30
 80125f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80127a0 <_vfiprintf_r+0x21c>
 80125f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80125f8:	f04f 0901 	mov.w	r9, #1
 80125fc:	4623      	mov	r3, r4
 80125fe:	469a      	mov	sl, r3
 8012600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012604:	b10a      	cbz	r2, 801260a <_vfiprintf_r+0x86>
 8012606:	2a25      	cmp	r2, #37	@ 0x25
 8012608:	d1f9      	bne.n	80125fe <_vfiprintf_r+0x7a>
 801260a:	ebba 0b04 	subs.w	fp, sl, r4
 801260e:	d00b      	beq.n	8012628 <_vfiprintf_r+0xa4>
 8012610:	465b      	mov	r3, fp
 8012612:	4622      	mov	r2, r4
 8012614:	4629      	mov	r1, r5
 8012616:	4630      	mov	r0, r6
 8012618:	f7ff ffa1 	bl	801255e <__sfputs_r>
 801261c:	3001      	adds	r0, #1
 801261e:	f000 80a7 	beq.w	8012770 <_vfiprintf_r+0x1ec>
 8012622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012624:	445a      	add	r2, fp
 8012626:	9209      	str	r2, [sp, #36]	@ 0x24
 8012628:	f89a 3000 	ldrb.w	r3, [sl]
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 809f 	beq.w	8012770 <_vfiprintf_r+0x1ec>
 8012632:	2300      	movs	r3, #0
 8012634:	f04f 32ff 	mov.w	r2, #4294967295
 8012638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801263c:	f10a 0a01 	add.w	sl, sl, #1
 8012640:	9304      	str	r3, [sp, #16]
 8012642:	9307      	str	r3, [sp, #28]
 8012644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012648:	931a      	str	r3, [sp, #104]	@ 0x68
 801264a:	4654      	mov	r4, sl
 801264c:	2205      	movs	r2, #5
 801264e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012652:	4853      	ldr	r0, [pc, #332]	@ (80127a0 <_vfiprintf_r+0x21c>)
 8012654:	f7ed fdf4 	bl	8000240 <memchr>
 8012658:	9a04      	ldr	r2, [sp, #16]
 801265a:	b9d8      	cbnz	r0, 8012694 <_vfiprintf_r+0x110>
 801265c:	06d1      	lsls	r1, r2, #27
 801265e:	bf44      	itt	mi
 8012660:	2320      	movmi	r3, #32
 8012662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012666:	0713      	lsls	r3, r2, #28
 8012668:	bf44      	itt	mi
 801266a:	232b      	movmi	r3, #43	@ 0x2b
 801266c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012670:	f89a 3000 	ldrb.w	r3, [sl]
 8012674:	2b2a      	cmp	r3, #42	@ 0x2a
 8012676:	d015      	beq.n	80126a4 <_vfiprintf_r+0x120>
 8012678:	9a07      	ldr	r2, [sp, #28]
 801267a:	4654      	mov	r4, sl
 801267c:	2000      	movs	r0, #0
 801267e:	f04f 0c0a 	mov.w	ip, #10
 8012682:	4621      	mov	r1, r4
 8012684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012688:	3b30      	subs	r3, #48	@ 0x30
 801268a:	2b09      	cmp	r3, #9
 801268c:	d94b      	bls.n	8012726 <_vfiprintf_r+0x1a2>
 801268e:	b1b0      	cbz	r0, 80126be <_vfiprintf_r+0x13a>
 8012690:	9207      	str	r2, [sp, #28]
 8012692:	e014      	b.n	80126be <_vfiprintf_r+0x13a>
 8012694:	eba0 0308 	sub.w	r3, r0, r8
 8012698:	fa09 f303 	lsl.w	r3, r9, r3
 801269c:	4313      	orrs	r3, r2
 801269e:	9304      	str	r3, [sp, #16]
 80126a0:	46a2      	mov	sl, r4
 80126a2:	e7d2      	b.n	801264a <_vfiprintf_r+0xc6>
 80126a4:	9b03      	ldr	r3, [sp, #12]
 80126a6:	1d19      	adds	r1, r3, #4
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	9103      	str	r1, [sp, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	bfbb      	ittet	lt
 80126b0:	425b      	neglt	r3, r3
 80126b2:	f042 0202 	orrlt.w	r2, r2, #2
 80126b6:	9307      	strge	r3, [sp, #28]
 80126b8:	9307      	strlt	r3, [sp, #28]
 80126ba:	bfb8      	it	lt
 80126bc:	9204      	strlt	r2, [sp, #16]
 80126be:	7823      	ldrb	r3, [r4, #0]
 80126c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80126c2:	d10a      	bne.n	80126da <_vfiprintf_r+0x156>
 80126c4:	7863      	ldrb	r3, [r4, #1]
 80126c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80126c8:	d132      	bne.n	8012730 <_vfiprintf_r+0x1ac>
 80126ca:	9b03      	ldr	r3, [sp, #12]
 80126cc:	1d1a      	adds	r2, r3, #4
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	9203      	str	r2, [sp, #12]
 80126d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80126d6:	3402      	adds	r4, #2
 80126d8:	9305      	str	r3, [sp, #20]
 80126da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80127b0 <_vfiprintf_r+0x22c>
 80126de:	7821      	ldrb	r1, [r4, #0]
 80126e0:	2203      	movs	r2, #3
 80126e2:	4650      	mov	r0, sl
 80126e4:	f7ed fdac 	bl	8000240 <memchr>
 80126e8:	b138      	cbz	r0, 80126fa <_vfiprintf_r+0x176>
 80126ea:	9b04      	ldr	r3, [sp, #16]
 80126ec:	eba0 000a 	sub.w	r0, r0, sl
 80126f0:	2240      	movs	r2, #64	@ 0x40
 80126f2:	4082      	lsls	r2, r0
 80126f4:	4313      	orrs	r3, r2
 80126f6:	3401      	adds	r4, #1
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fe:	4829      	ldr	r0, [pc, #164]	@ (80127a4 <_vfiprintf_r+0x220>)
 8012700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012704:	2206      	movs	r2, #6
 8012706:	f7ed fd9b 	bl	8000240 <memchr>
 801270a:	2800      	cmp	r0, #0
 801270c:	d03f      	beq.n	801278e <_vfiprintf_r+0x20a>
 801270e:	4b26      	ldr	r3, [pc, #152]	@ (80127a8 <_vfiprintf_r+0x224>)
 8012710:	bb1b      	cbnz	r3, 801275a <_vfiprintf_r+0x1d6>
 8012712:	9b03      	ldr	r3, [sp, #12]
 8012714:	3307      	adds	r3, #7
 8012716:	f023 0307 	bic.w	r3, r3, #7
 801271a:	3308      	adds	r3, #8
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012720:	443b      	add	r3, r7
 8012722:	9309      	str	r3, [sp, #36]	@ 0x24
 8012724:	e76a      	b.n	80125fc <_vfiprintf_r+0x78>
 8012726:	fb0c 3202 	mla	r2, ip, r2, r3
 801272a:	460c      	mov	r4, r1
 801272c:	2001      	movs	r0, #1
 801272e:	e7a8      	b.n	8012682 <_vfiprintf_r+0xfe>
 8012730:	2300      	movs	r3, #0
 8012732:	3401      	adds	r4, #1
 8012734:	9305      	str	r3, [sp, #20]
 8012736:	4619      	mov	r1, r3
 8012738:	f04f 0c0a 	mov.w	ip, #10
 801273c:	4620      	mov	r0, r4
 801273e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012742:	3a30      	subs	r2, #48	@ 0x30
 8012744:	2a09      	cmp	r2, #9
 8012746:	d903      	bls.n	8012750 <_vfiprintf_r+0x1cc>
 8012748:	2b00      	cmp	r3, #0
 801274a:	d0c6      	beq.n	80126da <_vfiprintf_r+0x156>
 801274c:	9105      	str	r1, [sp, #20]
 801274e:	e7c4      	b.n	80126da <_vfiprintf_r+0x156>
 8012750:	fb0c 2101 	mla	r1, ip, r1, r2
 8012754:	4604      	mov	r4, r0
 8012756:	2301      	movs	r3, #1
 8012758:	e7f0      	b.n	801273c <_vfiprintf_r+0x1b8>
 801275a:	ab03      	add	r3, sp, #12
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	462a      	mov	r2, r5
 8012760:	4b12      	ldr	r3, [pc, #72]	@ (80127ac <_vfiprintf_r+0x228>)
 8012762:	a904      	add	r1, sp, #16
 8012764:	4630      	mov	r0, r6
 8012766:	f3af 8000 	nop.w
 801276a:	4607      	mov	r7, r0
 801276c:	1c78      	adds	r0, r7, #1
 801276e:	d1d6      	bne.n	801271e <_vfiprintf_r+0x19a>
 8012770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	d405      	bmi.n	8012782 <_vfiprintf_r+0x1fe>
 8012776:	89ab      	ldrh	r3, [r5, #12]
 8012778:	059a      	lsls	r2, r3, #22
 801277a:	d402      	bmi.n	8012782 <_vfiprintf_r+0x1fe>
 801277c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801277e:	f7ff fdf3 	bl	8012368 <__retarget_lock_release_recursive>
 8012782:	89ab      	ldrh	r3, [r5, #12]
 8012784:	065b      	lsls	r3, r3, #25
 8012786:	f53f af1f 	bmi.w	80125c8 <_vfiprintf_r+0x44>
 801278a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801278c:	e71e      	b.n	80125cc <_vfiprintf_r+0x48>
 801278e:	ab03      	add	r3, sp, #12
 8012790:	9300      	str	r3, [sp, #0]
 8012792:	462a      	mov	r2, r5
 8012794:	4b05      	ldr	r3, [pc, #20]	@ (80127ac <_vfiprintf_r+0x228>)
 8012796:	a904      	add	r1, sp, #16
 8012798:	4630      	mov	r0, r6
 801279a:	f000 f879 	bl	8012890 <_printf_i>
 801279e:	e7e4      	b.n	801276a <_vfiprintf_r+0x1e6>
 80127a0:	08015d29 	.word	0x08015d29
 80127a4:	08015d33 	.word	0x08015d33
 80127a8:	00000000 	.word	0x00000000
 80127ac:	0801255f 	.word	0x0801255f
 80127b0:	08015d2f 	.word	0x08015d2f

080127b4 <_printf_common>:
 80127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b8:	4616      	mov	r6, r2
 80127ba:	4698      	mov	r8, r3
 80127bc:	688a      	ldr	r2, [r1, #8]
 80127be:	690b      	ldr	r3, [r1, #16]
 80127c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80127c4:	4293      	cmp	r3, r2
 80127c6:	bfb8      	it	lt
 80127c8:	4613      	movlt	r3, r2
 80127ca:	6033      	str	r3, [r6, #0]
 80127cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80127d0:	4607      	mov	r7, r0
 80127d2:	460c      	mov	r4, r1
 80127d4:	b10a      	cbz	r2, 80127da <_printf_common+0x26>
 80127d6:	3301      	adds	r3, #1
 80127d8:	6033      	str	r3, [r6, #0]
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	0699      	lsls	r1, r3, #26
 80127de:	bf42      	ittt	mi
 80127e0:	6833      	ldrmi	r3, [r6, #0]
 80127e2:	3302      	addmi	r3, #2
 80127e4:	6033      	strmi	r3, [r6, #0]
 80127e6:	6825      	ldr	r5, [r4, #0]
 80127e8:	f015 0506 	ands.w	r5, r5, #6
 80127ec:	d106      	bne.n	80127fc <_printf_common+0x48>
 80127ee:	f104 0a19 	add.w	sl, r4, #25
 80127f2:	68e3      	ldr	r3, [r4, #12]
 80127f4:	6832      	ldr	r2, [r6, #0]
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	42ab      	cmp	r3, r5
 80127fa:	dc26      	bgt.n	801284a <_printf_common+0x96>
 80127fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012800:	6822      	ldr	r2, [r4, #0]
 8012802:	3b00      	subs	r3, #0
 8012804:	bf18      	it	ne
 8012806:	2301      	movne	r3, #1
 8012808:	0692      	lsls	r2, r2, #26
 801280a:	d42b      	bmi.n	8012864 <_printf_common+0xb0>
 801280c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012810:	4641      	mov	r1, r8
 8012812:	4638      	mov	r0, r7
 8012814:	47c8      	blx	r9
 8012816:	3001      	adds	r0, #1
 8012818:	d01e      	beq.n	8012858 <_printf_common+0xa4>
 801281a:	6823      	ldr	r3, [r4, #0]
 801281c:	6922      	ldr	r2, [r4, #16]
 801281e:	f003 0306 	and.w	r3, r3, #6
 8012822:	2b04      	cmp	r3, #4
 8012824:	bf02      	ittt	eq
 8012826:	68e5      	ldreq	r5, [r4, #12]
 8012828:	6833      	ldreq	r3, [r6, #0]
 801282a:	1aed      	subeq	r5, r5, r3
 801282c:	68a3      	ldr	r3, [r4, #8]
 801282e:	bf0c      	ite	eq
 8012830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012834:	2500      	movne	r5, #0
 8012836:	4293      	cmp	r3, r2
 8012838:	bfc4      	itt	gt
 801283a:	1a9b      	subgt	r3, r3, r2
 801283c:	18ed      	addgt	r5, r5, r3
 801283e:	2600      	movs	r6, #0
 8012840:	341a      	adds	r4, #26
 8012842:	42b5      	cmp	r5, r6
 8012844:	d11a      	bne.n	801287c <_printf_common+0xc8>
 8012846:	2000      	movs	r0, #0
 8012848:	e008      	b.n	801285c <_printf_common+0xa8>
 801284a:	2301      	movs	r3, #1
 801284c:	4652      	mov	r2, sl
 801284e:	4641      	mov	r1, r8
 8012850:	4638      	mov	r0, r7
 8012852:	47c8      	blx	r9
 8012854:	3001      	adds	r0, #1
 8012856:	d103      	bne.n	8012860 <_printf_common+0xac>
 8012858:	f04f 30ff 	mov.w	r0, #4294967295
 801285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012860:	3501      	adds	r5, #1
 8012862:	e7c6      	b.n	80127f2 <_printf_common+0x3e>
 8012864:	18e1      	adds	r1, r4, r3
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	2030      	movs	r0, #48	@ 0x30
 801286a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801286e:	4422      	add	r2, r4
 8012870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012878:	3302      	adds	r3, #2
 801287a:	e7c7      	b.n	801280c <_printf_common+0x58>
 801287c:	2301      	movs	r3, #1
 801287e:	4622      	mov	r2, r4
 8012880:	4641      	mov	r1, r8
 8012882:	4638      	mov	r0, r7
 8012884:	47c8      	blx	r9
 8012886:	3001      	adds	r0, #1
 8012888:	d0e6      	beq.n	8012858 <_printf_common+0xa4>
 801288a:	3601      	adds	r6, #1
 801288c:	e7d9      	b.n	8012842 <_printf_common+0x8e>
	...

08012890 <_printf_i>:
 8012890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012894:	7e0f      	ldrb	r7, [r1, #24]
 8012896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012898:	2f78      	cmp	r7, #120	@ 0x78
 801289a:	4691      	mov	r9, r2
 801289c:	4680      	mov	r8, r0
 801289e:	460c      	mov	r4, r1
 80128a0:	469a      	mov	sl, r3
 80128a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80128a6:	d807      	bhi.n	80128b8 <_printf_i+0x28>
 80128a8:	2f62      	cmp	r7, #98	@ 0x62
 80128aa:	d80a      	bhi.n	80128c2 <_printf_i+0x32>
 80128ac:	2f00      	cmp	r7, #0
 80128ae:	f000 80d2 	beq.w	8012a56 <_printf_i+0x1c6>
 80128b2:	2f58      	cmp	r7, #88	@ 0x58
 80128b4:	f000 80b9 	beq.w	8012a2a <_printf_i+0x19a>
 80128b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80128c0:	e03a      	b.n	8012938 <_printf_i+0xa8>
 80128c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80128c6:	2b15      	cmp	r3, #21
 80128c8:	d8f6      	bhi.n	80128b8 <_printf_i+0x28>
 80128ca:	a101      	add	r1, pc, #4	@ (adr r1, 80128d0 <_printf_i+0x40>)
 80128cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128d0:	08012929 	.word	0x08012929
 80128d4:	0801293d 	.word	0x0801293d
 80128d8:	080128b9 	.word	0x080128b9
 80128dc:	080128b9 	.word	0x080128b9
 80128e0:	080128b9 	.word	0x080128b9
 80128e4:	080128b9 	.word	0x080128b9
 80128e8:	0801293d 	.word	0x0801293d
 80128ec:	080128b9 	.word	0x080128b9
 80128f0:	080128b9 	.word	0x080128b9
 80128f4:	080128b9 	.word	0x080128b9
 80128f8:	080128b9 	.word	0x080128b9
 80128fc:	08012a3d 	.word	0x08012a3d
 8012900:	08012967 	.word	0x08012967
 8012904:	080129f7 	.word	0x080129f7
 8012908:	080128b9 	.word	0x080128b9
 801290c:	080128b9 	.word	0x080128b9
 8012910:	08012a5f 	.word	0x08012a5f
 8012914:	080128b9 	.word	0x080128b9
 8012918:	08012967 	.word	0x08012967
 801291c:	080128b9 	.word	0x080128b9
 8012920:	080128b9 	.word	0x080128b9
 8012924:	080129ff 	.word	0x080129ff
 8012928:	6833      	ldr	r3, [r6, #0]
 801292a:	1d1a      	adds	r2, r3, #4
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	6032      	str	r2, [r6, #0]
 8012930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012938:	2301      	movs	r3, #1
 801293a:	e09d      	b.n	8012a78 <_printf_i+0x1e8>
 801293c:	6833      	ldr	r3, [r6, #0]
 801293e:	6820      	ldr	r0, [r4, #0]
 8012940:	1d19      	adds	r1, r3, #4
 8012942:	6031      	str	r1, [r6, #0]
 8012944:	0606      	lsls	r6, r0, #24
 8012946:	d501      	bpl.n	801294c <_printf_i+0xbc>
 8012948:	681d      	ldr	r5, [r3, #0]
 801294a:	e003      	b.n	8012954 <_printf_i+0xc4>
 801294c:	0645      	lsls	r5, r0, #25
 801294e:	d5fb      	bpl.n	8012948 <_printf_i+0xb8>
 8012950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012954:	2d00      	cmp	r5, #0
 8012956:	da03      	bge.n	8012960 <_printf_i+0xd0>
 8012958:	232d      	movs	r3, #45	@ 0x2d
 801295a:	426d      	negs	r5, r5
 801295c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012960:	4859      	ldr	r0, [pc, #356]	@ (8012ac8 <_printf_i+0x238>)
 8012962:	230a      	movs	r3, #10
 8012964:	e011      	b.n	801298a <_printf_i+0xfa>
 8012966:	6821      	ldr	r1, [r4, #0]
 8012968:	6833      	ldr	r3, [r6, #0]
 801296a:	0608      	lsls	r0, r1, #24
 801296c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012970:	d402      	bmi.n	8012978 <_printf_i+0xe8>
 8012972:	0649      	lsls	r1, r1, #25
 8012974:	bf48      	it	mi
 8012976:	b2ad      	uxthmi	r5, r5
 8012978:	2f6f      	cmp	r7, #111	@ 0x6f
 801297a:	4853      	ldr	r0, [pc, #332]	@ (8012ac8 <_printf_i+0x238>)
 801297c:	6033      	str	r3, [r6, #0]
 801297e:	bf14      	ite	ne
 8012980:	230a      	movne	r3, #10
 8012982:	2308      	moveq	r3, #8
 8012984:	2100      	movs	r1, #0
 8012986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801298a:	6866      	ldr	r6, [r4, #4]
 801298c:	60a6      	str	r6, [r4, #8]
 801298e:	2e00      	cmp	r6, #0
 8012990:	bfa2      	ittt	ge
 8012992:	6821      	ldrge	r1, [r4, #0]
 8012994:	f021 0104 	bicge.w	r1, r1, #4
 8012998:	6021      	strge	r1, [r4, #0]
 801299a:	b90d      	cbnz	r5, 80129a0 <_printf_i+0x110>
 801299c:	2e00      	cmp	r6, #0
 801299e:	d04b      	beq.n	8012a38 <_printf_i+0x1a8>
 80129a0:	4616      	mov	r6, r2
 80129a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80129a6:	fb03 5711 	mls	r7, r3, r1, r5
 80129aa:	5dc7      	ldrb	r7, [r0, r7]
 80129ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80129b0:	462f      	mov	r7, r5
 80129b2:	42bb      	cmp	r3, r7
 80129b4:	460d      	mov	r5, r1
 80129b6:	d9f4      	bls.n	80129a2 <_printf_i+0x112>
 80129b8:	2b08      	cmp	r3, #8
 80129ba:	d10b      	bne.n	80129d4 <_printf_i+0x144>
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	07df      	lsls	r7, r3, #31
 80129c0:	d508      	bpl.n	80129d4 <_printf_i+0x144>
 80129c2:	6923      	ldr	r3, [r4, #16]
 80129c4:	6861      	ldr	r1, [r4, #4]
 80129c6:	4299      	cmp	r1, r3
 80129c8:	bfde      	ittt	le
 80129ca:	2330      	movle	r3, #48	@ 0x30
 80129cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80129d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80129d4:	1b92      	subs	r2, r2, r6
 80129d6:	6122      	str	r2, [r4, #16]
 80129d8:	f8cd a000 	str.w	sl, [sp]
 80129dc:	464b      	mov	r3, r9
 80129de:	aa03      	add	r2, sp, #12
 80129e0:	4621      	mov	r1, r4
 80129e2:	4640      	mov	r0, r8
 80129e4:	f7ff fee6 	bl	80127b4 <_printf_common>
 80129e8:	3001      	adds	r0, #1
 80129ea:	d14a      	bne.n	8012a82 <_printf_i+0x1f2>
 80129ec:	f04f 30ff 	mov.w	r0, #4294967295
 80129f0:	b004      	add	sp, #16
 80129f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f6:	6823      	ldr	r3, [r4, #0]
 80129f8:	f043 0320 	orr.w	r3, r3, #32
 80129fc:	6023      	str	r3, [r4, #0]
 80129fe:	4833      	ldr	r0, [pc, #204]	@ (8012acc <_printf_i+0x23c>)
 8012a00:	2778      	movs	r7, #120	@ 0x78
 8012a02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012a06:	6823      	ldr	r3, [r4, #0]
 8012a08:	6831      	ldr	r1, [r6, #0]
 8012a0a:	061f      	lsls	r7, r3, #24
 8012a0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012a10:	d402      	bmi.n	8012a18 <_printf_i+0x188>
 8012a12:	065f      	lsls	r7, r3, #25
 8012a14:	bf48      	it	mi
 8012a16:	b2ad      	uxthmi	r5, r5
 8012a18:	6031      	str	r1, [r6, #0]
 8012a1a:	07d9      	lsls	r1, r3, #31
 8012a1c:	bf44      	itt	mi
 8012a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8012a22:	6023      	strmi	r3, [r4, #0]
 8012a24:	b11d      	cbz	r5, 8012a2e <_printf_i+0x19e>
 8012a26:	2310      	movs	r3, #16
 8012a28:	e7ac      	b.n	8012984 <_printf_i+0xf4>
 8012a2a:	4827      	ldr	r0, [pc, #156]	@ (8012ac8 <_printf_i+0x238>)
 8012a2c:	e7e9      	b.n	8012a02 <_printf_i+0x172>
 8012a2e:	6823      	ldr	r3, [r4, #0]
 8012a30:	f023 0320 	bic.w	r3, r3, #32
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	e7f6      	b.n	8012a26 <_printf_i+0x196>
 8012a38:	4616      	mov	r6, r2
 8012a3a:	e7bd      	b.n	80129b8 <_printf_i+0x128>
 8012a3c:	6833      	ldr	r3, [r6, #0]
 8012a3e:	6825      	ldr	r5, [r4, #0]
 8012a40:	6961      	ldr	r1, [r4, #20]
 8012a42:	1d18      	adds	r0, r3, #4
 8012a44:	6030      	str	r0, [r6, #0]
 8012a46:	062e      	lsls	r6, r5, #24
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	d501      	bpl.n	8012a50 <_printf_i+0x1c0>
 8012a4c:	6019      	str	r1, [r3, #0]
 8012a4e:	e002      	b.n	8012a56 <_printf_i+0x1c6>
 8012a50:	0668      	lsls	r0, r5, #25
 8012a52:	d5fb      	bpl.n	8012a4c <_printf_i+0x1bc>
 8012a54:	8019      	strh	r1, [r3, #0]
 8012a56:	2300      	movs	r3, #0
 8012a58:	6123      	str	r3, [r4, #16]
 8012a5a:	4616      	mov	r6, r2
 8012a5c:	e7bc      	b.n	80129d8 <_printf_i+0x148>
 8012a5e:	6833      	ldr	r3, [r6, #0]
 8012a60:	1d1a      	adds	r2, r3, #4
 8012a62:	6032      	str	r2, [r6, #0]
 8012a64:	681e      	ldr	r6, [r3, #0]
 8012a66:	6862      	ldr	r2, [r4, #4]
 8012a68:	2100      	movs	r1, #0
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f7ed fbe8 	bl	8000240 <memchr>
 8012a70:	b108      	cbz	r0, 8012a76 <_printf_i+0x1e6>
 8012a72:	1b80      	subs	r0, r0, r6
 8012a74:	6060      	str	r0, [r4, #4]
 8012a76:	6863      	ldr	r3, [r4, #4]
 8012a78:	6123      	str	r3, [r4, #16]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a80:	e7aa      	b.n	80129d8 <_printf_i+0x148>
 8012a82:	6923      	ldr	r3, [r4, #16]
 8012a84:	4632      	mov	r2, r6
 8012a86:	4649      	mov	r1, r9
 8012a88:	4640      	mov	r0, r8
 8012a8a:	47d0      	blx	sl
 8012a8c:	3001      	adds	r0, #1
 8012a8e:	d0ad      	beq.n	80129ec <_printf_i+0x15c>
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	079b      	lsls	r3, r3, #30
 8012a94:	d413      	bmi.n	8012abe <_printf_i+0x22e>
 8012a96:	68e0      	ldr	r0, [r4, #12]
 8012a98:	9b03      	ldr	r3, [sp, #12]
 8012a9a:	4298      	cmp	r0, r3
 8012a9c:	bfb8      	it	lt
 8012a9e:	4618      	movlt	r0, r3
 8012aa0:	e7a6      	b.n	80129f0 <_printf_i+0x160>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	47d0      	blx	sl
 8012aac:	3001      	adds	r0, #1
 8012aae:	d09d      	beq.n	80129ec <_printf_i+0x15c>
 8012ab0:	3501      	adds	r5, #1
 8012ab2:	68e3      	ldr	r3, [r4, #12]
 8012ab4:	9903      	ldr	r1, [sp, #12]
 8012ab6:	1a5b      	subs	r3, r3, r1
 8012ab8:	42ab      	cmp	r3, r5
 8012aba:	dcf2      	bgt.n	8012aa2 <_printf_i+0x212>
 8012abc:	e7eb      	b.n	8012a96 <_printf_i+0x206>
 8012abe:	2500      	movs	r5, #0
 8012ac0:	f104 0619 	add.w	r6, r4, #25
 8012ac4:	e7f5      	b.n	8012ab2 <_printf_i+0x222>
 8012ac6:	bf00      	nop
 8012ac8:	08015d3a 	.word	0x08015d3a
 8012acc:	08015d4b 	.word	0x08015d4b

08012ad0 <__sflush_r>:
 8012ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad8:	0716      	lsls	r6, r2, #28
 8012ada:	4605      	mov	r5, r0
 8012adc:	460c      	mov	r4, r1
 8012ade:	d454      	bmi.n	8012b8a <__sflush_r+0xba>
 8012ae0:	684b      	ldr	r3, [r1, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	dc02      	bgt.n	8012aec <__sflush_r+0x1c>
 8012ae6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	dd48      	ble.n	8012b7e <__sflush_r+0xae>
 8012aec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012aee:	2e00      	cmp	r6, #0
 8012af0:	d045      	beq.n	8012b7e <__sflush_r+0xae>
 8012af2:	2300      	movs	r3, #0
 8012af4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012af8:	682f      	ldr	r7, [r5, #0]
 8012afa:	6a21      	ldr	r1, [r4, #32]
 8012afc:	602b      	str	r3, [r5, #0]
 8012afe:	d030      	beq.n	8012b62 <__sflush_r+0x92>
 8012b00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b02:	89a3      	ldrh	r3, [r4, #12]
 8012b04:	0759      	lsls	r1, r3, #29
 8012b06:	d505      	bpl.n	8012b14 <__sflush_r+0x44>
 8012b08:	6863      	ldr	r3, [r4, #4]
 8012b0a:	1ad2      	subs	r2, r2, r3
 8012b0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b0e:	b10b      	cbz	r3, 8012b14 <__sflush_r+0x44>
 8012b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b12:	1ad2      	subs	r2, r2, r3
 8012b14:	2300      	movs	r3, #0
 8012b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b18:	6a21      	ldr	r1, [r4, #32]
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	47b0      	blx	r6
 8012b1e:	1c43      	adds	r3, r0, #1
 8012b20:	89a3      	ldrh	r3, [r4, #12]
 8012b22:	d106      	bne.n	8012b32 <__sflush_r+0x62>
 8012b24:	6829      	ldr	r1, [r5, #0]
 8012b26:	291d      	cmp	r1, #29
 8012b28:	d82b      	bhi.n	8012b82 <__sflush_r+0xb2>
 8012b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8012bd4 <__sflush_r+0x104>)
 8012b2c:	410a      	asrs	r2, r1
 8012b2e:	07d6      	lsls	r6, r2, #31
 8012b30:	d427      	bmi.n	8012b82 <__sflush_r+0xb2>
 8012b32:	2200      	movs	r2, #0
 8012b34:	6062      	str	r2, [r4, #4]
 8012b36:	04d9      	lsls	r1, r3, #19
 8012b38:	6922      	ldr	r2, [r4, #16]
 8012b3a:	6022      	str	r2, [r4, #0]
 8012b3c:	d504      	bpl.n	8012b48 <__sflush_r+0x78>
 8012b3e:	1c42      	adds	r2, r0, #1
 8012b40:	d101      	bne.n	8012b46 <__sflush_r+0x76>
 8012b42:	682b      	ldr	r3, [r5, #0]
 8012b44:	b903      	cbnz	r3, 8012b48 <__sflush_r+0x78>
 8012b46:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b4a:	602f      	str	r7, [r5, #0]
 8012b4c:	b1b9      	cbz	r1, 8012b7e <__sflush_r+0xae>
 8012b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b52:	4299      	cmp	r1, r3
 8012b54:	d002      	beq.n	8012b5c <__sflush_r+0x8c>
 8012b56:	4628      	mov	r0, r5
 8012b58:	f000 f924 	bl	8012da4 <_free_r>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b60:	e00d      	b.n	8012b7e <__sflush_r+0xae>
 8012b62:	2301      	movs	r3, #1
 8012b64:	4628      	mov	r0, r5
 8012b66:	47b0      	blx	r6
 8012b68:	4602      	mov	r2, r0
 8012b6a:	1c50      	adds	r0, r2, #1
 8012b6c:	d1c9      	bne.n	8012b02 <__sflush_r+0x32>
 8012b6e:	682b      	ldr	r3, [r5, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d0c6      	beq.n	8012b02 <__sflush_r+0x32>
 8012b74:	2b1d      	cmp	r3, #29
 8012b76:	d001      	beq.n	8012b7c <__sflush_r+0xac>
 8012b78:	2b16      	cmp	r3, #22
 8012b7a:	d11e      	bne.n	8012bba <__sflush_r+0xea>
 8012b7c:	602f      	str	r7, [r5, #0]
 8012b7e:	2000      	movs	r0, #0
 8012b80:	e022      	b.n	8012bc8 <__sflush_r+0xf8>
 8012b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b86:	b21b      	sxth	r3, r3
 8012b88:	e01b      	b.n	8012bc2 <__sflush_r+0xf2>
 8012b8a:	690f      	ldr	r7, [r1, #16]
 8012b8c:	2f00      	cmp	r7, #0
 8012b8e:	d0f6      	beq.n	8012b7e <__sflush_r+0xae>
 8012b90:	0793      	lsls	r3, r2, #30
 8012b92:	680e      	ldr	r6, [r1, #0]
 8012b94:	bf08      	it	eq
 8012b96:	694b      	ldreq	r3, [r1, #20]
 8012b98:	600f      	str	r7, [r1, #0]
 8012b9a:	bf18      	it	ne
 8012b9c:	2300      	movne	r3, #0
 8012b9e:	eba6 0807 	sub.w	r8, r6, r7
 8012ba2:	608b      	str	r3, [r1, #8]
 8012ba4:	f1b8 0f00 	cmp.w	r8, #0
 8012ba8:	dde9      	ble.n	8012b7e <__sflush_r+0xae>
 8012baa:	6a21      	ldr	r1, [r4, #32]
 8012bac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012bae:	4643      	mov	r3, r8
 8012bb0:	463a      	mov	r2, r7
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	47b0      	blx	r6
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	dc08      	bgt.n	8012bcc <__sflush_r+0xfc>
 8012bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bc2:	81a3      	strh	r3, [r4, #12]
 8012bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bcc:	4407      	add	r7, r0
 8012bce:	eba8 0800 	sub.w	r8, r8, r0
 8012bd2:	e7e7      	b.n	8012ba4 <__sflush_r+0xd4>
 8012bd4:	dfbffffe 	.word	0xdfbffffe

08012bd8 <_fflush_r>:
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	690b      	ldr	r3, [r1, #16]
 8012bdc:	4605      	mov	r5, r0
 8012bde:	460c      	mov	r4, r1
 8012be0:	b913      	cbnz	r3, 8012be8 <_fflush_r+0x10>
 8012be2:	2500      	movs	r5, #0
 8012be4:	4628      	mov	r0, r5
 8012be6:	bd38      	pop	{r3, r4, r5, pc}
 8012be8:	b118      	cbz	r0, 8012bf2 <_fflush_r+0x1a>
 8012bea:	6a03      	ldr	r3, [r0, #32]
 8012bec:	b90b      	cbnz	r3, 8012bf2 <_fflush_r+0x1a>
 8012bee:	f7ff faab 	bl	8012148 <__sinit>
 8012bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d0f3      	beq.n	8012be2 <_fflush_r+0xa>
 8012bfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012bfc:	07d0      	lsls	r0, r2, #31
 8012bfe:	d404      	bmi.n	8012c0a <_fflush_r+0x32>
 8012c00:	0599      	lsls	r1, r3, #22
 8012c02:	d402      	bmi.n	8012c0a <_fflush_r+0x32>
 8012c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c06:	f7ff fbae 	bl	8012366 <__retarget_lock_acquire_recursive>
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	f7ff ff5f 	bl	8012ad0 <__sflush_r>
 8012c12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c14:	07da      	lsls	r2, r3, #31
 8012c16:	4605      	mov	r5, r0
 8012c18:	d4e4      	bmi.n	8012be4 <_fflush_r+0xc>
 8012c1a:	89a3      	ldrh	r3, [r4, #12]
 8012c1c:	059b      	lsls	r3, r3, #22
 8012c1e:	d4e1      	bmi.n	8012be4 <_fflush_r+0xc>
 8012c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c22:	f7ff fba1 	bl	8012368 <__retarget_lock_release_recursive>
 8012c26:	e7dd      	b.n	8012be4 <_fflush_r+0xc>

08012c28 <fiprintf>:
 8012c28:	b40e      	push	{r1, r2, r3}
 8012c2a:	b503      	push	{r0, r1, lr}
 8012c2c:	4601      	mov	r1, r0
 8012c2e:	ab03      	add	r3, sp, #12
 8012c30:	4805      	ldr	r0, [pc, #20]	@ (8012c48 <fiprintf+0x20>)
 8012c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c36:	6800      	ldr	r0, [r0, #0]
 8012c38:	9301      	str	r3, [sp, #4]
 8012c3a:	f7ff fca3 	bl	8012584 <_vfiprintf_r>
 8012c3e:	b002      	add	sp, #8
 8012c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c44:	b003      	add	sp, #12
 8012c46:	4770      	bx	lr
 8012c48:	20000028 	.word	0x20000028

08012c4c <__swbuf_r>:
 8012c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4e:	460e      	mov	r6, r1
 8012c50:	4614      	mov	r4, r2
 8012c52:	4605      	mov	r5, r0
 8012c54:	b118      	cbz	r0, 8012c5e <__swbuf_r+0x12>
 8012c56:	6a03      	ldr	r3, [r0, #32]
 8012c58:	b90b      	cbnz	r3, 8012c5e <__swbuf_r+0x12>
 8012c5a:	f7ff fa75 	bl	8012148 <__sinit>
 8012c5e:	69a3      	ldr	r3, [r4, #24]
 8012c60:	60a3      	str	r3, [r4, #8]
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	071a      	lsls	r2, r3, #28
 8012c66:	d501      	bpl.n	8012c6c <__swbuf_r+0x20>
 8012c68:	6923      	ldr	r3, [r4, #16]
 8012c6a:	b943      	cbnz	r3, 8012c7e <__swbuf_r+0x32>
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	4628      	mov	r0, r5
 8012c70:	f000 f82a 	bl	8012cc8 <__swsetup_r>
 8012c74:	b118      	cbz	r0, 8012c7e <__swbuf_r+0x32>
 8012c76:	f04f 37ff 	mov.w	r7, #4294967295
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c7e:	6823      	ldr	r3, [r4, #0]
 8012c80:	6922      	ldr	r2, [r4, #16]
 8012c82:	1a98      	subs	r0, r3, r2
 8012c84:	6963      	ldr	r3, [r4, #20]
 8012c86:	b2f6      	uxtb	r6, r6
 8012c88:	4283      	cmp	r3, r0
 8012c8a:	4637      	mov	r7, r6
 8012c8c:	dc05      	bgt.n	8012c9a <__swbuf_r+0x4e>
 8012c8e:	4621      	mov	r1, r4
 8012c90:	4628      	mov	r0, r5
 8012c92:	f7ff ffa1 	bl	8012bd8 <_fflush_r>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d1ed      	bne.n	8012c76 <__swbuf_r+0x2a>
 8012c9a:	68a3      	ldr	r3, [r4, #8]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	60a3      	str	r3, [r4, #8]
 8012ca0:	6823      	ldr	r3, [r4, #0]
 8012ca2:	1c5a      	adds	r2, r3, #1
 8012ca4:	6022      	str	r2, [r4, #0]
 8012ca6:	701e      	strb	r6, [r3, #0]
 8012ca8:	6962      	ldr	r2, [r4, #20]
 8012caa:	1c43      	adds	r3, r0, #1
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d004      	beq.n	8012cba <__swbuf_r+0x6e>
 8012cb0:	89a3      	ldrh	r3, [r4, #12]
 8012cb2:	07db      	lsls	r3, r3, #31
 8012cb4:	d5e1      	bpl.n	8012c7a <__swbuf_r+0x2e>
 8012cb6:	2e0a      	cmp	r6, #10
 8012cb8:	d1df      	bne.n	8012c7a <__swbuf_r+0x2e>
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	f7ff ff8b 	bl	8012bd8 <_fflush_r>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d0d9      	beq.n	8012c7a <__swbuf_r+0x2e>
 8012cc6:	e7d6      	b.n	8012c76 <__swbuf_r+0x2a>

08012cc8 <__swsetup_r>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	4b29      	ldr	r3, [pc, #164]	@ (8012d70 <__swsetup_r+0xa8>)
 8012ccc:	4605      	mov	r5, r0
 8012cce:	6818      	ldr	r0, [r3, #0]
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	b118      	cbz	r0, 8012cdc <__swsetup_r+0x14>
 8012cd4:	6a03      	ldr	r3, [r0, #32]
 8012cd6:	b90b      	cbnz	r3, 8012cdc <__swsetup_r+0x14>
 8012cd8:	f7ff fa36 	bl	8012148 <__sinit>
 8012cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ce0:	0719      	lsls	r1, r3, #28
 8012ce2:	d422      	bmi.n	8012d2a <__swsetup_r+0x62>
 8012ce4:	06da      	lsls	r2, r3, #27
 8012ce6:	d407      	bmi.n	8012cf8 <__swsetup_r+0x30>
 8012ce8:	2209      	movs	r2, #9
 8012cea:	602a      	str	r2, [r5, #0]
 8012cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cf0:	81a3      	strh	r3, [r4, #12]
 8012cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf6:	e033      	b.n	8012d60 <__swsetup_r+0x98>
 8012cf8:	0758      	lsls	r0, r3, #29
 8012cfa:	d512      	bpl.n	8012d22 <__swsetup_r+0x5a>
 8012cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cfe:	b141      	cbz	r1, 8012d12 <__swsetup_r+0x4a>
 8012d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d04:	4299      	cmp	r1, r3
 8012d06:	d002      	beq.n	8012d0e <__swsetup_r+0x46>
 8012d08:	4628      	mov	r0, r5
 8012d0a:	f000 f84b 	bl	8012da4 <_free_r>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d12:	89a3      	ldrh	r3, [r4, #12]
 8012d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012d18:	81a3      	strh	r3, [r4, #12]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	6063      	str	r3, [r4, #4]
 8012d1e:	6923      	ldr	r3, [r4, #16]
 8012d20:	6023      	str	r3, [r4, #0]
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	f043 0308 	orr.w	r3, r3, #8
 8012d28:	81a3      	strh	r3, [r4, #12]
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	b94b      	cbnz	r3, 8012d42 <__swsetup_r+0x7a>
 8012d2e:	89a3      	ldrh	r3, [r4, #12]
 8012d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d38:	d003      	beq.n	8012d42 <__swsetup_r+0x7a>
 8012d3a:	4621      	mov	r1, r4
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f000 f8a1 	bl	8012e84 <__smakebuf_r>
 8012d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d46:	f013 0201 	ands.w	r2, r3, #1
 8012d4a:	d00a      	beq.n	8012d62 <__swsetup_r+0x9a>
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	60a2      	str	r2, [r4, #8]
 8012d50:	6962      	ldr	r2, [r4, #20]
 8012d52:	4252      	negs	r2, r2
 8012d54:	61a2      	str	r2, [r4, #24]
 8012d56:	6922      	ldr	r2, [r4, #16]
 8012d58:	b942      	cbnz	r2, 8012d6c <__swsetup_r+0xa4>
 8012d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012d5e:	d1c5      	bne.n	8012cec <__swsetup_r+0x24>
 8012d60:	bd38      	pop	{r3, r4, r5, pc}
 8012d62:	0799      	lsls	r1, r3, #30
 8012d64:	bf58      	it	pl
 8012d66:	6962      	ldrpl	r2, [r4, #20]
 8012d68:	60a2      	str	r2, [r4, #8]
 8012d6a:	e7f4      	b.n	8012d56 <__swsetup_r+0x8e>
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	e7f7      	b.n	8012d60 <__swsetup_r+0x98>
 8012d70:	20000028 	.word	0x20000028

08012d74 <_sbrk_r>:
 8012d74:	b538      	push	{r3, r4, r5, lr}
 8012d76:	4d06      	ldr	r5, [pc, #24]	@ (8012d90 <_sbrk_r+0x1c>)
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4608      	mov	r0, r1
 8012d7e:	602b      	str	r3, [r5, #0]
 8012d80:	f7ed fece 	bl	8000b20 <_sbrk>
 8012d84:	1c43      	adds	r3, r0, #1
 8012d86:	d102      	bne.n	8012d8e <_sbrk_r+0x1a>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b103      	cbz	r3, 8012d8e <_sbrk_r+0x1a>
 8012d8c:	6023      	str	r3, [r4, #0]
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	2000f088 	.word	0x2000f088

08012d94 <abort>:
 8012d94:	b508      	push	{r3, lr}
 8012d96:	2006      	movs	r0, #6
 8012d98:	f000 f8d8 	bl	8012f4c <raise>
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	f7ed fe47 	bl	8000a30 <_exit>
	...

08012da4 <_free_r>:
 8012da4:	b538      	push	{r3, r4, r5, lr}
 8012da6:	4605      	mov	r5, r0
 8012da8:	2900      	cmp	r1, #0
 8012daa:	d041      	beq.n	8012e30 <_free_r+0x8c>
 8012dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012db0:	1f0c      	subs	r4, r1, #4
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	bfb8      	it	lt
 8012db6:	18e4      	addlt	r4, r4, r3
 8012db8:	f7ff fbae 	bl	8012518 <__malloc_lock>
 8012dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8012e34 <_free_r+0x90>)
 8012dbe:	6813      	ldr	r3, [r2, #0]
 8012dc0:	b933      	cbnz	r3, 8012dd0 <_free_r+0x2c>
 8012dc2:	6063      	str	r3, [r4, #4]
 8012dc4:	6014      	str	r4, [r2, #0]
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dcc:	f7ff bbaa 	b.w	8012524 <__malloc_unlock>
 8012dd0:	42a3      	cmp	r3, r4
 8012dd2:	d908      	bls.n	8012de6 <_free_r+0x42>
 8012dd4:	6820      	ldr	r0, [r4, #0]
 8012dd6:	1821      	adds	r1, r4, r0
 8012dd8:	428b      	cmp	r3, r1
 8012dda:	bf01      	itttt	eq
 8012ddc:	6819      	ldreq	r1, [r3, #0]
 8012dde:	685b      	ldreq	r3, [r3, #4]
 8012de0:	1809      	addeq	r1, r1, r0
 8012de2:	6021      	streq	r1, [r4, #0]
 8012de4:	e7ed      	b.n	8012dc2 <_free_r+0x1e>
 8012de6:	461a      	mov	r2, r3
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	b10b      	cbz	r3, 8012df0 <_free_r+0x4c>
 8012dec:	42a3      	cmp	r3, r4
 8012dee:	d9fa      	bls.n	8012de6 <_free_r+0x42>
 8012df0:	6811      	ldr	r1, [r2, #0]
 8012df2:	1850      	adds	r0, r2, r1
 8012df4:	42a0      	cmp	r0, r4
 8012df6:	d10b      	bne.n	8012e10 <_free_r+0x6c>
 8012df8:	6820      	ldr	r0, [r4, #0]
 8012dfa:	4401      	add	r1, r0
 8012dfc:	1850      	adds	r0, r2, r1
 8012dfe:	4283      	cmp	r3, r0
 8012e00:	6011      	str	r1, [r2, #0]
 8012e02:	d1e0      	bne.n	8012dc6 <_free_r+0x22>
 8012e04:	6818      	ldr	r0, [r3, #0]
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	6053      	str	r3, [r2, #4]
 8012e0a:	4408      	add	r0, r1
 8012e0c:	6010      	str	r0, [r2, #0]
 8012e0e:	e7da      	b.n	8012dc6 <_free_r+0x22>
 8012e10:	d902      	bls.n	8012e18 <_free_r+0x74>
 8012e12:	230c      	movs	r3, #12
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	e7d6      	b.n	8012dc6 <_free_r+0x22>
 8012e18:	6820      	ldr	r0, [r4, #0]
 8012e1a:	1821      	adds	r1, r4, r0
 8012e1c:	428b      	cmp	r3, r1
 8012e1e:	bf04      	itt	eq
 8012e20:	6819      	ldreq	r1, [r3, #0]
 8012e22:	685b      	ldreq	r3, [r3, #4]
 8012e24:	6063      	str	r3, [r4, #4]
 8012e26:	bf04      	itt	eq
 8012e28:	1809      	addeq	r1, r1, r0
 8012e2a:	6021      	streq	r1, [r4, #0]
 8012e2c:	6054      	str	r4, [r2, #4]
 8012e2e:	e7ca      	b.n	8012dc6 <_free_r+0x22>
 8012e30:	bd38      	pop	{r3, r4, r5, pc}
 8012e32:	bf00      	nop
 8012e34:	2000f1d4 	.word	0x2000f1d4

08012e38 <__swhatbuf_r>:
 8012e38:	b570      	push	{r4, r5, r6, lr}
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e40:	2900      	cmp	r1, #0
 8012e42:	b096      	sub	sp, #88	@ 0x58
 8012e44:	4615      	mov	r5, r2
 8012e46:	461e      	mov	r6, r3
 8012e48:	da0d      	bge.n	8012e66 <__swhatbuf_r+0x2e>
 8012e4a:	89a3      	ldrh	r3, [r4, #12]
 8012e4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012e50:	f04f 0100 	mov.w	r1, #0
 8012e54:	bf14      	ite	ne
 8012e56:	2340      	movne	r3, #64	@ 0x40
 8012e58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	6031      	str	r1, [r6, #0]
 8012e60:	602b      	str	r3, [r5, #0]
 8012e62:	b016      	add	sp, #88	@ 0x58
 8012e64:	bd70      	pop	{r4, r5, r6, pc}
 8012e66:	466a      	mov	r2, sp
 8012e68:	f000 f878 	bl	8012f5c <_fstat_r>
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	dbec      	blt.n	8012e4a <__swhatbuf_r+0x12>
 8012e70:	9901      	ldr	r1, [sp, #4]
 8012e72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012e76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012e7a:	4259      	negs	r1, r3
 8012e7c:	4159      	adcs	r1, r3
 8012e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e82:	e7eb      	b.n	8012e5c <__swhatbuf_r+0x24>

08012e84 <__smakebuf_r>:
 8012e84:	898b      	ldrh	r3, [r1, #12]
 8012e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e88:	079d      	lsls	r5, r3, #30
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	460c      	mov	r4, r1
 8012e8e:	d507      	bpl.n	8012ea0 <__smakebuf_r+0x1c>
 8012e90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012e94:	6023      	str	r3, [r4, #0]
 8012e96:	6123      	str	r3, [r4, #16]
 8012e98:	2301      	movs	r3, #1
 8012e9a:	6163      	str	r3, [r4, #20]
 8012e9c:	b003      	add	sp, #12
 8012e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ea0:	ab01      	add	r3, sp, #4
 8012ea2:	466a      	mov	r2, sp
 8012ea4:	f7ff ffc8 	bl	8012e38 <__swhatbuf_r>
 8012ea8:	9f00      	ldr	r7, [sp, #0]
 8012eaa:	4605      	mov	r5, r0
 8012eac:	4639      	mov	r1, r7
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f7ff fab2 	bl	8012418 <_malloc_r>
 8012eb4:	b948      	cbnz	r0, 8012eca <__smakebuf_r+0x46>
 8012eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eba:	059a      	lsls	r2, r3, #22
 8012ebc:	d4ee      	bmi.n	8012e9c <__smakebuf_r+0x18>
 8012ebe:	f023 0303 	bic.w	r3, r3, #3
 8012ec2:	f043 0302 	orr.w	r3, r3, #2
 8012ec6:	81a3      	strh	r3, [r4, #12]
 8012ec8:	e7e2      	b.n	8012e90 <__smakebuf_r+0xc>
 8012eca:	89a3      	ldrh	r3, [r4, #12]
 8012ecc:	6020      	str	r0, [r4, #0]
 8012ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	9b01      	ldr	r3, [sp, #4]
 8012ed6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012eda:	b15b      	cbz	r3, 8012ef4 <__smakebuf_r+0x70>
 8012edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f000 f84d 	bl	8012f80 <_isatty_r>
 8012ee6:	b128      	cbz	r0, 8012ef4 <__smakebuf_r+0x70>
 8012ee8:	89a3      	ldrh	r3, [r4, #12]
 8012eea:	f023 0303 	bic.w	r3, r3, #3
 8012eee:	f043 0301 	orr.w	r3, r3, #1
 8012ef2:	81a3      	strh	r3, [r4, #12]
 8012ef4:	89a3      	ldrh	r3, [r4, #12]
 8012ef6:	431d      	orrs	r5, r3
 8012ef8:	81a5      	strh	r5, [r4, #12]
 8012efa:	e7cf      	b.n	8012e9c <__smakebuf_r+0x18>

08012efc <_raise_r>:
 8012efc:	291f      	cmp	r1, #31
 8012efe:	b538      	push	{r3, r4, r5, lr}
 8012f00:	4605      	mov	r5, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	d904      	bls.n	8012f10 <_raise_r+0x14>
 8012f06:	2316      	movs	r3, #22
 8012f08:	6003      	str	r3, [r0, #0]
 8012f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f12:	b112      	cbz	r2, 8012f1a <_raise_r+0x1e>
 8012f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f18:	b94b      	cbnz	r3, 8012f2e <_raise_r+0x32>
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f000 f852 	bl	8012fc4 <_getpid_r>
 8012f20:	4622      	mov	r2, r4
 8012f22:	4601      	mov	r1, r0
 8012f24:	4628      	mov	r0, r5
 8012f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f2a:	f000 b839 	b.w	8012fa0 <_kill_r>
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d00a      	beq.n	8012f48 <_raise_r+0x4c>
 8012f32:	1c59      	adds	r1, r3, #1
 8012f34:	d103      	bne.n	8012f3e <_raise_r+0x42>
 8012f36:	2316      	movs	r3, #22
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	2001      	movs	r0, #1
 8012f3c:	e7e7      	b.n	8012f0e <_raise_r+0x12>
 8012f3e:	2100      	movs	r1, #0
 8012f40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f44:	4620      	mov	r0, r4
 8012f46:	4798      	blx	r3
 8012f48:	2000      	movs	r0, #0
 8012f4a:	e7e0      	b.n	8012f0e <_raise_r+0x12>

08012f4c <raise>:
 8012f4c:	4b02      	ldr	r3, [pc, #8]	@ (8012f58 <raise+0xc>)
 8012f4e:	4601      	mov	r1, r0
 8012f50:	6818      	ldr	r0, [r3, #0]
 8012f52:	f7ff bfd3 	b.w	8012efc <_raise_r>
 8012f56:	bf00      	nop
 8012f58:	20000028 	.word	0x20000028

08012f5c <_fstat_r>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4d07      	ldr	r5, [pc, #28]	@ (8012f7c <_fstat_r+0x20>)
 8012f60:	2300      	movs	r3, #0
 8012f62:	4604      	mov	r4, r0
 8012f64:	4608      	mov	r0, r1
 8012f66:	4611      	mov	r1, r2
 8012f68:	602b      	str	r3, [r5, #0]
 8012f6a:	f7ed fdb1 	bl	8000ad0 <_fstat>
 8012f6e:	1c43      	adds	r3, r0, #1
 8012f70:	d102      	bne.n	8012f78 <_fstat_r+0x1c>
 8012f72:	682b      	ldr	r3, [r5, #0]
 8012f74:	b103      	cbz	r3, 8012f78 <_fstat_r+0x1c>
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	bd38      	pop	{r3, r4, r5, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2000f088 	.word	0x2000f088

08012f80 <_isatty_r>:
 8012f80:	b538      	push	{r3, r4, r5, lr}
 8012f82:	4d06      	ldr	r5, [pc, #24]	@ (8012f9c <_isatty_r+0x1c>)
 8012f84:	2300      	movs	r3, #0
 8012f86:	4604      	mov	r4, r0
 8012f88:	4608      	mov	r0, r1
 8012f8a:	602b      	str	r3, [r5, #0]
 8012f8c:	f7ed fdb0 	bl	8000af0 <_isatty>
 8012f90:	1c43      	adds	r3, r0, #1
 8012f92:	d102      	bne.n	8012f9a <_isatty_r+0x1a>
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	b103      	cbz	r3, 8012f9a <_isatty_r+0x1a>
 8012f98:	6023      	str	r3, [r4, #0]
 8012f9a:	bd38      	pop	{r3, r4, r5, pc}
 8012f9c:	2000f088 	.word	0x2000f088

08012fa0 <_kill_r>:
 8012fa0:	b538      	push	{r3, r4, r5, lr}
 8012fa2:	4d07      	ldr	r5, [pc, #28]	@ (8012fc0 <_kill_r+0x20>)
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	4608      	mov	r0, r1
 8012faa:	4611      	mov	r1, r2
 8012fac:	602b      	str	r3, [r5, #0]
 8012fae:	f7ed fd2d 	bl	8000a0c <_kill>
 8012fb2:	1c43      	adds	r3, r0, #1
 8012fb4:	d102      	bne.n	8012fbc <_kill_r+0x1c>
 8012fb6:	682b      	ldr	r3, [r5, #0]
 8012fb8:	b103      	cbz	r3, 8012fbc <_kill_r+0x1c>
 8012fba:	6023      	str	r3, [r4, #0]
 8012fbc:	bd38      	pop	{r3, r4, r5, pc}
 8012fbe:	bf00      	nop
 8012fc0:	2000f088 	.word	0x2000f088

08012fc4 <_getpid_r>:
 8012fc4:	f7ed bd1a 	b.w	80009fc <_getpid>

08012fc8 <_init>:
 8012fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fca:	bf00      	nop
 8012fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fce:	bc08      	pop	{r3}
 8012fd0:	469e      	mov	lr, r3
 8012fd2:	4770      	bx	lr

08012fd4 <_fini>:
 8012fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd6:	bf00      	nop
 8012fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fda:	bc08      	pop	{r3}
 8012fdc:	469e      	mov	lr, r3
 8012fde:	4770      	bx	lr
